
final_mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000037be  00003852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800080  00800080  00003872  2**0
                  ALLOC
  3 .stab         00003d44  00000000  00000000  00003874  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c12  00000000  00000000  000075b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000091ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000930a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000947a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b0c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bfae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000cebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__vector_3>
      10:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__vector_6>
      1c:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__vector_7>
      20:	0c 94 26 18 	jmp	0x304c	; 0x304c <__vector_8>
      24:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 14 	call	0x29ea	; 0x29ea <main>
      8a:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP2_init>:
 * 					HAL, UART Drivers
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2a 97       	sbiw	r28, 0x0a	; 10
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * Parity bits: No bits
	 * Data length: 8 bits
	 * Number of stop bits: 1
	 * Baud Rate: 19200
	 */
	UART_configType UART_config = {OFF, EIGHT, ONE, 19200};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9f 83       	std	Y+7, r25	; 0x07
     b60:	8e 83       	std	Y+6, r24	; 0x06
     b62:	e9 e6       	ldi	r30, 0x69	; 105
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	f9 87       	std	Y+9, r31	; 0x09
     b68:	e8 87       	std	Y+8, r30	; 0x08
     b6a:	f5 e0       	ldi	r31, 0x05	; 5
     b6c:	fa 87       	std	Y+10, r31	; 0x0a
     b6e:	e8 85       	ldd	r30, Y+8	; 0x08
     b70:	f9 85       	ldd	r31, Y+9	; 0x09
     b72:	00 80       	ld	r0, Z
     b74:	88 85       	ldd	r24, Y+8	; 0x08
     b76:	99 85       	ldd	r25, Y+9	; 0x09
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 87       	std	Y+9, r25	; 0x09
     b7c:	88 87       	std	Y+8, r24	; 0x08
     b7e:	ee 81       	ldd	r30, Y+6	; 0x06
     b80:	ff 81       	ldd	r31, Y+7	; 0x07
     b82:	00 82       	st	Z, r0
     b84:	8e 81       	ldd	r24, Y+6	; 0x06
     b86:	9f 81       	ldd	r25, Y+7	; 0x07
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f 83       	std	Y+7, r25	; 0x07
     b8c:	8e 83       	std	Y+6, r24	; 0x06
     b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9a 87       	std	Y+10, r25	; 0x0a
     b94:	ea 85       	ldd	r30, Y+10	; 0x0a
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <APP2_init+0x28>
	UART_init(&UART_config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 07 1a 	call	0x340e	; 0x340e <UART_init>

	/* Initializing the hardware drivers */
	EEPROM_init();
     ba2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <EEPROM_init>
	BUZZER_init();
     ba6:	0e 94 80 0b 	call	0x1700	; 0x1700 <BUZZER_init>
	DcMotor_Init();
     baa:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DcMotor_Init>
}
     bae:	2a 96       	adiw	r28, 0x0a	; 10
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <APP2_checkForFirstTime>:
 * 					time or not.
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_checkForFirstTime(void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	ab 97       	sbiw	r28, 0x2b	; 43
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
     bd4:	1b a6       	std	Y+43, r1	; 0x2b

	/* Read the EEPROM password check flag whether it's 0 or 1
	 * 0: It's the first time for the user to enter the password in EEPROM
	 * 1: The user entered a password in EEPROM before */
	EEPROM_readByte(EEPROM_ADDRESS_FLAG, &g_pass_check);
     bd6:	28 e6       	ldi	r18, 0x68	; 104
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	88 ec       	ldi	r24, 0xC8	; 200
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	b9 01       	movw	r22, r18
     be0:	0e 94 93 0c 	call	0x1926	; 0x1926 <EEPROM_readByte>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	aa ef       	ldi	r26, 0xFA	; 250
     bea:	b3 e4       	ldi	r27, 0x43	; 67
     bec:	8f a3       	std	Y+39, r24	; 0x27
     bee:	98 a7       	std	Y+40, r25	; 0x28
     bf0:	a9 a7       	std	Y+41, r26	; 0x29
     bf2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf4:	6f a1       	ldd	r22, Y+39	; 0x27
     bf6:	78 a5       	ldd	r23, Y+40	; 0x28
     bf8:	89 a5       	ldd	r24, Y+41	; 0x29
     bfa:	9a a5       	ldd	r25, Y+42	; 0x2a
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	53 e4       	ldi	r21, 0x43	; 67
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	8b a3       	std	Y+35, r24	; 0x23
     c0e:	9c a3       	std	Y+36, r25	; 0x24
     c10:	ad a3       	std	Y+37, r26	; 0x25
     c12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c14:	6b a1       	ldd	r22, Y+35	; 0x23
     c16:	7c a1       	ldd	r23, Y+36	; 0x24
     c18:	8d a1       	ldd	r24, Y+37	; 0x25
     c1a:	9e a1       	ldd	r25, Y+38	; 0x26
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e8       	ldi	r20, 0x80	; 128
     c22:	5f e3       	ldi	r21, 0x3F	; 63
     c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c28:	88 23       	and	r24, r24
     c2a:	2c f4       	brge	.+10     	; 0xc36 <APP2_checkForFirstTime+0x76>
		__ticks = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	9a a3       	std	Y+34, r25	; 0x22
     c32:	89 a3       	std	Y+33, r24	; 0x21
     c34:	3f c0       	rjmp	.+126    	; 0xcb4 <APP2_checkForFirstTime+0xf4>
	else if (__tmp > 65535)
     c36:	6b a1       	ldd	r22, Y+35	; 0x23
     c38:	7c a1       	ldd	r23, Y+36	; 0x24
     c3a:	8d a1       	ldd	r24, Y+37	; 0x25
     c3c:	9e a1       	ldd	r25, Y+38	; 0x26
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	3f ef       	ldi	r19, 0xFF	; 255
     c42:	4f e7       	ldi	r20, 0x7F	; 127
     c44:	57 e4       	ldi	r21, 0x47	; 71
     c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	4c f5       	brge	.+82     	; 0xca0 <APP2_checkForFirstTime+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4e:	6f a1       	ldd	r22, Y+39	; 0x27
     c50:	78 a5       	ldd	r23, Y+40	; 0x28
     c52:	89 a5       	ldd	r24, Y+41	; 0x29
     c54:	9a a5       	ldd	r25, Y+42	; 0x2a
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e2       	ldi	r20, 0x20	; 32
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	9a a3       	std	Y+34, r25	; 0x22
     c74:	89 a3       	std	Y+33, r24	; 0x21
     c76:	0f c0       	rjmp	.+30     	; 0xc96 <APP2_checkForFirstTime+0xd6>
     c78:	89 e1       	ldi	r24, 0x19	; 25
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	98 a3       	std	Y+32, r25	; 0x20
     c7e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c82:	98 a1       	ldd	r25, Y+32	; 0x20
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <APP2_checkForFirstTime+0xc4>
     c88:	98 a3       	std	Y+32, r25	; 0x20
     c8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8c:	89 a1       	ldd	r24, Y+33	; 0x21
     c8e:	9a a1       	ldd	r25, Y+34	; 0x22
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	9a a3       	std	Y+34, r25	; 0x22
     c94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c96:	89 a1       	ldd	r24, Y+33	; 0x21
     c98:	9a a1       	ldd	r25, Y+34	; 0x22
     c9a:	00 97       	sbiw	r24, 0x00	; 0
     c9c:	69 f7       	brne	.-38     	; 0xc78 <APP2_checkForFirstTime+0xb8>
     c9e:	14 c0       	rjmp	.+40     	; 0xcc8 <APP2_checkForFirstTime+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca0:	6b a1       	ldd	r22, Y+35	; 0x23
     ca2:	7c a1       	ldd	r23, Y+36	; 0x24
     ca4:	8d a1       	ldd	r24, Y+37	; 0x25
     ca6:	9e a1       	ldd	r25, Y+38	; 0x26
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	9a a3       	std	Y+34, r25	; 0x22
     cb2:	89 a3       	std	Y+33, r24	; 0x21
     cb4:	89 a1       	ldd	r24, Y+33	; 0x21
     cb6:	9a a1       	ldd	r25, Y+34	; 0x22
     cb8:	9e 8f       	std	Y+30, r25	; 0x1e
     cba:	8d 8f       	std	Y+29, r24	; 0x1d
     cbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <APP2_checkForFirstTime+0x100>
     cc4:	9e 8f       	std	Y+30, r25	; 0x1e
     cc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(EEPROM_FRAME_DELAY);

	/* if the user is entering the password for the first time, the flag
	 * would by 0. Else if the user entered the password before, the flag
	 * will be 1 */
	if(g_pass_check == PASSWORD_FIRST_TIME)
     cc8:	80 91 68 00 	lds	r24, 0x0068
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	21 f4       	brne	.+8      	; 0xcd8 <APP2_checkForFirstTime+0x118>
	{
		UART_sendByte(ASK_FOR_NEW_PASSWORD);
     cd0:	8b e7       	ldi	r24, 0x7B	; 123
     cd2:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
     cd6:	07 c1       	rjmp	.+526    	; 0xee6 <APP2_checkForFirstTime+0x326>
	{
		/*
		 * If the password is entered in the EEPROM before, enter EEPROM
		 * to get password, password size, and send a confirmation
		 */
		EEPROM_readByte(EEPROM_PASS_SIZE, &password_size);
     cd8:	20 e8       	ldi	r18, 0x80	; 128
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	84 ef       	ldi	r24, 0xF4	; 244
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	b9 01       	movw	r22, r18
     ce2:	0e 94 93 0c 	call	0x1926	; 0x1926 <EEPROM_readByte>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	aa ef       	ldi	r26, 0xFA	; 250
     cec:	b3 e4       	ldi	r27, 0x43	; 67
     cee:	89 8f       	std	Y+25, r24	; 0x19
     cf0:	9a 8f       	std	Y+26, r25	; 0x1a
     cf2:	ab 8f       	std	Y+27, r26	; 0x1b
     cf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf6:	69 8d       	ldd	r22, Y+25	; 0x19
     cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	4a e7       	ldi	r20, 0x7A	; 122
     d04:	53 e4       	ldi	r21, 0x43	; 67
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	8d 8b       	std	Y+21, r24	; 0x15
     d10:	9e 8b       	std	Y+22, r25	; 0x16
     d12:	af 8b       	std	Y+23, r26	; 0x17
     d14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d16:	6d 89       	ldd	r22, Y+21	; 0x15
     d18:	7e 89       	ldd	r23, Y+22	; 0x16
     d1a:	8f 89       	ldd	r24, Y+23	; 0x17
     d1c:	98 8d       	ldd	r25, Y+24	; 0x18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e8       	ldi	r20, 0x80	; 128
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2a:	88 23       	and	r24, r24
     d2c:	2c f4       	brge	.+10     	; 0xd38 <APP2_checkForFirstTime+0x178>
		__ticks = 1;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9c 8b       	std	Y+20, r25	; 0x14
     d34:	8b 8b       	std	Y+19, r24	; 0x13
     d36:	3f c0       	rjmp	.+126    	; 0xdb6 <APP2_checkForFirstTime+0x1f6>
	else if (__tmp > 65535)
     d38:	6d 89       	ldd	r22, Y+21	; 0x15
     d3a:	7e 89       	ldd	r23, Y+22	; 0x16
     d3c:	8f 89       	ldd	r24, Y+23	; 0x17
     d3e:	98 8d       	ldd	r25, Y+24	; 0x18
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	3f ef       	ldi	r19, 0xFF	; 255
     d44:	4f e7       	ldi	r20, 0x7F	; 127
     d46:	57 e4       	ldi	r21, 0x47	; 71
     d48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4c:	18 16       	cp	r1, r24
     d4e:	4c f5       	brge	.+82     	; 0xda2 <APP2_checkForFirstTime+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d50:	69 8d       	ldd	r22, Y+25	; 0x19
     d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e2       	ldi	r20, 0x20	; 32
     d5e:	51 e4       	ldi	r21, 0x41	; 65
     d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
     d78:	0f c0       	rjmp	.+30     	; 0xd98 <APP2_checkForFirstTime+0x1d8>
     d7a:	89 e1       	ldi	r24, 0x19	; 25
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9a 8b       	std	Y+18, r25	; 0x12
     d80:	89 8b       	std	Y+17, r24	; 0x11
     d82:	89 89       	ldd	r24, Y+17	; 0x11
     d84:	9a 89       	ldd	r25, Y+18	; 0x12
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <APP2_checkForFirstTime+0x1c6>
     d8a:	9a 8b       	std	Y+18, r25	; 0x12
     d8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8e:	8b 89       	ldd	r24, Y+19	; 0x13
     d90:	9c 89       	ldd	r25, Y+20	; 0x14
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	9c 8b       	std	Y+20, r25	; 0x14
     d96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d98:	8b 89       	ldd	r24, Y+19	; 0x13
     d9a:	9c 89       	ldd	r25, Y+20	; 0x14
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	69 f7       	brne	.-38     	; 0xd7a <APP2_checkForFirstTime+0x1ba>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <APP2_checkForFirstTime+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da2:	6d 89       	ldd	r22, Y+21	; 0x15
     da4:	7e 89       	ldd	r23, Y+22	; 0x16
     da6:	8f 89       	ldd	r24, Y+23	; 0x17
     da8:	98 8d       	ldd	r25, Y+24	; 0x18
     daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	9c 8b       	std	Y+20, r25	; 0x14
     db4:	8b 8b       	std	Y+19, r24	; 0x13
     db6:	8b 89       	ldd	r24, Y+19	; 0x13
     db8:	9c 89       	ldd	r25, Y+20	; 0x14
     dba:	98 8b       	std	Y+16, r25	; 0x10
     dbc:	8f 87       	std	Y+15, r24	; 0x0f
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	98 89       	ldd	r25, Y+16	; 0x10
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <APP2_checkForFirstTime+0x202>
     dc6:	98 8b       	std	Y+16, r25	; 0x10
     dc8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(EEPROM_FRAME_DELAY);
		do
		{
			EEPROM_readByte(EEPROM_PASS_ADDRESS+i,&password[i]);
     dca:	8b a5       	ldd	r24, Y+43	; 0x2b
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	88 51       	subi	r24, 0x18	; 24
     dd2:	9c 4f       	sbci	r25, 0xFC	; 252
     dd4:	ac 01       	movw	r20, r24
     dd6:	8b a5       	ldd	r24, Y+43	; 0x2b
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 01       	movw	r18, r24
     dde:	2d 57       	subi	r18, 0x7D	; 125
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	ca 01       	movw	r24, r20
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 93 0c 	call	0x1926	; 0x1926 <EEPROM_readByte>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	aa ef       	ldi	r26, 0xFA	; 250
     df0:	b3 e4       	ldi	r27, 0x43	; 67
     df2:	8b 87       	std	Y+11, r24	; 0x0b
     df4:	9c 87       	std	Y+12, r25	; 0x0c
     df6:	ad 87       	std	Y+13, r26	; 0x0d
     df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     e00:	9e 85       	ldd	r25, Y+14	; 0x0e
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	4a e7       	ldi	r20, 0x7A	; 122
     e08:	53 e4       	ldi	r21, 0x43	; 67
     e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8f 83       	std	Y+7, r24	; 0x07
     e14:	98 87       	std	Y+8, r25	; 0x08
     e16:	a9 87       	std	Y+9, r26	; 0x09
     e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2e:	88 23       	and	r24, r24
     e30:	2c f4       	brge	.+10     	; 0xe3c <APP2_checkForFirstTime+0x27c>
		__ticks = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	3f c0       	rjmp	.+126    	; 0xeba <APP2_checkForFirstTime+0x2fa>
	else if (__tmp > 65535)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	4c f5       	brge	.+82     	; 0xea6 <APP2_checkForFirstTime+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e54:	6b 85       	ldd	r22, Y+11	; 0x0b
     e56:	7c 85       	ldd	r23, Y+12	; 0x0c
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e2       	ldi	r20, 0x20	; 32
     e62:	51 e4       	ldi	r21, 0x41	; 65
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <APP2_checkForFirstTime+0x2dc>
     e7e:	89 e1       	ldi	r24, 0x19	; 25
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 83       	std	Y+4, r25	; 0x04
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <APP2_checkForFirstTime+0x2ca>
     e8e:	9c 83       	std	Y+4, r25	; 0x04
     e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	69 f7       	brne	.-38     	; 0xe7e <APP2_checkForFirstTime+0x2be>
     ea4:	14 c0       	rjmp	.+40     	; 0xece <APP2_checkForFirstTime+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <APP2_checkForFirstTime+0x306>
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(EEPROM_FRAME_DELAY);
			i++;
     ece:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	8b a7       	std	Y+43, r24	; 0x2b
		}while(i<password_size);
     ed4:	90 91 80 00 	lds	r25, 0x0080
     ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eda:	89 17       	cp	r24, r25
     edc:	08 f4       	brcc	.+2      	; 0xee0 <APP2_checkForFirstTime+0x320>
     ede:	75 cf       	rjmp	.-278    	; 0xdca <APP2_checkForFirstTime+0x20a>
		UART_sendByte(RE_ENTER_PASSWORD);
     ee0:	8a e3       	ldi	r24, 0x3A	; 58
     ee2:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
	}
}
     ee6:	ab 96       	adiw	r28, 0x2b	; 43
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <APP2_receivePassword>:
 * [DESCRIPTION]:	This Function is used to receive password sent from mC1
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receivePassword(void)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	ab 97       	sbiw	r28, 0x2b	; 43
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
     f0c:	1b a6       	std	Y+43, r1	; 0x2b
	/* Set the password check flag to (NOT FIRST TIME) to describe that the password
	 * is set before for further accessing */
	g_pass_check = PASSWORD_NOT_FIRST_TIME;
     f0e:	10 92 68 00 	sts	0x0068, r1
	EEPROM_writeByte(EEPROM_ADDRESS_FLAG, g_pass_check);
     f12:	20 91 68 00 	lds	r18, 0x0068
     f16:	88 ec       	ldi	r24, 0xC8	; 200
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	62 2f       	mov	r22, r18
     f1c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <EEPROM_writeByte>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	aa ef       	ldi	r26, 0xFA	; 250
     f26:	b3 e4       	ldi	r27, 0x43	; 67
     f28:	8f a3       	std	Y+39, r24	; 0x27
     f2a:	98 a7       	std	Y+40, r25	; 0x28
     f2c:	a9 a7       	std	Y+41, r26	; 0x29
     f2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	6f a1       	ldd	r22, Y+39	; 0x27
     f32:	78 a5       	ldd	r23, Y+40	; 0x28
     f34:	89 a5       	ldd	r24, Y+41	; 0x29
     f36:	9a a5       	ldd	r25, Y+42	; 0x2a
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8b a3       	std	Y+35, r24	; 0x23
     f4a:	9c a3       	std	Y+36, r25	; 0x24
     f4c:	ad a3       	std	Y+37, r26	; 0x25
     f4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f50:	6b a1       	ldd	r22, Y+35	; 0x23
     f52:	7c a1       	ldd	r23, Y+36	; 0x24
     f54:	8d a1       	ldd	r24, Y+37	; 0x25
     f56:	9e a1       	ldd	r25, Y+38	; 0x26
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <APP2_receivePassword+0x7a>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9a a3       	std	Y+34, r25	; 0x22
     f6e:	89 a3       	std	Y+33, r24	; 0x21
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <APP2_receivePassword+0xf8>
	else if (__tmp > 65535)
     f72:	6b a1       	ldd	r22, Y+35	; 0x23
     f74:	7c a1       	ldd	r23, Y+36	; 0x24
     f76:	8d a1       	ldd	r24, Y+37	; 0x25
     f78:	9e a1       	ldd	r25, Y+38	; 0x26
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <APP2_receivePassword+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	6f a1       	ldd	r22, Y+39	; 0x27
     f8c:	78 a5       	ldd	r23, Y+40	; 0x28
     f8e:	89 a5       	ldd	r24, Y+41	; 0x29
     f90:	9a a5       	ldd	r25, Y+42	; 0x2a
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9a a3       	std	Y+34, r25	; 0x22
     fb0:	89 a3       	std	Y+33, r24	; 0x21
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <APP2_receivePassword+0xda>
     fb4:	89 e1       	ldi	r24, 0x19	; 25
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	98 a3       	std	Y+32, r25	; 0x20
     fba:	8f 8f       	std	Y+31, r24	; 0x1f
     fbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fbe:	98 a1       	ldd	r25, Y+32	; 0x20
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <APP2_receivePassword+0xc8>
     fc4:	98 a3       	std	Y+32, r25	; 0x20
     fc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	89 a1       	ldd	r24, Y+33	; 0x21
     fca:	9a a1       	ldd	r25, Y+34	; 0x22
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9a a3       	std	Y+34, r25	; 0x22
     fd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	89 a1       	ldd	r24, Y+33	; 0x21
     fd4:	9a a1       	ldd	r25, Y+34	; 0x22
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <APP2_receivePassword+0xbc>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <APP2_receivePassword+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6b a1       	ldd	r22, Y+35	; 0x23
     fde:	7c a1       	ldd	r23, Y+36	; 0x24
     fe0:	8d a1       	ldd	r24, Y+37	; 0x25
     fe2:	9e a1       	ldd	r25, Y+38	; 0x26
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9a a3       	std	Y+34, r25	; 0x22
     fee:	89 a3       	std	Y+33, r24	; 0x21
     ff0:	89 a1       	ldd	r24, Y+33	; 0x21
     ff2:	9a a1       	ldd	r25, Y+34	; 0x22
     ff4:	9e 8f       	std	Y+30, r25	; 0x1e
     ff6:	8d 8f       	std	Y+29, r24	; 0x1d
     ff8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffa:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <APP2_receivePassword+0x104>
    1000:	9e 8f       	std	Y+30, r25	; 0x1e
    1002:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(EEPROM_FRAME_DELAY);

	UART_receiveString(password);
    1004:	83 e8       	ldi	r24, 0x83	; 131
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>
    100c:	86 c0       	rjmp	.+268    	; 0x111a <APP2_receivePassword+0x222>

	while(password[i] != '\0')
	{
		EEPROM_writeByte( EEPROM_START_BYTE+i , password[i]);
    100e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 51       	subi	r24, 0x18	; 24
    1016:	9c 4f       	sbci	r25, 0xFC	; 252
    1018:	ac 01       	movw	r20, r24
    101a:	8b a5       	ldd	r24, Y+43	; 0x2b
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	fc 01       	movw	r30, r24
    1022:	ed 57       	subi	r30, 0x7D	; 125
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	20 81       	ld	r18, Z
    1028:	ca 01       	movw	r24, r20
    102a:	62 2f       	mov	r22, r18
    102c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <EEPROM_writeByte>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	aa ef       	ldi	r26, 0xFA	; 250
    1036:	b3 e4       	ldi	r27, 0x43	; 67
    1038:	89 8f       	std	Y+25, r24	; 0x19
    103a:	9a 8f       	std	Y+26, r25	; 0x1a
    103c:	ab 8f       	std	Y+27, r26	; 0x1b
    103e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1040:	69 8d       	ldd	r22, Y+25	; 0x19
    1042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	53 e4       	ldi	r21, 0x43	; 67
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8d 8b       	std	Y+21, r24	; 0x15
    105a:	9e 8b       	std	Y+22, r25	; 0x16
    105c:	af 8b       	std	Y+23, r26	; 0x17
    105e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1060:	6d 89       	ldd	r22, Y+21	; 0x15
    1062:	7e 89       	ldd	r23, Y+22	; 0x16
    1064:	8f 89       	ldd	r24, Y+23	; 0x17
    1066:	98 8d       	ldd	r25, Y+24	; 0x18
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1074:	88 23       	and	r24, r24
    1076:	2c f4       	brge	.+10     	; 0x1082 <APP2_receivePassword+0x18a>
		__ticks = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	3f c0       	rjmp	.+126    	; 0x1100 <APP2_receivePassword+0x208>
	else if (__tmp > 65535)
    1082:	6d 89       	ldd	r22, Y+21	; 0x15
    1084:	7e 89       	ldd	r23, Y+22	; 0x16
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	98 8d       	ldd	r25, Y+24	; 0x18
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	4c f5       	brge	.+82     	; 0x10ec <APP2_receivePassword+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109a:	69 8d       	ldd	r22, Y+25	; 0x19
    109c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9c 8b       	std	Y+20, r25	; 0x14
    10c0:	8b 8b       	std	Y+19, r24	; 0x13
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <APP2_receivePassword+0x1ea>
    10c4:	89 e1       	ldi	r24, 0x19	; 25
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	9a 8b       	std	Y+18, r25	; 0x12
    10ca:	89 8b       	std	Y+17, r24	; 0x11
    10cc:	89 89       	ldd	r24, Y+17	; 0x11
    10ce:	9a 89       	ldd	r25, Y+18	; 0x12
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <APP2_receivePassword+0x1d8>
    10d4:	9a 8b       	std	Y+18, r25	; 0x12
    10d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	8b 89       	ldd	r24, Y+19	; 0x13
    10da:	9c 89       	ldd	r25, Y+20	; 0x14
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	69 f7       	brne	.-38     	; 0x10c4 <APP2_receivePassword+0x1cc>
    10ea:	14 c0       	rjmp	.+40     	; 0x1114 <APP2_receivePassword+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ec:	6d 89       	ldd	r22, Y+21	; 0x15
    10ee:	7e 89       	ldd	r23, Y+22	; 0x16
    10f0:	8f 89       	ldd	r24, Y+23	; 0x17
    10f2:	98 8d       	ldd	r25, Y+24	; 0x18
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	98 8b       	std	Y+16, r25	; 0x10
    1106:	8f 87       	std	Y+15, r24	; 0x0f
    1108:	8f 85       	ldd	r24, Y+15	; 0x0f
    110a:	98 89       	ldd	r25, Y+16	; 0x10
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <APP2_receivePassword+0x214>
    1110:	98 8b       	std	Y+16, r25	; 0x10
    1112:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(EEPROM_FRAME_DELAY);
		i++;
    1114:	8b a5       	ldd	r24, Y+43	; 0x2b
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	8b a7       	std	Y+43, r24	; 0x2b
	EEPROM_writeByte(EEPROM_ADDRESS_FLAG, g_pass_check);
	_delay_ms(EEPROM_FRAME_DELAY);

	UART_receiveString(password);

	while(password[i] != '\0')
    111a:	8b a5       	ldd	r24, Y+43	; 0x2b
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	ed 57       	subi	r30, 0x7D	; 125
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	09 f0       	breq	.+2      	; 0x112e <APP2_receivePassword+0x236>
    112c:	70 cf       	rjmp	.-288    	; 0x100e <APP2_receivePassword+0x116>
		EEPROM_writeByte( EEPROM_START_BYTE+i , password[i]);
		_delay_ms(EEPROM_FRAME_DELAY);
		i++;
	}
	/* Set the given password size in a global variable called password_size */
	password_size = i;
    112e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1130:	80 93 80 00 	sts	0x0080, r24

	/* Write the password size in EEPROM_PASS_SIZE location */
	EEPROM_writeByte(EEPROM_PASS_SIZE, i);
    1134:	84 ef       	ldi	r24, 0xF4	; 244
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	6b a5       	ldd	r22, Y+43	; 0x2b
    113a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <EEPROM_writeByte>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	aa ef       	ldi	r26, 0xFA	; 250
    1144:	b3 e4       	ldi	r27, 0x43	; 67
    1146:	8b 87       	std	Y+11, r24	; 0x0b
    1148:	9c 87       	std	Y+12, r25	; 0x0c
    114a:	ad 87       	std	Y+13, r26	; 0x0d
    114c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1150:	7c 85       	ldd	r23, Y+12	; 0x0c
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a e7       	ldi	r20, 0x7A	; 122
    115c:	53 e4       	ldi	r21, 0x43	; 67
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8f 83       	std	Y+7, r24	; 0x07
    1168:	98 87       	std	Y+8, r25	; 0x08
    116a:	a9 87       	std	Y+9, r26	; 0x09
    116c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1182:	88 23       	and	r24, r24
    1184:	2c f4       	brge	.+10     	; 0x1190 <APP2_receivePassword+0x298>
		__ticks = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	3f c0       	rjmp	.+126    	; 0x120e <APP2_receivePassword+0x316>
	else if (__tmp > 65535)
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	4f e7       	ldi	r20, 0x7F	; 127
    119e:	57 e4       	ldi	r21, 0x47	; 71
    11a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	4c f5       	brge	.+82     	; 0x11fa <APP2_receivePassword+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	51 e4       	ldi	r21, 0x41	; 65
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <APP2_receivePassword+0x2f8>
    11d2:	89 e1       	ldi	r24, 0x19	; 25
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <APP2_receivePassword+0x2e6>
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f7       	brne	.-38     	; 0x11d2 <APP2_receivePassword+0x2da>
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <APP2_receivePassword+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <APP2_receivePassword+0x322>
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(EEPROM_FRAME_DELAY);

	/* Send UART command to tell mC1 that the new password is received to initiate
	 * further processes */
	UART_sendByte(NEWEST_PASSWORD_RECEIVED);
    1222:	81 e2       	ldi	r24, 0x21	; 33
    1224:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
}
    1228:	ab 96       	adiw	r28, 0x2b	; 43
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <APP2_receiveCommand>:
 * [DESCRIPTION]:	This Function is used to receive commands sent from mC1
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
uint8 APP2_receiveCommand(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	return UART_receiveByte();
    1242:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
}
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <APP2_checkPassword>:
 * 					by comparing it to the saved password in EEPROM
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
uint8 APP2_checkPassword(void)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <APP2_checkPassword+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	uint8 flag = TRUE;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    125a:	19 82       	std	Y+1, r1	; 0x01
	if(re_password_size != password_size)
    125c:	90 91 81 00 	lds	r25, 0x0081
    1260:	80 91 80 00 	lds	r24, 0x0080
    1264:	98 17       	cp	r25, r24
    1266:	b9 f0       	breq	.+46     	; 0x1296 <APP2_checkPassword+0x4a>
	{
		flag = FALSE;
    1268:	1a 82       	std	Y+2, r1	; 0x02
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <APP2_checkPassword+0x5c>
	}
	else
	{
		while(password[i] != '\0')
		{
			if(re_password[i] != password[i])
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	fc 01       	movw	r30, r24
    1274:	e6 57       	subi	r30, 0x76	; 118
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	20 81       	ld	r18, Z
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	fc 01       	movw	r30, r24
    1282:	ed 57       	subi	r30, 0x7D	; 125
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	28 17       	cp	r18, r24
    128a:	11 f0       	breq	.+4      	; 0x1290 <APP2_checkPassword+0x44>
			{
				flag = FALSE;
    128c:	1a 82       	std	Y+2, r1	; 0x02
    128e:	0c c0       	rjmp	.+24     	; 0x12a8 <APP2_checkPassword+0x5c>
				break;
			}
			i++;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	8f 5f       	subi	r24, 0xFF	; 255
    1294:	89 83       	std	Y+1, r24	; 0x01
	{
		flag = FALSE;
	}
	else
	{
		while(password[i] != '\0')
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	fc 01       	movw	r30, r24
    129e:	ed 57       	subi	r30, 0x7D	; 125
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	88 23       	and	r24, r24
    12a6:	11 f7       	brne	.-60     	; 0x126c <APP2_checkPassword+0x20>
				break;
			}
			i++;
		}
	}
	return flag;
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <APP2_receiveAndCheckPassword>:
 * 					password for the first time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword(void)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <APP2_receiveAndCheckPassword+0x6>
    12ba:	0f 92       	push	r0
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	uint8 counter = 0;
    12c0:	19 82       	std	Y+1, r1	; 0x01

	UART_receiveString(re_password);
    12c2:	8a e8       	ldi	r24, 0x8A	; 138
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <APP2_receiveAndCheckPassword+0x1e>

	/* A loop to get the size of the re-entered password to use it in
	 * checking for re-password validity */
	while(re_password[counter] != '\0')
	{
		counter++;
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	8f 5f       	subi	r24, 0xFF	; 255
    12d0:	89 83       	std	Y+1, r24	; 0x01

	UART_receiveString(re_password);

	/* A loop to get the size of the re-entered password to use it in
	 * checking for re-password validity */
	while(re_password[counter] != '\0')
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	fc 01       	movw	r30, r24
    12da:	e6 57       	subi	r30, 0x76	; 118
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	80 81       	ld	r24, Z
    12e0:	88 23       	and	r24, r24
    12e2:	a1 f7       	brne	.-24     	; 0x12cc <APP2_receiveAndCheckPassword+0x18>
	{
		counter++;
	}
	re_password_size = counter;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 93 81 00 	sts	0x0081, r24

	switch(APP2_checkPassword())
    12ea:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3b 83       	std	Y+3, r19	; 0x03
    12f4:	2a 83       	std	Y+2, r18	; 0x02
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	81 f0       	breq	.+32     	; 0x131e <APP2_receiveAndCheckPassword+0x6a>
    12fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1300:	3b 81       	ldd	r19, Y+3	; 0x03
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	a9 f4       	brne	.+42     	; 0x1332 <APP2_receiveAndCheckPassword+0x7e>
	{
	case TRUE :
		/* Hand shaking method is used to send a command to mC1 that the password
		 * is correct to display on LCD screen then wait mC1 to send that it finished
		 * displaying the message. Also same goes for wrong password */
		UART_sendByte(SEND_CORRECT);
    1308:	8e e3       	ldi	r24, 0x3E	; 62
    130a:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    130e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1312:	8e 33       	cpi	r24, 0x3E	; 62
    1314:	e1 f7       	brne	.-8      	; 0x130e <APP2_receiveAndCheckPassword+0x5a>
		UART_sendByte(OPEN_MAIN_MENU);
    1316:	83 e2       	ldi	r24, 0x23	; 35
    1318:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <APP2_receiveAndCheckPassword+0x7e>
		break;
	case FALSE :
		UART_sendByte(SEND_WRONG);
    131e:	8c e3       	ldi	r24, 0x3C	; 60
    1320:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_WRONG){}
    1324:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1328:	8c 33       	cpi	r24, 0x3C	; 60
    132a:	e1 f7       	brne	.-8      	; 0x1324 <APP2_receiveAndCheckPassword+0x70>
		UART_sendByte(ENTER_PASSWORD_AGAIN);
    132c:	84 e2       	ldi	r24, 0x24	; 36
    132e:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		break;
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <APP2_receiveAndCheckPassword2>:
 * 					password for the second time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword2(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <APP2_receiveAndCheckPassword2+0x6>
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	uint8 counter = 0;
    134a:	19 82       	std	Y+1, r1	; 0x01
	UART_receiveString(re_password);
    134c:	8a e8       	ldi	r24, 0x8A	; 138
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>
    1354:	03 c0       	rjmp	.+6      	; 0x135c <APP2_receiveAndCheckPassword2+0x1e>

	while(re_password[counter] != '\0')
	{
		counter++;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	89 83       	std	Y+1, r24	; 0x01
void APP2_receiveAndCheckPassword2(void)
{
	uint8 counter = 0;
	UART_receiveString(re_password);

	while(re_password[counter] != '\0')
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fc 01       	movw	r30, r24
    1364:	e6 57       	subi	r30, 0x76	; 118
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	88 23       	and	r24, r24
    136c:	a1 f7       	brne	.-24     	; 0x1356 <APP2_receiveAndCheckPassword2+0x18>
	{
		counter++;
	}
	re_password_size = counter;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	80 93 81 00 	sts	0x0081, r24

	switch(APP2_checkPassword())
    1374:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3b 83       	std	Y+3, r19	; 0x03
    137e:	2a 83       	std	Y+2, r18	; 0x02
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	81 f0       	breq	.+32     	; 0x13a8 <APP2_receiveAndCheckPassword2+0x6a>
    1388:	2a 81       	ldd	r18, Y+2	; 0x02
    138a:	3b 81       	ldd	r19, Y+3	; 0x03
    138c:	21 30       	cpi	r18, 0x01	; 1
    138e:	31 05       	cpc	r19, r1
    1390:	a9 f4       	brne	.+42     	; 0x13bc <APP2_receiveAndCheckPassword2+0x7e>
	{
	case TRUE :
		UART_sendByte(SEND_CORRECT);
    1392:	8e e3       	ldi	r24, 0x3E	; 62
    1394:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    1398:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    139c:	8e 33       	cpi	r24, 0x3E	; 62
    139e:	e1 f7       	brne	.-8      	; 0x1398 <APP2_receiveAndCheckPassword2+0x5a>
		UART_sendByte(OPEN_MAIN_MENU);
    13a0:	83 e2       	ldi	r24, 0x23	; 35
    13a2:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
    13a6:	0a c0       	rjmp	.+20     	; 0x13bc <APP2_receiveAndCheckPassword2+0x7e>
		break;
	case FALSE :
		UART_sendByte(SEND_WRONG);
    13a8:	8c e3       	ldi	r24, 0x3C	; 60
    13aa:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_WRONG){}
    13ae:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    13b2:	8c 33       	cpi	r24, 0x3C	; 60
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <APP2_receiveAndCheckPassword2+0x70>
		UART_sendByte(ENTER_PASSWORD2_AGAIN);
    13b6:	8e e5       	ldi	r24, 0x5E	; 94
    13b8:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		break;
	}
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <APP2_receiveAndCheckPassword3>:
 * 					password for the third time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword3(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <APP2_receiveAndCheckPassword3+0x6>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	uint8 counter = 0;
    13d4:	19 82       	std	Y+1, r1	; 0x01
	UART_receiveString(re_password);
    13d6:	8a e8       	ldi	r24, 0x8A	; 138
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <APP2_receiveAndCheckPassword3+0x1e>

	while(re_password[counter] != '\0')
	{
		counter++;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	89 83       	std	Y+1, r24	; 0x01
void APP2_receiveAndCheckPassword3(void)
{
	uint8 counter = 0;
	UART_receiveString(re_password);

	while(re_password[counter] != '\0')
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	e6 57       	subi	r30, 0x76	; 118
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	a1 f7       	brne	.-24     	; 0x13e0 <APP2_receiveAndCheckPassword3+0x18>
	{
		counter++;
	}
	re_password_size = counter;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	80 93 81 00 	sts	0x0081, r24

	switch(APP2_checkPassword())
    13fe:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3b 83       	std	Y+3, r19	; 0x03
    1408:	2a 83       	std	Y+2, r18	; 0x02
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	00 97       	sbiw	r24, 0x00	; 0
    1410:	81 f0       	breq	.+32     	; 0x1432 <APP2_receiveAndCheckPassword3+0x6a>
    1412:	2a 81       	ldd	r18, Y+2	; 0x02
    1414:	3b 81       	ldd	r19, Y+3	; 0x03
    1416:	21 30       	cpi	r18, 0x01	; 1
    1418:	31 05       	cpc	r19, r1
    141a:	69 f4       	brne	.+26     	; 0x1436 <APP2_receiveAndCheckPassword3+0x6e>
	{
	case TRUE :
		UART_sendByte(SEND_CORRECT);
    141c:	8e e3       	ldi	r24, 0x3E	; 62
    141e:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    1422:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1426:	8e 33       	cpi	r24, 0x3E	; 62
    1428:	e1 f7       	brne	.-8      	; 0x1422 <APP2_receiveAndCheckPassword3+0x5a>
		UART_sendByte(OPEN_MAIN_MENU);
    142a:	83 e2       	ldi	r24, 0x23	; 35
    142c:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <APP2_receiveAndCheckPassword3+0x6e>
		break;
	case FALSE :
		APP2_setAlarmON();
    1432:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <APP2_setAlarmON>
		break;
	}
}
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <APP2_receiveAndCheckPassword_mainMenu>:
 * 					password in the main menu in the Door open option for the first time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword_mainMenu(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <APP2_receiveAndCheckPassword_mainMenu+0x6>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(re_password);
    144c:	8a e8       	ldi	r24, 0x8A	; 138
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>

	switch(APP2_checkPassword())
    1454:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3a 83       	std	Y+2, r19	; 0x02
    145e:	29 83       	std	Y+1, r18	; 0x01
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	99 f0       	breq	.+38     	; 0x148e <APP2_receiveAndCheckPassword_mainMenu+0x4c>
    1468:	29 81       	ldd	r18, Y+1	; 0x01
    146a:	3a 81       	ldd	r19, Y+2	; 0x02
    146c:	21 30       	cpi	r18, 0x01	; 1
    146e:	31 05       	cpc	r19, r1
    1470:	c1 f4       	brne	.+48     	; 0x14a2 <APP2_receiveAndCheckPassword_mainMenu+0x60>
	{
	case TRUE :
		UART_sendByte(SEND_CORRECT);
    1472:	8e e3       	ldi	r24, 0x3E	; 62
    1474:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    1478:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    147c:	8e 33       	cpi	r24, 0x3E	; 62
    147e:	e1 f7       	brne	.-8      	; 0x1478 <APP2_receiveAndCheckPassword_mainMenu+0x36>
		APP2_openDoor();
    1480:	0e 94 b8 0a 	call	0x1570	; 0x1570 <APP2_openDoor>
		APP2_doorStop();
    1484:	0e 94 cc 0a 	call	0x1598	; 0x1598 <APP2_doorStop>
		APP2_closeDoor();
    1488:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <APP2_closeDoor>
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <APP2_receiveAndCheckPassword_mainMenu+0x60>
		break;
	case FALSE :
		UART_sendByte(SEND_WRONG);
    148e:	8c e3       	ldi	r24, 0x3C	; 60
    1490:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_WRONG){}
    1494:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1498:	8c 33       	cpi	r24, 0x3C	; 60
    149a:	e1 f7       	brne	.-8      	; 0x1494 <APP2_receiveAndCheckPassword_mainMenu+0x52>
		UART_sendByte(ENTER_PASSWORD_AGAIN_MAIN_MENU);
    149c:	88 e2       	ldi	r24, 0x28	; 40
    149e:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		break;
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <APP2_receiveAndCheckPassword2_mainMenu>:
 * 					password in the main menu in the Door open option for the second time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword2_mainMenu(void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <APP2_receiveAndCheckPassword2_mainMenu+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(re_password);
    14b6:	8a e8       	ldi	r24, 0x8A	; 138
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>

	switch(APP2_checkPassword())
    14be:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	3a 83       	std	Y+2, r19	; 0x02
    14c8:	29 83       	std	Y+1, r18	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	99 f0       	breq	.+38     	; 0x14f8 <APP2_receiveAndCheckPassword2_mainMenu+0x4c>
    14d2:	29 81       	ldd	r18, Y+1	; 0x01
    14d4:	3a 81       	ldd	r19, Y+2	; 0x02
    14d6:	21 30       	cpi	r18, 0x01	; 1
    14d8:	31 05       	cpc	r19, r1
    14da:	c1 f4       	brne	.+48     	; 0x150c <APP2_receiveAndCheckPassword2_mainMenu+0x60>
	{
	case TRUE :
		UART_sendByte(SEND_CORRECT);
    14dc:	8e e3       	ldi	r24, 0x3E	; 62
    14de:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    14e2:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    14e6:	8e 33       	cpi	r24, 0x3E	; 62
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <APP2_receiveAndCheckPassword2_mainMenu+0x36>
		APP2_openDoor();
    14ea:	0e 94 b8 0a 	call	0x1570	; 0x1570 <APP2_openDoor>
		APP2_doorStop();
    14ee:	0e 94 cc 0a 	call	0x1598	; 0x1598 <APP2_doorStop>
		APP2_closeDoor();
    14f2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <APP2_closeDoor>
    14f6:	0a c0       	rjmp	.+20     	; 0x150c <APP2_receiveAndCheckPassword2_mainMenu+0x60>
		break;
	case FALSE :
		UART_sendByte(SEND_WRONG);
    14f8:	8c e3       	ldi	r24, 0x3C	; 60
    14fa:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_WRONG){}
    14fe:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1502:	8c 33       	cpi	r24, 0x3C	; 60
    1504:	e1 f7       	brne	.-8      	; 0x14fe <APP2_receiveAndCheckPassword2_mainMenu+0x52>
		UART_sendByte(ENTER_PASSWORD2_AGAIN_MAIN_MENU);
    1506:	8f e2       	ldi	r24, 0x2F	; 47
    1508:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		break;
	}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <APP2_receiveAndCheckPassword3_mainMenu>:
 * 					password in the main menu in the Door open option for the third time
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_receiveAndCheckPassword3_mainMenu(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <APP2_receiveAndCheckPassword3_mainMenu+0x6>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(re_password);
    1520:	8a e8       	ldi	r24, 0x8A	; 138
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <UART_receiveString>

	switch(APP2_checkPassword())
    1528:	0e 94 26 09 	call	0x124c	; 0x124c <APP2_checkPassword>
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3a 83       	std	Y+2, r19	; 0x02
    1532:	29 83       	std	Y+1, r18	; 0x01
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	99 f0       	breq	.+38     	; 0x1562 <APP2_receiveAndCheckPassword3_mainMenu+0x4c>
    153c:	29 81       	ldd	r18, Y+1	; 0x01
    153e:	3a 81       	ldd	r19, Y+2	; 0x02
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	31 05       	cpc	r19, r1
    1544:	81 f4       	brne	.+32     	; 0x1566 <APP2_receiveAndCheckPassword3_mainMenu+0x50>
	{
	case TRUE :
		UART_sendByte(SEND_CORRECT);
    1546:	8e e3       	ldi	r24, 0x3E	; 62
    1548:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		while(UART_receiveByte() != SEND_CORRECT){}
    154c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    1550:	8e 33       	cpi	r24, 0x3E	; 62
    1552:	e1 f7       	brne	.-8      	; 0x154c <APP2_receiveAndCheckPassword3_mainMenu+0x36>
		APP2_openDoor();
    1554:	0e 94 b8 0a 	call	0x1570	; 0x1570 <APP2_openDoor>
		APP2_doorStop();
    1558:	0e 94 cc 0a 	call	0x1598	; 0x1598 <APP2_doorStop>
		APP2_closeDoor();
    155c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <APP2_closeDoor>
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <APP2_receiveAndCheckPassword3_mainMenu+0x50>
		break;
	case FALSE :
		APP2_setAlarmON();
    1562:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <APP2_setAlarmON>
		break;
	}
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <APP2_openDoor>:
 * 					direction
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_openDoor(void)
{
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(OPEN_DOOR);
    1578:	8b e5       	ldi	r24, 0x5B	; 91
    157a:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>

	/* Open Door process */
	DcMotor_Rotate(CW,75);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	6b e4       	ldi	r22, 0x4B	; 75
    1582:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
	TIMER1_delay_ms(15000);
    1586:	88 e9       	ldi	r24, 0x98	; 152
    1588:	9a e3       	ldi	r25, 0x3A	; 58
    158a:	0e 94 31 0b 	call	0x1662	; 0x1662 <TIMER1_delay_ms>
	DcMotor_deInit();
    158e:	0e 94 12 0c 	call	0x1824	; 0x1824 <DcMotor_deInit>
}
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <APP2_doorStop>:
 * [DESCRIPTION]:	This Function is used to stop motor operation
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_doorStop(void)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(DOOR_IS_OPENED);
    15a0:	8e e2       	ldi	r24, 0x2E	; 46
    15a2:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>

	/* Stop Door process */
	DcMotor_Rotate(STOP,0);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
	TIMER1_delay_ms(3000);
    15ae:	88 eb       	ldi	r24, 0xB8	; 184
    15b0:	9b e0       	ldi	r25, 0x0B	; 11
    15b2:	0e 94 31 0b 	call	0x1662	; 0x1662 <TIMER1_delay_ms>
	DcMotor_deInit();
    15b6:	0e 94 12 0c 	call	0x1824	; 0x1824 <DcMotor_deInit>
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <APP2_closeDoor>:
 * 					direction
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_closeDoor(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(CLOSE_DOOR);
    15c8:	8b e3       	ldi	r24, 0x3B	; 59
    15ca:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>

	/* Close Door process */
	DcMotor_Rotate(CCW,75);
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	6b e4       	ldi	r22, 0x4B	; 75
    15d2:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
	TIMER1_delay_ms(15000);
    15d6:	88 e9       	ldi	r24, 0x98	; 152
    15d8:	9a e3       	ldi	r25, 0x3A	; 58
    15da:	0e 94 31 0b 	call	0x1662	; 0x1662 <TIMER1_delay_ms>
	DcMotor_deInit();
    15de:	0e 94 12 0c 	call	0x1824	; 0x1824 <DcMotor_deInit>

	UART_sendByte(OPEN_MAIN_MENU);
    15e2:	83 e2       	ldi	r24, 0x23	; 35
    15e4:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <APP2_setAlarmON>:
 * [DESCRIPTION]:	This Function is used set the ALARM on
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP2_setAlarmON(void)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ALARM_ON);
    15f6:	8d e5       	ldi	r24, 0x5D	; 93
    15f8:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>

	/* ALARM ON process */
	BUZZER_ON();
    15fc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <BUZZER_ON>
	TIMER1_delay_ms(60000);
    1600:	80 e6       	ldi	r24, 0x60	; 96
    1602:	9a ee       	ldi	r25, 0xEA	; 234
    1604:	0e 94 31 0b 	call	0x1662	; 0x1662 <TIMER1_delay_ms>
	BUZZER_OFF();
    1608:	0e 94 98 0b 	call	0x1730	; 0x1730 <BUZZER_OFF>

	UART_sendByte(NEWEST_PASSWORD_RECEIVED);
    160c:	81 e2       	ldi	r24, 0x21	; 33
    160e:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <TIMER1_countProcessing>:
 * 					milliseconds
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_countProcessing(uint16 g_msec1)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <TIMER1_countProcessing+0x6>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
	g_tick1++;
    1626:	80 91 98 00 	lds	r24, 0x0098
    162a:	90 91 99 00 	lds	r25, 0x0099
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	90 93 99 00 	sts	0x0099, r25
    1634:	80 93 98 00 	sts	0x0098, r24
	if(g_tick1 == g_msec1)
    1638:	20 91 98 00 	lds	r18, 0x0098
    163c:	30 91 99 00 	lds	r19, 0x0099
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	39 f4       	brne	.+14     	; 0x1658 <TIMER1_countProcessing+0x40>
	{
		TIMER1_flagComplete = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	80 93 82 00 	sts	0x0082, r24
		g_tick1 = 0;
    1650:	10 92 99 00 	sts	0x0099, r1
    1654:	10 92 98 00 	sts	0x0098, r1
	}
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <TIMER1_delay_ms>:
 * 					milliseconds
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_delay_ms(uint16 seconds)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	63 97       	sbiw	r28, 0x13	; 19
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	9e 87       	std	Y+14, r25	; 0x0e
    1678:	8d 87       	std	Y+13, r24	; 0x0d
	 * Timer is initialized here because we need to init then de-init it
	 * after each function.
	 * As we're using a prescalar of 64, then every count takes 8 u.sec,
	 * so we need 125 counts to get 1 m.sec
	 */
	TIMER_ConfigType TIMER1_config = {TIMER1,0,0,CTC_T1,CHANNEL_A,FCPU_64_T1,0,0,0,125};
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	98 8b       	std	Y+16, r25	; 0x10
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	ee e6       	ldi	r30, 0x6E	; 110
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	fa 8b       	std	Y+18, r31	; 0x12
    1688:	e9 8b       	std	Y+17, r30	; 0x11
    168a:	fc e0       	ldi	r31, 0x0C	; 12
    168c:	fb 8b       	std	Y+19, r31	; 0x13
    168e:	e9 89       	ldd	r30, Y+17	; 0x11
    1690:	fa 89       	ldd	r31, Y+18	; 0x12
    1692:	00 80       	ld	r0, Z
    1694:	89 89       	ldd	r24, Y+17	; 0x11
    1696:	9a 89       	ldd	r25, Y+18	; 0x12
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	9a 8b       	std	Y+18, r25	; 0x12
    169c:	89 8b       	std	Y+17, r24	; 0x11
    169e:	ef 85       	ldd	r30, Y+15	; 0x0f
    16a0:	f8 89       	ldd	r31, Y+16	; 0x10
    16a2:	00 82       	st	Z, r0
    16a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a6:	98 89       	ldd	r25, Y+16	; 0x10
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	98 8b       	std	Y+16, r25	; 0x10
    16ac:	8f 87       	std	Y+15, r24	; 0x0f
    16ae:	9b 89       	ldd	r25, Y+19	; 0x13
    16b0:	91 50       	subi	r25, 0x01	; 1
    16b2:	9b 8b       	std	Y+19, r25	; 0x13
    16b4:	eb 89       	ldd	r30, Y+19	; 0x13
    16b6:	ee 23       	and	r30, r30
    16b8:	51 f7       	brne	.-44     	; 0x168e <TIMER1_delay_ms+0x2c>
	TIMER_init(&TIMER1_config);
    16ba:	ce 01       	movw	r24, r28
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	0e 94 90 15 	call	0x2b20	; 0x2b20 <TIMER_init>
	TIMER1_setCallBack(TIMER1_countProcessing);
    16c2:	8c e0       	ldi	r24, 0x0C	; 12
    16c4:	9b e0       	ldi	r25, 0x0B	; 11
    16c6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <TIMER1_setCallBack>

	g_tick1 = 0;
    16ca:	10 92 99 00 	sts	0x0099, r1
    16ce:	10 92 98 00 	sts	0x0098, r1
	g_msec1 = seconds;
    16d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d6:	90 93 9e 00 	sts	0x009E, r25
    16da:	80 93 9d 00 	sts	0x009D, r24

	while(TIMER1_flagComplete != 1){}
    16de:	80 91 82 00 	lds	r24, 0x0082
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	e1 f7       	brne	.-8      	; 0x16de <TIMER1_delay_ms+0x7c>
	TIMER1_flagComplete = 0;
    16e6:	10 92 82 00 	sts	0x0082, r1

	TIMER1_deInit();
    16ea:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TIMER1_deInit>
}
    16ee:	63 96       	adiw	r28, 0x13	; 19
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <BUZZER_init>:
 * [DESCRIPTION]:	This Function is used to initialize the buzzer
 * [ARGS]:			No Arguments
 * [RETURNS]:		No Returns
 ----------------------------------------------------------------------------------------*/
void BUZZER_init(void)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	GPIO_setPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	62 e0       	ldi	r22, 0x02	; 2
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <BUZZER_ON>:
 * [DESCRIPTION]:	This Function is used to set the buzzer on
 * [ARGS]:			No Arguments
 * [RETURNS]:		No Returns
 ----------------------------------------------------------------------------------------*/
void BUZZER_ON(void)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <BUZZER_OFF>:
 * [DESCRIPTION]:	This Function is used to set the buzzer off
 * [ARGS]:			No Arguments
 * [RETURNS]:		No Returns
 ----------------------------------------------------------------------------------------*/
void BUZZER_OFF(void)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	62 e0       	ldi	r22, 0x02	; 2
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <DcMotor_Init>:
 * [DESCRIPTION]:	This Function is used to initialize the DC motor
 * [ARGS]:		No Arguments
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void DcMotor_Init(void)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setPinDirection(IN1_PORT_ID, IN1_PIN_ID, PIN_OUTPUT);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>
	GPIO_setPinDirection(IN2_PORT_ID, IN2_PIN_ID, PIN_OUTPUT);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>

	GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DcMotor_Rotate>:
 * [in]		DcMotor_State state :	This Arg shall indicate the state of the motor (STOP,CW,CCW)
 * 			uint8 speed : 			This Arg shall indicate the motor speed in percentage (%)
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed)	//uint8 speed
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DcMotor_Rotate+0x6>
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle = 0;
    178e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Equation to convert speed percentage (0->100)
	 * into duty cycle range (0->255)
	 */
	duty_cycle = (uint8) ( ((uint16)speed * 255) / 100 );
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	48 2f       	mov	r20, r24
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	ca 01       	movw	r24, r20
    1798:	9c 01       	movw	r18, r24
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	c9 01       	movw	r24, r18
    17a0:	96 95       	lsr	r25
    17a2:	98 2f       	mov	r25, r24
    17a4:	88 27       	eor	r24, r24
    17a6:	97 95       	ror	r25
    17a8:	87 95       	ror	r24
    17aa:	82 1b       	sub	r24, r18
    17ac:	93 0b       	sbc	r25, r19
    17ae:	84 0f       	add	r24, r20
    17b0:	95 1f       	adc	r25, r21
    17b2:	24 e6       	ldi	r18, 0x64	; 100
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	b9 01       	movw	r22, r18
    17b8:	0e 94 3f 1b 	call	0x367e	; 0x367e <__udivmodhi4>
    17bc:	cb 01       	movw	r24, r22
    17be:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(duty_cycle);
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <PWM_Timer0_Start>

	if(state == STOP)
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	88 23       	and	r24, r24
    17ca:	59 f4       	brne	.+22     	; 0x17e2 <DcMotor_Rotate+0x64>
	{
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    17e0:	1b c0       	rjmp	.+54     	; 0x1818 <DcMotor_Rotate+0x9a>
	}
	else if(state == CW)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	59 f4       	brne	.+22     	; 0x17fe <DcMotor_Rotate+0x80>
	{
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_HIGH);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	41 e0       	ldi	r20, 0x01	; 1
    17ee:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    17fc:	0d c0       	rjmp	.+26     	; 0x1818 <DcMotor_Rotate+0x9a>
	}
	else if(state == CCW)
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	51 f4       	brne	.+20     	; 0x1818 <DcMotor_Rotate+0x9a>
	{
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_HIGH);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <DcMotor_deInit>:
 * 					the PWM driver
 * [ARGS]:		No Arguments
 *[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void DcMotor_deInit(void)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	PWM_Timer0_Stop();
    182c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <PWM_Timer0_Stop>
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <EEPROM_init>:
 * 					TWI "I2C" module.
 * [ARGS]:	No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void EEPROM_init(void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	2b 97       	sbiw	r28, 0x0b	; 11
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	TWI_ConfigType TWI_configuration = {FAST,NO_PRESCALAR,0X01};
    184a:	ce 01       	movw	r24, r28
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	98 87       	std	Y+8, r25	; 0x08
    1850:	8f 83       	std	Y+7, r24	; 0x07
    1852:	ea e7       	ldi	r30, 0x7A	; 122
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	fa 87       	std	Y+10, r31	; 0x0a
    1858:	e9 87       	std	Y+9, r30	; 0x09
    185a:	f6 e0       	ldi	r31, 0x06	; 6
    185c:	fb 87       	std	Y+11, r31	; 0x0b
    185e:	e9 85       	ldd	r30, Y+9	; 0x09
    1860:	fa 85       	ldd	r31, Y+10	; 0x0a
    1862:	00 80       	ld	r0, Z
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	9a 87       	std	Y+10, r25	; 0x0a
    186c:	89 87       	std	Y+9, r24	; 0x09
    186e:	ef 81       	ldd	r30, Y+7	; 0x07
    1870:	f8 85       	ldd	r31, Y+8	; 0x08
    1872:	00 82       	st	Z, r0
    1874:	8f 81       	ldd	r24, Y+7	; 0x07
    1876:	98 85       	ldd	r25, Y+8	; 0x08
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	98 87       	std	Y+8, r25	; 0x08
    187c:	8f 83       	std	Y+7, r24	; 0x07
    187e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1880:	91 50       	subi	r25, 0x01	; 1
    1882:	9b 87       	std	Y+11, r25	; 0x0b
    1884:	eb 85       	ldd	r30, Y+11	; 0x0b
    1886:	ee 23       	and	r30, r30
    1888:	51 f7       	brne	.-44     	; 0x185e <EEPROM_init+0x28>
	TWI_init(&TWI_configuration);
    188a:	ce 01       	movw	r24, r28
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	0e 94 39 19 	call	0x3272	; 0x3272 <TWI_init>
}
    1892:	2b 96       	adiw	r28, 0x0b	; 11
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <EEPROM_writeByte>:
 * 				uint8 u8data:	This Argument shall indicate the data we want to write in
 * 								EEPROM.
 *	[RETURNS]:	This Return shall indicate the TWI status for every command used
 ----------------------------------------------------------------------------------------*/
uint8 EEPROM_writeByte(uint16 u16address,uint8 u8data)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <EEPROM_writeByte+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <EEPROM_writeByte+0x8>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6b 83       	std	Y+3, r22	; 0x03
	 * EEPROM write frame:-
	 * [ S - DeviceAddress - W - ACK - LocationAddress - ACK - Data - ACK - P ]
	 */

	/* Send a start bit then check for the TWI status */
	TWI_start();
    18b6:	0e 94 a0 19 	call	0x3340	; 0x3340 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    18ba:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    18be:	88 30       	cpi	r24, 0x08	; 8
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <EEPROM_writeByte+0x22>
		return ERROR;
    18c2:	1c 82       	std	Y+4, r1	; 0x04
    18c4:	28 c0       	rjmp	.+80     	; 0x1916 <EEPROM_writeByte+0x72>

	/* Send the device address bits + Write bit, then check for the TWI status. it will return
	 * ACK bit */
	TWI_writeByte((uint8)((u16address & 0x0700) >> 7) | 0xA0);
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	80 70       	andi	r24, 0x00	; 0
    18cc:	97 70       	andi	r25, 0x07	; 7
    18ce:	88 0f       	add	r24, r24
    18d0:	89 2f       	mov	r24, r25
    18d2:	88 1f       	adc	r24, r24
    18d4:	99 0b       	sbc	r25, r25
    18d6:	91 95       	neg	r25
    18d8:	80 6a       	ori	r24, 0xA0	; 160
    18da:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18de:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    18e2:	88 31       	cpi	r24, 0x18	; 24
    18e4:	11 f0       	breq	.+4      	; 0x18ea <EEPROM_writeByte+0x46>
		return ERROR;
    18e6:	1c 82       	std	Y+4, r1	; 0x04
    18e8:	16 c0       	rjmp	.+44     	; 0x1916 <EEPROM_writeByte+0x72>

	/* Send the location address bits, then check for the TWI status. it will return ACK bit */
	TWI_writeByte((uint8)(u16address));
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    18f0:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    18f4:	88 32       	cpi	r24, 0x28	; 40
    18f6:	11 f0       	breq	.+4      	; 0x18fc <EEPROM_writeByte+0x58>
		return ERROR;
    18f8:	1c 82       	std	Y+4, r1	; 0x04
    18fa:	0d c0       	rjmp	.+26     	; 0x1916 <EEPROM_writeByte+0x72>

	/* Send the data bits, then check for the TWI status. it will return ACK bit */
	TWI_writeByte(u8data);
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1902:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    1906:	88 32       	cpi	r24, 0x28	; 40
    1908:	11 f0       	breq	.+4      	; 0x190e <EEPROM_writeByte+0x6a>
		return ERROR;
    190a:	1c 82       	std	Y+4, r1	; 0x04
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <EEPROM_writeByte+0x72>

	/* Send the stop bit to finish the process */
	TWI_stop();
    190e:	0e 94 b0 19 	call	0x3360	; 0x3360 <TWI_stop>

	return SUCCESS;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	8c 83       	std	Y+4, r24	; 0x04
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <EEPROM_readByte>:
 * 				uint8 *u8data:	This Argument shall indicate a pointer to character that will
 * 								point to the value we want to read from EEPROM.
 *	[RETURNS]:	This Return shall indicate the TWI status for every command used
 ----------------------------------------------------------------------------------------*/
uint8 EEPROM_readByte(uint16 u16address, uint8 *u8data)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <EEPROM_readByte+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <EEPROM_readByte+0x8>
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	7c 83       	std	Y+4, r23	; 0x04
    193a:	6b 83       	std	Y+3, r22	; 0x03
	 * EEPROM write frame:-
	 * [ S - DeviceAddress - W - ACK - LocationAddress - ACK - Sr - DeviceAddress - R - ACK - ReadData - NACK - P ]
	 */

	/* Send a start bit then check for the TWI status */
	TWI_start();
    193c:	0e 94 a0 19 	call	0x3340	; 0x3340 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    1940:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    1944:	88 30       	cpi	r24, 0x08	; 8
    1946:	11 f0       	breq	.+4      	; 0x194c <EEPROM_readByte+0x26>
		return ERROR;
    1948:	1d 82       	std	Y+5, r1	; 0x05
    194a:	44 c0       	rjmp	.+136    	; 0x19d4 <EEPROM_readByte+0xae>

	/* Send the device address bits + Write bit, then check for the TWI status. it will return
	 * ACK bit */
	TWI_writeByte((uint8)(((u16address & 0x0700) >> 7) | 0xA0));
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	80 70       	andi	r24, 0x00	; 0
    1952:	97 70       	andi	r25, 0x07	; 7
    1954:	88 0f       	add	r24, r24
    1956:	89 2f       	mov	r24, r25
    1958:	88 1f       	adc	r24, r24
    195a:	99 0b       	sbc	r25, r25
    195c:	91 95       	neg	r25
    195e:	80 6a       	ori	r24, 0xA0	; 160
    1960:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1964:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    1968:	88 31       	cpi	r24, 0x18	; 24
    196a:	11 f0       	breq	.+4      	; 0x1970 <EEPROM_readByte+0x4a>
		return ERROR;
    196c:	1d 82       	std	Y+5, r1	; 0x05
    196e:	32 c0       	rjmp	.+100    	; 0x19d4 <EEPROM_readByte+0xae>

	/* Send the location address bits, then check for the TWI status. it will return ACK bit */
	TWI_writeByte((uint8)(u16address));
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1976:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    197a:	88 32       	cpi	r24, 0x28	; 40
    197c:	11 f0       	breq	.+4      	; 0x1982 <EEPROM_readByte+0x5c>
		return ERROR;
    197e:	1d 82       	std	Y+5, r1	; 0x05
    1980:	29 c0       	rjmp	.+82     	; 0x19d4 <EEPROM_readByte+0xae>

	/* Send the repeated start bit, then check for the TWI status */
	TWI_start();
    1982:	0e 94 a0 19 	call	0x3340	; 0x3340 <TWI_start>
	if(TWI_getStatus() != TWI_REP_START)
    1986:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    198a:	80 31       	cpi	r24, 0x10	; 16
    198c:	11 f0       	breq	.+4      	; 0x1992 <EEPROM_readByte+0x6c>
		return ERROR;
    198e:	1d 82       	std	Y+5, r1	; 0x05
    1990:	21 c0       	rjmp	.+66     	; 0x19d4 <EEPROM_readByte+0xae>

	/* Send the device address bits + Read bit, then check for the TWI status. it will return
	 * ACK bit */
	TWI_writeByte((uint8)((((u16address & 0x0700) >> 7) | 1) | 0xA0));
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	80 70       	andi	r24, 0x00	; 0
    1998:	97 70       	andi	r25, 0x07	; 7
    199a:	88 0f       	add	r24, r24
    199c:	89 2f       	mov	r24, r25
    199e:	88 1f       	adc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	91 95       	neg	r25
    19a4:	81 6a       	ori	r24, 0xA1	; 161
    19a6:	0e 94 bb 19 	call	0x3376	; 0x3376 <TWI_writeByte>
	if(TWI_getStatus() != TWI_MT_SLA_R_ACK)
    19aa:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    19ae:	80 34       	cpi	r24, 0x40	; 64
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <EEPROM_readByte+0x90>
		return ERROR;
    19b2:	1d 82       	std	Y+5, r1	; 0x05
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <EEPROM_readByte+0xae>

	/* Read the data on the specified memory location, then check for the TWI status. It will finally
	 * return a NACK bit */
	*u8data = TWI_readWithNACK();
    19b6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <TWI_readWithNACK>
    19ba:	eb 81       	ldd	r30, Y+3	; 0x03
    19bc:	fc 81       	ldd	r31, Y+4	; 0x04
    19be:	80 83       	st	Z, r24
	if(TWI_getStatus() != TWI_MR_DATA_NACK)
    19c0:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <TWI_getStatus>
    19c4:	88 35       	cpi	r24, 0x58	; 88
    19c6:	11 f0       	breq	.+4      	; 0x19cc <EEPROM_readByte+0xa6>
		return ERROR;
    19c8:	1d 82       	std	Y+5, r1	; 0x05
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <EEPROM_readByte+0xae>

	/* Send the stop bit to finish the process */
	TWI_stop();
    19cc:	0e 94 b0 19 	call	0x3360	; 0x3360 <TWI_stop>

	return SUCCESS;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	8d 83       	std	Y+5, r24	; 0x05
    19d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <GPIO_setPinDirection>:
 * 			GPIO_PinDirectionType direction :	This Arg shall indicate the direction of
 * 												the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_setPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_setPinDirection+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <GPIO_setPinDirection+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	6a 83       	std	Y+2, r22	; 0x02
    19f8:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	08 f0       	brcs	.+2      	; 0x1a02 <GPIO_setPinDirection+0x1c>
    1a00:	d5 c0       	rjmp	.+426    	; 0x1bac <GPIO_setPinDirection+0x1c6>
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <GPIO_setPinDirection+0x24>
    1a08:	d1 c0       	rjmp	.+418    	; 0x1bac <GPIO_setPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3d 83       	std	Y+5, r19	; 0x05
    1a12:	2c 83       	std	Y+4, r18	; 0x04
    1a14:	8c 81       	ldd	r24, Y+4	; 0x04
    1a16:	9d 81       	ldd	r25, Y+5	; 0x05
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <GPIO_setPinDirection+0x3a>
    1a1e:	43 c0       	rjmp	.+134    	; 0x1aa6 <GPIO_setPinDirection+0xc0>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <GPIO_setPinDirection+0x4e>
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	71 f0       	breq	.+28     	; 0x1a4e <GPIO_setPinDirection+0x68>
    1a32:	bc c0       	rjmp	.+376    	; 0x1bac <GPIO_setPinDirection+0x1c6>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	22 30       	cpi	r18, 0x02	; 2
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <GPIO_setPinDirection+0x5a>
    1a3e:	5f c0       	rjmp	.+190    	; 0x1afe <GPIO_setPinDirection+0x118>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	83 30       	cpi	r24, 0x03	; 3
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <GPIO_setPinDirection+0x66>
    1a4a:	85 c0       	rjmp	.+266    	; 0x1b56 <GPIO_setPinDirection+0x170>
    1a4c:	af c0       	rjmp	.+350    	; 0x1bac <GPIO_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <GPIO_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1a54:	aa e3       	ldi	r26, 0x3A	; 58
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ea e3       	ldi	r30, 0x3A	; 58
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_setPinDirection+0x8c>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_setPinDirection+0x88>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	98 c0       	rjmp	.+304    	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1a7c:	aa e3       	ldi	r26, 0x3A	; 58
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ea e3       	ldi	r30, 0x3A	; 58
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_setPinDirection+0xb4>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_setPinDirection+0xb0>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	83 c0       	rjmp	.+262    	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	a1 f4       	brne	.+40     	; 0x1ad4 <GPIO_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1aac:	a7 e3       	ldi	r26, 0x37	; 55
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e3       	ldi	r30, 0x37	; 55
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_setPinDirection+0xe4>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_setPinDirection+0xe0>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	6c c0       	rjmp	.+216    	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ad4:	a7 e3       	ldi	r26, 0x37	; 55
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e7 e3       	ldi	r30, 0x37	; 55
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_setPinDirection+0x10c>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_setPinDirection+0x108>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	57 c0       	rjmp	.+174    	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	a1 f4       	brne	.+40     	; 0x1b2c <GPIO_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1b04:	a4 e3       	ldi	r26, 0x34	; 52
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e4 e3       	ldi	r30, 0x34	; 52
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_setPinDirection+0x13c>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_setPinDirection+0x138>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	40 c0       	rjmp	.+128    	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1b2c:	a4 e3       	ldi	r26, 0x34	; 52
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e4 e3       	ldi	r30, 0x34	; 52
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_setPinDirection+0x164>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_setPinDirection+0x160>
    1b4e:	80 95       	com	r24
    1b50:	84 23       	and	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	2b c0       	rjmp	.+86     	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	a1 f4       	brne	.+40     	; 0x1b84 <GPIO_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1b5c:	a1 e3       	ldi	r26, 0x31	; 49
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e1 e3       	ldi	r30, 0x31	; 49
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_setPinDirection+0x194>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_setPinDirection+0x190>
    1b7e:	84 2b       	or	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1b84:	a1 e3       	ldi	r26, 0x31	; 49
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e1 e3       	ldi	r30, 0x31	; 49
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <GPIO_setPinDirection+0x1bc>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <GPIO_setPinDirection+0x1b8>
    1ba6:	80 95       	com	r24
    1ba8:	84 23       	and	r24, r20
    1baa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <GPIO_writePin>:
 * 							    specified port
 * 			uint8 value :		This Arg shall indicate the value of the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <GPIO_writePin+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <GPIO_writePin+0x8>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	6a 83       	std	Y+2, r22	; 0x02
    1bce:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	84 30       	cpi	r24, 0x04	; 4
    1bd4:	08 f0       	brcs	.+2      	; 0x1bd8 <GPIO_writePin+0x1c>
    1bd6:	d5 c0       	rjmp	.+426    	; 0x1d82 <GPIO_writePin+0x1c6>
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	88 30       	cpi	r24, 0x08	; 8
    1bdc:	08 f0       	brcs	.+2      	; 0x1be0 <GPIO_writePin+0x24>
    1bde:	d1 c0       	rjmp	.+418    	; 0x1d82 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3d 83       	std	Y+5, r19	; 0x05
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <GPIO_writePin+0x3a>
    1bf4:	43 c0       	rjmp	.+134    	; 0x1c7c <GPIO_writePin+0xc0>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <GPIO_writePin+0x4e>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <GPIO_writePin+0x68>
    1c08:	bc c0       	rjmp	.+376    	; 0x1d82 <GPIO_writePin+0x1c6>
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <GPIO_writePin+0x5a>
    1c14:	5f c0       	rjmp	.+190    	; 0x1cd4 <GPIO_writePin+0x118>
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	9d 81       	ldd	r25, Y+5	; 0x05
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <GPIO_writePin+0x66>
    1c20:	85 c0       	rjmp	.+266    	; 0x1d2c <GPIO_writePin+0x170>
    1c22:	af c0       	rjmp	.+350    	; 0x1d82 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a1 f4       	brne	.+40     	; 0x1c52 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1c2a:	ab e3       	ldi	r26, 0x3B	; 59
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	eb e3       	ldi	r30, 0x3B	; 59
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_writePin+0x8c>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_writePin+0x88>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	98 c0       	rjmp	.+304    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1c52:	ab e3       	ldi	r26, 0x3B	; 59
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	eb e3       	ldi	r30, 0x3B	; 59
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_writePin+0xb4>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_writePin+0xb0>
    1c74:	80 95       	com	r24
    1c76:	84 23       	and	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	83 c0       	rjmp	.+262    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	a1 f4       	brne	.+40     	; 0x1caa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1c82:	a8 e3       	ldi	r26, 0x38	; 56
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e8 e3       	ldi	r30, 0x38	; 56
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <GPIO_writePin+0xe4>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <GPIO_writePin+0xe0>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	6c c0       	rjmp	.+216    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_writePin+0x10c>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_writePin+0x108>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	57 c0       	rjmp	.+174    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1cda:	a5 e3       	ldi	r26, 0x35	; 53
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e3       	ldi	r30, 0x35	; 53
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_writePin+0x13c>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_writePin+0x138>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	40 c0       	rjmp	.+128    	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1d02:	a5 e3       	ldi	r26, 0x35	; 53
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e5 e3       	ldi	r30, 0x35	; 53
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_writePin+0x164>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_writePin+0x160>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	2b c0       	rjmp	.+86     	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	a1 f4       	brne	.+40     	; 0x1d5a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1d32:	a2 e3       	ldi	r26, 0x32	; 50
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e2 e3       	ldi	r30, 0x32	; 50
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_writePin+0x194>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_writePin+0x190>
    1d54:	84 2b       	or	r24, r20
    1d56:	8c 93       	st	X, r24
    1d58:	14 c0       	rjmp	.+40     	; 0x1d82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1d5a:	a2 e3       	ldi	r26, 0x32	; 50
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e2 e3       	ldi	r30, 0x32	; 50
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 2e       	mov	r0, r18
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GPIO_writePin+0x1bc>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	0a 94       	dec	r0
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <GPIO_writePin+0x1b8>
    1d7c:	80 95       	com	r24
    1d7e:	84 23       	and	r24, r20
    1d80:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <GPIO_readPin>:
 * 			uint8 pin_num : 	This Arg shall indicate the register pin number in the
 * 							    specified port
 *	[RETURNS]:	The function returns the value on the pin (High or Low)
 ----------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <GPIO_readPin+0x6>
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_readPin+0x8>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	8a 83       	std	Y+2, r24	; 0x02
    1da2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    1da4:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <GPIO_readPin+0x1c>
    1dac:	84 c0       	rjmp	.+264    	; 0x1eb6 <GPIO_readPin+0x124>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	88 30       	cpi	r24, 0x08	; 8
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <GPIO_readPin+0x24>
    1db4:	80 c0       	rjmp	.+256    	; 0x1eb6 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	3d 83       	std	Y+5, r19	; 0x05
    1dbe:	2c 83       	std	Y+4, r18	; 0x04
    1dc0:	4c 81       	ldd	r20, Y+4	; 0x04
    1dc2:	5d 81       	ldd	r21, Y+5	; 0x05
    1dc4:	41 30       	cpi	r20, 0x01	; 1
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	79 f1       	breq	.+94     	; 0x1e28 <GPIO_readPin+0x96>
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	91 05       	cpc	r25, r1
    1dd2:	34 f4       	brge	.+12     	; 0x1de0 <GPIO_readPin+0x4e>
    1dd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd8:	21 15       	cp	r18, r1
    1dda:	31 05       	cpc	r19, r1
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <GPIO_readPin+0x66>
    1dde:	6b c0       	rjmp	.+214    	; 0x1eb6 <GPIO_readPin+0x124>
    1de0:	4c 81       	ldd	r20, Y+4	; 0x04
    1de2:	5d 81       	ldd	r21, Y+5	; 0x05
    1de4:	42 30       	cpi	r20, 0x02	; 2
    1de6:	51 05       	cpc	r21, r1
    1de8:	b9 f1       	breq	.+110    	; 0x1e58 <GPIO_readPin+0xc6>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GPIO_readPin+0x64>
    1df4:	49 c0       	rjmp	.+146    	; 0x1e88 <GPIO_readPin+0xf6>
    1df6:	5f c0       	rjmp	.+190    	; 0x1eb6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1df8:	e9 e3       	ldi	r30, 0x39	; 57
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <GPIO_readPin+0x7e>
    1e0c:	55 95       	asr	r21
    1e0e:	47 95       	ror	r20
    1e10:	8a 95       	dec	r24
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <GPIO_readPin+0x7a>
    1e14:	ca 01       	movw	r24, r20
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	90 70       	andi	r25, 0x00	; 0
    1e1a:	88 23       	and	r24, r24
    1e1c:	19 f0       	breq	.+6      	; 0x1e24 <GPIO_readPin+0x92>
			{
				pinValue = LOGIC_HIGH;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	49 c0       	rjmp	.+146    	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1e24:	19 82       	std	Y+1, r1	; 0x01
    1e26:	47 c0       	rjmp	.+142    	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1e28:	e6 e3       	ldi	r30, 0x36	; 54
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <GPIO_readPin+0xae>
    1e3c:	55 95       	asr	r21
    1e3e:	47 95       	ror	r20
    1e40:	8a 95       	dec	r24
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <GPIO_readPin+0xaa>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	88 23       	and	r24, r24
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <GPIO_readPin+0xc2>
			{
				pinValue = LOGIC_HIGH;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	31 c0       	rjmp	.+98     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	2f c0       	rjmp	.+94     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1e58:	e3 e3       	ldi	r30, 0x33	; 51
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a9 01       	movw	r20, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_readPin+0xde>
    1e6c:	55 95       	asr	r21
    1e6e:	47 95       	ror	r20
    1e70:	8a 95       	dec	r24
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_readPin+0xda>
    1e74:	ca 01       	movw	r24, r20
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	88 23       	and	r24, r24
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <GPIO_readPin+0xf2>
			{
				pinValue = LOGIC_HIGH;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	19 c0       	rjmp	.+50     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	17 c0       	rjmp	.+46     	; 0x1eb6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1e88:	e0 e3       	ldi	r30, 0x30	; 48
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_readPin+0x10e>
    1e9c:	55 95       	asr	r21
    1e9e:	47 95       	ror	r20
    1ea0:	8a 95       	dec	r24
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_readPin+0x10a>
    1ea4:	ca 01       	movw	r24, r20
    1ea6:	81 70       	andi	r24, 0x01	; 1
    1ea8:	90 70       	andi	r25, 0x00	; 0
    1eaa:	88 23       	and	r24, r24
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <GPIO_readPin+0x122>
			{
				pinValue = LOGIC_HIGH;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pinValue;
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <GPIO_setPortDirection>:
 * 			GPIO_PinDirectionType direction :	This Arg shall indicate the direction of
 * 												the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_setPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <GPIO_setPortDirection+0x6>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <GPIO_setPortDirection+0x8>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	90 f5       	brcc	.+100    	; 0x1f42 <GPIO_setPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3c 83       	std	Y+4, r19	; 0x04
    1ee6:	2b 83       	std	Y+3, r18	; 0x03
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	91 05       	cpc	r25, r1
    1ef0:	d1 f0       	breq	.+52     	; 0x1f26 <GPIO_setPortDirection+0x5e>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <GPIO_setPortDirection+0x3e>
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <GPIO_setPortDirection+0x54>
    1f04:	1e c0       	rjmp	.+60     	; 0x1f42 <GPIO_setPortDirection+0x7a>
    1f06:	2b 81       	ldd	r18, Y+3	; 0x03
    1f08:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	81 f0       	breq	.+32     	; 0x1f30 <GPIO_setPortDirection+0x68>
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	83 30       	cpi	r24, 0x03	; 3
    1f16:	91 05       	cpc	r25, r1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <GPIO_setPortDirection+0x72>
    1f1a:	13 c0       	rjmp	.+38     	; 0x1f42 <GPIO_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1f1c:	ea e3       	ldi	r30, 0x3A	; 58
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	80 83       	st	Z, r24
    1f24:	0e c0       	rjmp	.+28     	; 0x1f42 <GPIO_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1f26:	e7 e3       	ldi	r30, 0x37	; 55
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 83       	st	Z, r24
    1f2e:	09 c0       	rjmp	.+18     	; 0x1f42 <GPIO_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1f30:	e4 e3       	ldi	r30, 0x34	; 52
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	80 83       	st	Z, r24
    1f38:	04 c0       	rjmp	.+8      	; 0x1f42 <GPIO_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1f3a:	e1 e3       	ldi	r30, 0x31	; 49
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <GPIO_writePort>:
 * [in]		uint8 port_num :	This Arg shall indicate the register port number
 * 			uint8 value :		This Arg shall indicate the value to write in port
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_writePort+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <GPIO_writePort+0x8>
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	84 30       	cpi	r24, 0x04	; 4
    1f64:	90 f5       	brcc	.+100    	; 0x1fca <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3c 83       	std	Y+4, r19	; 0x04
    1f6e:	2b 83       	std	Y+3, r18	; 0x03
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	9c 81       	ldd	r25, Y+4	; 0x04
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	d1 f0       	breq	.+52     	; 0x1fae <GPIO_writePort+0x5e>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <GPIO_writePort+0x3e>
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	9c 81       	ldd	r25, Y+4	; 0x04
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	61 f0       	breq	.+24     	; 0x1fa4 <GPIO_writePort+0x54>
    1f8c:	1e c0       	rjmp	.+60     	; 0x1fca <GPIO_writePort+0x7a>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	31 05       	cpc	r19, r1
    1f96:	81 f0       	breq	.+32     	; 0x1fb8 <GPIO_writePort+0x68>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	81 f0       	breq	.+32     	; 0x1fc2 <GPIO_writePort+0x72>
    1fa2:	13 c0       	rjmp	.+38     	; 0x1fca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1fa4:	eb e3       	ldi	r30, 0x3B	; 59
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	80 83       	st	Z, r24
    1fac:	0e c0       	rjmp	.+28     	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1fae:	e8 e3       	ldi	r30, 0x38	; 56
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	80 83       	st	Z, r24
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1fb8:	e5 e3       	ldi	r30, 0x35	; 53
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	80 83       	st	Z, r24
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1fc2:	e2 e3       	ldi	r30, 0x32	; 50
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <GPIO_readPort>:
 * [ARGS]:
 * [in]		uint8 port_num :	This Arg shall indicate the register port number
 *	[RETURNS]:	The function returns the value on the port
 ----------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <GPIO_readPort+0x6>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <GPIO_readPort+0x8>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue = 0x00;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	90 f5       	brcc	.+100    	; 0x2052 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	3c 83       	std	Y+4, r19	; 0x04
    1ff6:	2b 83       	std	Y+3, r18	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	91 05       	cpc	r25, r1
    2000:	d1 f0       	breq	.+52     	; 0x2036 <GPIO_readPort+0x5e>
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	2c f4       	brge	.+10     	; 0x2016 <GPIO_readPort+0x3e>
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	61 f0       	breq	.+24     	; 0x202c <GPIO_readPort+0x54>
    2014:	1e c0       	rjmp	.+60     	; 0x2052 <GPIO_readPort+0x7a>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3c 81       	ldd	r19, Y+4	; 0x04
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	81 f0       	breq	.+32     	; 0x2040 <GPIO_readPort+0x68>
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	91 05       	cpc	r25, r1
    2028:	81 f0       	breq	.+32     	; 0x204a <GPIO_readPort+0x72>
    202a:	13 c0       	rjmp	.+38     	; 0x2052 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			portValue = PINA;
    202c:	e9 e3       	ldi	r30, 0x39	; 57
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	0e c0       	rjmp	.+28     	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			portValue = PINB;
    2036:	e6 e3       	ldi	r30, 0x36	; 54
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	09 c0       	rjmp	.+18     	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			portValue = PINC;
    2040:	e3 e3       	ldi	r30, 0x33	; 51
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			portValue = PIND;
    204a:	e0 e3       	ldi	r30, 0x30	; 48
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return portValue;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <LCD_sendCommand>:
 * [ARGS]:
 * [in]		uint8 command :		This Arg shall indicate the sent command
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	e9 97       	sbiw	r28, 0x39	; 57
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	89 af       	std	Y+57, r24	; 0x39
	 * 5. delay t(pw)-t(dsw) = 290-100 = 190 ns	~1ms
	 * 6. send the command
	 * 7. delay t(dsw) = 100 ns	~1ms
	 * 8. E = 0
	 * 9. delay t(h) = 13 ns 	~1ms */
	GPIO_writePin(LCD_PORT, LCD_RS_PIN, LOGIC_LOW);
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	62 e0       	ldi	r22, 0x02	; 2
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT, LCD_RW_PIN, LOGIC_LOW);
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	63 e0       	ldi	r22, 0x03	; 3
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a0 e8       	ldi	r26, 0x80	; 128
    2092:	bf e3       	ldi	r27, 0x3F	; 63
    2094:	8d ab       	std	Y+53, r24	; 0x35
    2096:	9e ab       	std	Y+54, r25	; 0x36
    2098:	af ab       	std	Y+55, r26	; 0x37
    209a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	6d a9       	ldd	r22, Y+53	; 0x35
    209e:	7e a9       	ldd	r23, Y+54	; 0x36
    20a0:	8f a9       	ldd	r24, Y+55	; 0x37
    20a2:	98 ad       	ldd	r25, Y+56	; 0x38
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	53 e4       	ldi	r21, 0x43	; 67
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	89 ab       	std	Y+49, r24	; 0x31
    20b6:	9a ab       	std	Y+50, r25	; 0x32
    20b8:	ab ab       	std	Y+51, r26	; 0x33
    20ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20bc:	69 a9       	ldd	r22, Y+49	; 0x31
    20be:	7a a9       	ldd	r23, Y+50	; 0x32
    20c0:	8b a9       	ldd	r24, Y+51	; 0x33
    20c2:	9c a9       	ldd	r25, Y+52	; 0x34
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e8       	ldi	r20, 0x80	; 128
    20ca:	5f e3       	ldi	r21, 0x3F	; 63
    20cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	2c f4       	brge	.+10     	; 0x20de <LCD_sendCommand+0x7c>
		__ticks = 1;
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
    20dc:	3f c0       	rjmp	.+126    	; 0x215c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    20de:	69 a9       	ldd	r22, Y+49	; 0x31
    20e0:	7a a9       	ldd	r23, Y+50	; 0x32
    20e2:	8b a9       	ldd	r24, Y+51	; 0x33
    20e4:	9c a9       	ldd	r25, Y+52	; 0x34
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	4c f5       	brge	.+82     	; 0x2148 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	6d a9       	ldd	r22, Y+53	; 0x35
    20f8:	7e a9       	ldd	r23, Y+54	; 0x36
    20fa:	8f a9       	ldd	r24, Y+55	; 0x37
    20fc:	98 ad       	ldd	r25, Y+56	; 0x38
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e2       	ldi	r20, 0x20	; 32
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	98 ab       	std	Y+48, r25	; 0x30
    211c:	8f a7       	std	Y+47, r24	; 0x2f
    211e:	0f c0       	rjmp	.+30     	; 0x213e <LCD_sendCommand+0xdc>
    2120:	89 e1       	ldi	r24, 0x19	; 25
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e a7       	std	Y+46, r25	; 0x2e
    2126:	8d a7       	std	Y+45, r24	; 0x2d
    2128:	8d a5       	ldd	r24, Y+45	; 0x2d
    212a:	9e a5       	ldd	r25, Y+46	; 0x2e
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_sendCommand+0xca>
    2130:	9e a7       	std	Y+46, r25	; 0x2e
    2132:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	01 97       	sbiw	r24, 0x01	; 1
    213a:	98 ab       	std	Y+48, r25	; 0x30
    213c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2140:	98 a9       	ldd	r25, Y+48	; 0x30
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	69 f7       	brne	.-38     	; 0x2120 <LCD_sendCommand+0xbe>
    2146:	14 c0       	rjmp	.+40     	; 0x2170 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	69 a9       	ldd	r22, Y+49	; 0x31
    214a:	7a a9       	ldd	r23, Y+50	; 0x32
    214c:	8b a9       	ldd	r24, Y+51	; 0x33
    214e:	9c a9       	ldd	r25, Y+52	; 0x34
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	98 ab       	std	Y+48, r25	; 0x30
    215a:	8f a7       	std	Y+47, r24	; 0x2f
    215c:	8f a5       	ldd	r24, Y+47	; 0x2f
    215e:	98 a9       	ldd	r25, Y+48	; 0x30
    2160:	9c a7       	std	Y+44, r25	; 0x2c
    2162:	8b a7       	std	Y+43, r24	; 0x2b
    2164:	8b a5       	ldd	r24, Y+43	; 0x2b
    2166:	9c a5       	ldd	r25, Y+44	; 0x2c
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <LCD_sendCommand+0x106>
    216c:	9c a7       	std	Y+44, r25	; 0x2c
    216e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_HIGH);
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	64 e0       	ldi	r22, 0x04	; 4
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e8       	ldi	r26, 0x80	; 128
    2180:	bf e3       	ldi	r27, 0x3F	; 63
    2182:	8f a3       	std	Y+39, r24	; 0x27
    2184:	98 a7       	std	Y+40, r25	; 0x28
    2186:	a9 a7       	std	Y+41, r26	; 0x29
    2188:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6f a1       	ldd	r22, Y+39	; 0x27
    218c:	78 a5       	ldd	r23, Y+40	; 0x28
    218e:	89 a5       	ldd	r24, Y+41	; 0x29
    2190:	9a a5       	ldd	r25, Y+42	; 0x2a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	53 e4       	ldi	r21, 0x43	; 67
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8b a3       	std	Y+35, r24	; 0x23
    21a4:	9c a3       	std	Y+36, r25	; 0x24
    21a6:	ad a3       	std	Y+37, r26	; 0x25
    21a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21aa:	6b a1       	ldd	r22, Y+35	; 0x23
    21ac:	7c a1       	ldd	r23, Y+36	; 0x24
    21ae:	8d a1       	ldd	r24, Y+37	; 0x25
    21b0:	9e a1       	ldd	r25, Y+38	; 0x26
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_sendCommand+0x16a>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    21cc:	6b a1       	ldd	r22, Y+35	; 0x23
    21ce:	7c a1       	ldd	r23, Y+36	; 0x24
    21d0:	8d a1       	ldd	r24, Y+37	; 0x25
    21d2:	9e a1       	ldd	r25, Y+38	; 0x26
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6f a1       	ldd	r22, Y+39	; 0x27
    21e6:	78 a5       	ldd	r23, Y+40	; 0x28
    21e8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9a a3       	std	Y+34, r25	; 0x22
    220a:	89 a3       	std	Y+33, r24	; 0x21
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_sendCommand+0x1ca>
    220e:	89 e1       	ldi	r24, 0x19	; 25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 a3       	std	Y+32, r25	; 0x20
    2214:	8f 8f       	std	Y+31, r24	; 0x1f
    2216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2218:	98 a1       	ldd	r25, Y+32	; 0x20
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_sendCommand+0x1b8>
    221e:	98 a3       	std	Y+32, r25	; 0x20
    2220:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9a a3       	std	Y+34, r25	; 0x22
    222a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_sendCommand+0x1ac>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6b a1       	ldd	r22, Y+35	; 0x23
    2238:	7c a1       	ldd	r23, Y+36	; 0x24
    223a:	8d a1       	ldd	r24, Y+37	; 0x25
    223c:	9e a1       	ldd	r25, Y+38	; 0x26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	89 a1       	ldd	r24, Y+33	; 0x21
    224c:	9a a1       	ldd	r25, Y+34	; 0x22
    224e:	9e 8f       	std	Y+30, r25	; 0x1e
    2250:	8d 8f       	std	Y+29, r24	; 0x1d
    2252:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2254:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x1f4>
    225a:	9e 8f       	std	Y+30, r25	; 0x1e
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DB_PORT, command);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	69 ad       	ldd	r22, Y+57	; 0x39
    2262:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePort>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e8       	ldi	r26, 0x80	; 128
    226c:	bf e3       	ldi	r27, 0x3F	; 63
    226e:	89 8f       	std	Y+25, r24	; 0x19
    2270:	9a 8f       	std	Y+26, r25	; 0x1a
    2272:	ab 8f       	std	Y+27, r26	; 0x1b
    2274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	69 8d       	ldd	r22, Y+25	; 0x19
    2278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    227a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    227c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	53 e4       	ldi	r21, 0x43	; 67
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8d 8b       	std	Y+21, r24	; 0x15
    2290:	9e 8b       	std	Y+22, r25	; 0x16
    2292:	af 8b       	std	Y+23, r26	; 0x17
    2294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <LCD_sendCommand+0x256>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    22b8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ba:	7e 89       	ldd	r23, Y+22	; 0x16
    22bc:	8f 89       	ldd	r24, Y+23	; 0x17
    22be:	98 8d       	ldd	r25, Y+24	; 0x18
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	69 8d       	ldd	r22, Y+25	; 0x19
    22d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9c 8b       	std	Y+20, r25	; 0x14
    22f6:	8b 8b       	std	Y+19, r24	; 0x13
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <LCD_sendCommand+0x2b6>
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	89 8b       	std	Y+17, r24	; 0x11
    2302:	89 89       	ldd	r24, Y+17	; 0x11
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <LCD_sendCommand+0x2a4>
    230a:	9a 8b       	std	Y+18, r25	; 0x12
    230c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8b 89       	ldd	r24, Y+19	; 0x13
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9c 8b       	std	Y+20, r25	; 0x14
    2316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <LCD_sendCommand+0x298>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9c 8b       	std	Y+20, r25	; 0x14
    2334:	8b 8b       	std	Y+19, r24	; 0x13
    2336:	8b 89       	ldd	r24, Y+19	; 0x13
    2338:	9c 89       	ldd	r25, Y+20	; 0x14
    233a:	98 8b       	std	Y+16, r25	; 0x10
    233c:	8f 87       	std	Y+15, r24	; 0x0f
    233e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2340:	98 89       	ldd	r25, Y+16	; 0x10
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <LCD_sendCommand+0x2e0>
    2346:	98 8b       	std	Y+16, r25	; 0x10
    2348:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_LOW);
    234a:	83 e0       	ldi	r24, 0x03	; 3
    234c:	64 e0       	ldi	r22, 0x04	; 4
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8b 87       	std	Y+11, r24	; 0x0b
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	ad 87       	std	Y+13, r26	; 0x0d
    2362:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6b 85       	ldd	r22, Y+11	; 0x0b
    2366:	7c 85       	ldd	r23, Y+12	; 0x0c
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8f 83       	std	Y+7, r24	; 0x07
    237e:	98 87       	std	Y+8, r25	; 0x08
    2380:	a9 87       	std	Y+9, r26	; 0x09
    2382:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_sendCommand+0x344>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_sendCommand+0x3a4>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9c 83       	std	Y+4, r25	; 0x04
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_sendCommand+0x392>
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_sendCommand+0x386>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	9a 83       	std	Y+2, r25	; 0x02
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	9a 81       	ldd	r25, Y+2	; 0x02
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_sendCommand+0x3ce>
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2438:	e9 96       	adiw	r28, 0x39	; 57
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_displayCharacter>:
 * [ARGS]:
 * [in]		uint8 character :	This Arg shall indicate the sent character to display on LCD
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayCharacter(uint8 character)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	e9 97       	sbiw	r28, 0x39	; 57
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	89 af       	std	Y+57, r24	; 0x39
	 * 5. delay t(pw)-t(dsw) = 290-100 = 190 ns	~1ms
	 * 6. send the command
	 * 7. delay t(dsw) = 100 ns	~1ms
	 * 8. E = 0
	 * 9. delay t(h) = 13 ns 	~1ms */
	GPIO_writePin(LCD_PORT, LCD_RS_PIN, LOGIC_HIGH);
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	62 e0       	ldi	r22, 0x02	; 2
    2464:	41 e0       	ldi	r20, 0x01	; 1
    2466:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT, LCD_RW_PIN, LOGIC_LOW);
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	63 e0       	ldi	r22, 0x03	; 3
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e8       	ldi	r26, 0x80	; 128
    247a:	bf e3       	ldi	r27, 0x3F	; 63
    247c:	8d ab       	std	Y+53, r24	; 0x35
    247e:	9e ab       	std	Y+54, r25	; 0x36
    2480:	af ab       	std	Y+55, r26	; 0x37
    2482:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6d a9       	ldd	r22, Y+53	; 0x35
    2486:	7e a9       	ldd	r23, Y+54	; 0x36
    2488:	8f a9       	ldd	r24, Y+55	; 0x37
    248a:	98 ad       	ldd	r25, Y+56	; 0x38
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	53 e4       	ldi	r21, 0x43	; 67
    2494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	89 ab       	std	Y+49, r24	; 0x31
    249e:	9a ab       	std	Y+50, r25	; 0x32
    24a0:	ab ab       	std	Y+51, r26	; 0x33
    24a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24a4:	69 a9       	ldd	r22, Y+49	; 0x31
    24a6:	7a a9       	ldd	r23, Y+50	; 0x32
    24a8:	8b a9       	ldd	r24, Y+51	; 0x33
    24aa:	9c a9       	ldd	r25, Y+52	; 0x34
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    24c6:	69 a9       	ldd	r22, Y+49	; 0x31
    24c8:	7a a9       	ldd	r23, Y+50	; 0x32
    24ca:	8b a9       	ldd	r24, Y+51	; 0x33
    24cc:	9c a9       	ldd	r25, Y+52	; 0x34
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6d a9       	ldd	r22, Y+53	; 0x35
    24e0:	7e a9       	ldd	r23, Y+54	; 0x36
    24e2:	8f a9       	ldd	r24, Y+55	; 0x37
    24e4:	98 ad       	ldd	r25, Y+56	; 0x38
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	98 ab       	std	Y+48, r25	; 0x30
    2504:	8f a7       	std	Y+47, r24	; 0x2f
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_displayCharacter+0xdc>
    2508:	89 e1       	ldi	r24, 0x19	; 25
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e a7       	std	Y+46, r25	; 0x2e
    250e:	8d a7       	std	Y+45, r24	; 0x2d
    2510:	8d a5       	ldd	r24, Y+45	; 0x2d
    2512:	9e a5       	ldd	r25, Y+46	; 0x2e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_displayCharacter+0xca>
    2518:	9e a7       	std	Y+46, r25	; 0x2e
    251a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8f a5       	ldd	r24, Y+47	; 0x2f
    251e:	98 a9       	ldd	r25, Y+48	; 0x30
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	98 ab       	std	Y+48, r25	; 0x30
    2524:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8f a5       	ldd	r24, Y+47	; 0x2f
    2528:	98 a9       	ldd	r25, Y+48	; 0x30
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_displayCharacter+0xbe>
    252e:	14 c0       	rjmp	.+40     	; 0x2558 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	69 a9       	ldd	r22, Y+49	; 0x31
    2532:	7a a9       	ldd	r23, Y+50	; 0x32
    2534:	8b a9       	ldd	r24, Y+51	; 0x33
    2536:	9c a9       	ldd	r25, Y+52	; 0x34
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	98 ab       	std	Y+48, r25	; 0x30
    2542:	8f a7       	std	Y+47, r24	; 0x2f
    2544:	8f a5       	ldd	r24, Y+47	; 0x2f
    2546:	98 a9       	ldd	r25, Y+48	; 0x30
    2548:	9c a7       	std	Y+44, r25	; 0x2c
    254a:	8b a7       	std	Y+43, r24	; 0x2b
    254c:	8b a5       	ldd	r24, Y+43	; 0x2b
    254e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_displayCharacter+0x106>
    2554:	9c a7       	std	Y+44, r25	; 0x2c
    2556:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_HIGH);
    2558:	83 e0       	ldi	r24, 0x03	; 3
    255a:	64 e0       	ldi	r22, 0x04	; 4
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	a0 e8       	ldi	r26, 0x80	; 128
    2568:	bf e3       	ldi	r27, 0x3F	; 63
    256a:	8f a3       	std	Y+39, r24	; 0x27
    256c:	98 a7       	std	Y+40, r25	; 0x28
    256e:	a9 a7       	std	Y+41, r26	; 0x29
    2570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2572:	6f a1       	ldd	r22, Y+39	; 0x27
    2574:	78 a5       	ldd	r23, Y+40	; 0x28
    2576:	89 a5       	ldd	r24, Y+41	; 0x29
    2578:	9a a5       	ldd	r25, Y+42	; 0x2a
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a e7       	ldi	r20, 0x7A	; 122
    2580:	53 e4       	ldi	r21, 0x43	; 67
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8b a3       	std	Y+35, r24	; 0x23
    258c:	9c a3       	std	Y+36, r25	; 0x24
    258e:	ad a3       	std	Y+37, r26	; 0x25
    2590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2592:	6b a1       	ldd	r22, Y+35	; 0x23
    2594:	7c a1       	ldd	r23, Y+36	; 0x24
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
    25b2:	3f c0       	rjmp	.+126    	; 0x2632 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    25b4:	6b a1       	ldd	r22, Y+35	; 0x23
    25b6:	7c a1       	ldd	r23, Y+36	; 0x24
    25b8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ba:	9e a1       	ldd	r25, Y+38	; 0x26
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	4c f5       	brge	.+82     	; 0x261e <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	6f a1       	ldd	r22, Y+39	; 0x27
    25ce:	78 a5       	ldd	r23, Y+40	; 0x28
    25d0:	89 a5       	ldd	r24, Y+41	; 0x29
    25d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 e4       	ldi	r21, 0x41	; 65
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	bc 01       	movw	r22, r24
    25e6:	cd 01       	movw	r24, r26
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9a a3       	std	Y+34, r25	; 0x22
    25f2:	89 a3       	std	Y+33, r24	; 0x21
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <LCD_displayCharacter+0x1ca>
    25f6:	89 e1       	ldi	r24, 0x19	; 25
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	98 a3       	std	Y+32, r25	; 0x20
    25fc:	8f 8f       	std	Y+31, r24	; 0x1f
    25fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2600:	98 a1       	ldd	r25, Y+32	; 0x20
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_displayCharacter+0x1b8>
    2606:	98 a3       	std	Y+32, r25	; 0x20
    2608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	9a a3       	std	Y+34, r25	; 0x22
    2612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	89 a1       	ldd	r24, Y+33	; 0x21
    2616:	9a a1       	ldd	r25, Y+34	; 0x22
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f7       	brne	.-38     	; 0x25f6 <LCD_displayCharacter+0x1ac>
    261c:	14 c0       	rjmp	.+40     	; 0x2646 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	6b a1       	ldd	r22, Y+35	; 0x23
    2620:	7c a1       	ldd	r23, Y+36	; 0x24
    2622:	8d a1       	ldd	r24, Y+37	; 0x25
    2624:	9e a1       	ldd	r25, Y+38	; 0x26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	9a a1       	ldd	r25, Y+34	; 0x22
    2636:	9e 8f       	std	Y+30, r25	; 0x1e
    2638:	8d 8f       	std	Y+29, r24	; 0x1d
    263a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    263c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_displayCharacter+0x1f4>
    2642:	9e 8f       	std	Y+30, r25	; 0x1e
    2644:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DB_PORT, character);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	69 ad       	ldd	r22, Y+57	; 0x39
    264a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePort>
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e8       	ldi	r26, 0x80	; 128
    2654:	bf e3       	ldi	r27, 0x3F	; 63
    2656:	89 8f       	std	Y+25, r24	; 0x19
    2658:	9a 8f       	std	Y+26, r25	; 0x1a
    265a:	ab 8f       	std	Y+27, r26	; 0x1b
    265c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	69 8d       	ldd	r22, Y+25	; 0x19
    2660:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8d 8b       	std	Y+21, r24	; 0x15
    2678:	9e 8b       	std	Y+22, r25	; 0x16
    267a:	af 8b       	std	Y+23, r26	; 0x17
    267c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    267e:	6d 89       	ldd	r22, Y+21	; 0x15
    2680:	7e 89       	ldd	r23, Y+22	; 0x16
    2682:	8f 89       	ldd	r24, Y+23	; 0x17
    2684:	98 8d       	ldd	r25, Y+24	; 0x18
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    26a0:	6d 89       	ldd	r22, Y+21	; 0x15
    26a2:	7e 89       	ldd	r23, Y+22	; 0x16
    26a4:	8f 89       	ldd	r24, Y+23	; 0x17
    26a6:	98 8d       	ldd	r25, Y+24	; 0x18
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9c 8b       	std	Y+20, r25	; 0x14
    26de:	8b 8b       	std	Y+19, r24	; 0x13
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_displayCharacter+0x2b6>
    26e2:	89 e1       	ldi	r24, 0x19	; 25
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9a 8b       	std	Y+18, r25	; 0x12
    26e8:	89 8b       	std	Y+17, r24	; 0x11
    26ea:	89 89       	ldd	r24, Y+17	; 0x11
    26ec:	9a 89       	ldd	r25, Y+18	; 0x12
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_displayCharacter+0x2a4>
    26f2:	9a 8b       	std	Y+18, r25	; 0x12
    26f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8b 89       	ldd	r24, Y+19	; 0x13
    26f8:	9c 89       	ldd	r25, Y+20	; 0x14
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8b 89       	ldd	r24, Y+19	; 0x13
    2702:	9c 89       	ldd	r25, Y+20	; 0x14
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_displayCharacter+0x298>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6d 89       	ldd	r22, Y+21	; 0x15
    270c:	7e 89       	ldd	r23, Y+22	; 0x16
    270e:	8f 89       	ldd	r24, Y+23	; 0x17
    2710:	98 8d       	ldd	r25, Y+24	; 0x18
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	8b 89       	ldd	r24, Y+19	; 0x13
    2720:	9c 89       	ldd	r25, Y+20	; 0x14
    2722:	98 8b       	std	Y+16, r25	; 0x10
    2724:	8f 87       	std	Y+15, r24	; 0x0f
    2726:	8f 85       	ldd	r24, Y+15	; 0x0f
    2728:	98 89       	ldd	r25, Y+16	; 0x10
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_displayCharacter+0x2e0>
    272e:	98 8b       	std	Y+16, r25	; 0x10
    2730:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_LOW);
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	64 e0       	ldi	r22, 0x04	; 4
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePin>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	8b 87       	std	Y+11, r24	; 0x0b
    2746:	9c 87       	std	Y+12, r25	; 0x0c
    2748:	ad 87       	std	Y+13, r26	; 0x0d
    274a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	6b 85       	ldd	r22, Y+11	; 0x0b
    274e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2750:	8d 85       	ldd	r24, Y+13	; 0x0d
    2752:	9e 85       	ldd	r25, Y+14	; 0x0e
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a e7       	ldi	r20, 0x7A	; 122
    275a:	53 e4       	ldi	r21, 0x43	; 67
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8f 83       	std	Y+7, r24	; 0x07
    2766:	98 87       	std	Y+8, r25	; 0x08
    2768:	a9 87       	std	Y+9, r26	; 0x09
    276a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    276c:	6f 81       	ldd	r22, Y+7	; 0x07
    276e:	78 85       	ldd	r23, Y+8	; 0x08
    2770:	89 85       	ldd	r24, Y+9	; 0x09
    2772:	9a 85       	ldd	r25, Y+10	; 0x0a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	3f c0       	rjmp	.+126    	; 0x280c <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    278e:	6f 81       	ldd	r22, Y+7	; 0x07
    2790:	78 85       	ldd	r23, Y+8	; 0x08
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	4c f5       	brge	.+82     	; 0x27f8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9e 83       	std	Y+6, r25	; 0x06
    27cc:	8d 83       	std	Y+5, r24	; 0x05
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <LCD_displayCharacter+0x3a4>
    27d0:	89 e1       	ldi	r24, 0x19	; 25
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_displayCharacter+0x392>
    27e0:	9c 83       	std	Y+4, r25	; 0x04
    27e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	8d 81       	ldd	r24, Y+5	; 0x05
    27e6:	9e 81       	ldd	r25, Y+6	; 0x06
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	9e 83       	std	Y+6, r25	; 0x06
    27ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <LCD_displayCharacter+0x386>
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	6f 81       	ldd	r22, Y+7	; 0x07
    27fa:	78 85       	ldd	r23, Y+8	; 0x08
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	9a 81       	ldd	r25, Y+2	; 0x02
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_displayCharacter+0x3ce>
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2820:	e9 96       	adiw	r28, 0x39	; 57
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	08 95       	ret

00002832 <LCD_init>:
 * [DESCRIPTION]:	This Function is used to initiate the LCD
 * [ARGS]:		No Arguments
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_init(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
	 * 1. Set RS, R/W, E pins as output pins
	 * 2. Set DB port as output port
	 * 3. Send command to initiate 2-lines,8-bit mode
	 * 4. Send command to set cursor off
	 * 5. Send command to clear The screen */
	GPIO_setPinDirection(LCD_PORT, LCD_RS_PIN, PIN_OUTPUT);
    283a:	83 e0       	ldi	r24, 0x03	; 3
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>
	GPIO_setPinDirection(LCD_PORT, LCD_RW_PIN, PIN_OUTPUT);
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	63 e0       	ldi	r22, 0x03	; 3
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>
	GPIO_setPinDirection(LCD_PORT, LCD_E_PIN, PIN_OUTPUT);
    284e:	83 e0       	ldi	r24, 0x03	; 3
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <GPIO_setPinDirection>
	GPIO_setPortDirection(LCD_DB_PORT, PORT_OUTPUT);
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	6f ef       	ldi	r22, 0xFF	; 255
    285c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <GPIO_setPortDirection>
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
    2860:	88 e3       	ldi	r24, 0x38	; 56
    2862:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    2866:	8c e0       	ldi	r24, 0x0C	; 12
    2868:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
}
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	08 95       	ret

00002878 <LCD_displayString>:
 * [ARGS]:
 * [in]		uint8 *str :	This Arg shall indicate the sent string to display on LCD
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
    2878:	df 93       	push	r29
    287a:	cf 93       	push	r28
    287c:	00 d0       	rcall	.+0      	; 0x287e <LCD_displayString+0x6>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9b 83       	std	Y+3, r25	; 0x03
    2886:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2888:	19 82       	std	Y+1, r1	; 0x01
    288a:	0e c0       	rjmp	.+28     	; 0x28a8 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	9b 81       	ldd	r25, Y+3	; 0x03
    2896:	fc 01       	movw	r30, r24
    2898:	e2 0f       	add	r30, r18
    289a:	f3 1f       	adc	r31, r19
    289c:	80 81       	ld	r24, Z
    289e:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayCharacter>
		i++;
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	89 83       	std	Y+1, r24	; 0x01
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	8a 81       	ldd	r24, Y+2	; 0x02
    28b0:	9b 81       	ldd	r25, Y+3	; 0x03
    28b2:	fc 01       	movw	r30, r24
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	80 81       	ld	r24, Z
    28ba:	88 23       	and	r24, r24
    28bc:	39 f7       	brne	.-50     	; 0x288c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <LCD_moveCursor>:
 * [in]		uint8 row :	This Arg shall indicate the specified row
 * 			uint8 column :	This Arg shall indicate the specified column
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row, uint8 column)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <LCD_moveCursor+0x6>
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <LCD_moveCursor+0x8>
    28d2:	0f 92       	push	r0
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;
	/* If the user entered any value bigger than the number of rows or columns */
	if((row >= NUM_OF_ROWS) || (column >= NUM_OF_COLS))
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	82 30       	cpi	r24, 0x02	; 2
    28e0:	a0 f5       	brcc	.+104    	; 0x294a <LCD_moveCursor+0x80>
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	80 31       	cpi	r24, 0x10	; 16
    28e6:	88 f5       	brcc	.+98     	; 0x294a <LCD_moveCursor+0x80>
		 * first get into the specified row. then, add the given column number
		 * to the DDRAM address of the LCD to get the location address of the
		 * wanted location. Finally we send command to for the cursor to the beginning
		 * of the first line and add the location to it.
		 */
		switch(row)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	c1 f0       	breq	.+48     	; 0x292c <LCD_moveCursor+0x62>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_moveCursor+0x46>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 f0       	breq	.+24     	; 0x2926 <LCD_moveCursor+0x5c>
    290e:	19 c0       	rjmp	.+50     	; 0x2942 <LCD_moveCursor+0x78>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	69 f0       	breq	.+26     	; 0x2934 <LCD_moveCursor+0x6a>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	61 f0       	breq	.+24     	; 0x293c <LCD_moveCursor+0x72>
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <LCD_moveCursor+0x78>
		{
		case 0:
			location = column + 0x00;
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <LCD_moveCursor+0x78>
			break;
		case 1:
			location = column + 0x40;
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	80 5c       	subi	r24, 0xC0	; 192
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <LCD_moveCursor+0x78>
			break;
		case 2:
			location = column + 0x10;
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	80 5f       	subi	r24, 0xF0	; 240
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <LCD_moveCursor+0x78>
			break;
		case 3:
			location = column + 0x50;
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	80 5b       	subi	r24, 0xB0	; 176
    2940:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		LCD_sendCommand(LCD_SET_CURSOR_AT_BEGIN | location);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
	}
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(const char *str, uint8 row, uint8 column)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <LCD_displayStringRowColumn+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <LCD_displayStringRowColumn+0x8>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
    296a:	6b 83       	std	Y+3, r22	; 0x03
    296c:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(row,column);
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	6c 81       	ldd	r22, Y+4	; 0x04
    2972:	0e 94 65 14 	call	0x28ca	; 0x28ca <LCD_moveCursor>
	LCD_displayString(str);
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	0e 94 31 10 	call	0x2062	; 0x2062 <LCD_sendCommand>
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <LCD_integerToString>:

void LCD_integerToString(uint32 integer)
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	64 97       	sbiw	r28, 0x14	; 20
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	69 8b       	std	Y+17, r22	; 0x11
    29b6:	7a 8b       	std	Y+18, r23	; 0x12
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
	char buffer[16];
	itoa(integer, buffer, 10);
    29bc:	89 89       	ldd	r24, Y+17	; 0x11
    29be:	9a 89       	ldd	r25, Y+18	; 0x12
    29c0:	9e 01       	movw	r18, r28
    29c2:	2f 5f       	subi	r18, 0xFF	; 255
    29c4:	3f 4f       	sbci	r19, 0xFF	; 255
    29c6:	b9 01       	movw	r22, r18
    29c8:	4a e0       	ldi	r20, 0x0A	; 10
    29ca:	50 e0       	ldi	r21, 0x00	; 0
    29cc:	0e 94 ac 1b 	call	0x3758	; 0x3758 <itoa>
	LCD_displayString(buffer);
    29d0:	ce 01       	movw	r24, r28
    29d2:	01 96       	adiw	r24, 0x01	; 1
    29d4:	0e 94 3c 14 	call	0x2878	; 0x2878 <LCD_displayString>
}
    29d8:	64 96       	adiw	r28, 0x14	; 20
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <main>:

/* Define the CPU frequency to 8MHz as a confirmation */
#define F_CPU 8000000UL

int main(void)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <main+0x6>
    29f0:	0f 92       	push	r0
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
	uint8 command = 0;
    29f6:	19 82       	std	Y+1, r1	; 0x01

	APP2_init();
    29f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP2_init>

	/* Check for password existence in the EEPROM or not */
	APP2_checkForFirstTime();
    29fc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <APP2_checkForFirstTime>

	while(1)
	{
		/* Receive commands from mC1 */
		command = APP2_receiveCommand();
    2a00:	0e 94 1d 09 	call	0x123a	; 0x123a <APP2_receiveCommand>
    2a04:	89 83       	std	Y+1, r24	; 0x01

		switch(command)
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	3b 83       	std	Y+3, r19	; 0x03
    2a0e:	2a 83       	std	Y+2, r18	; 0x02
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	9b 81       	ldd	r25, Y+3	; 0x03
    2a14:	8b 33       	cpi	r24, 0x3B	; 59
    2a16:	91 05       	cpc	r25, r1
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <main+0x32>
    2a1a:	53 c0       	rjmp	.+166    	; 0x2ac2 <main+0xd8>
    2a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a20:	2c 33       	cpi	r18, 0x3C	; 60
    2a22:	31 05       	cpc	r19, r1
    2a24:	dc f4       	brge	.+54     	; 0x2a5c <main+0x72>
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	86 32       	cpi	r24, 0x26	; 38
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	d1 f1       	breq	.+116    	; 0x2aa4 <main+0xba>
    2a30:	2a 81       	ldd	r18, Y+2	; 0x02
    2a32:	3b 81       	ldd	r19, Y+3	; 0x03
    2a34:	27 32       	cpi	r18, 0x27	; 39
    2a36:	31 05       	cpc	r19, r1
    2a38:	34 f4       	brge	.+12     	; 0x2a46 <main+0x5c>
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	85 32       	cpi	r24, 0x25	; 37
    2a40:	91 05       	cpc	r25, r1
    2a42:	69 f1       	breq	.+90     	; 0x2a9e <main+0xb4>
    2a44:	dd cf       	rjmp	.-70     	; 0x2a00 <main+0x16>
    2a46:	2a 81       	ldd	r18, Y+2	; 0x02
    2a48:	3b 81       	ldd	r19, Y+3	; 0x03
    2a4a:	29 32       	cpi	r18, 0x29	; 41
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	81 f1       	breq	.+96     	; 0x2ab0 <main+0xc6>
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	8a 32       	cpi	r24, 0x2A	; 42
    2a56:	91 05       	cpc	r25, r1
    2a58:	41 f1       	breq	.+80     	; 0x2aaa <main+0xc0>
    2a5a:	d2 cf       	rjmp	.-92     	; 0x2a00 <main+0x16>
    2a5c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a5e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a60:	2b 35       	cpi	r18, 0x5B	; 91
    2a62:	31 05       	cpc	r19, r1
    2a64:	59 f1       	breq	.+86     	; 0x2abc <main+0xd2>
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	9b 81       	ldd	r25, Y+3	; 0x03
    2a6a:	8c 35       	cpi	r24, 0x5C	; 92
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	34 f4       	brge	.+12     	; 0x2a7c <main+0x92>
    2a70:	2a 81       	ldd	r18, Y+2	; 0x02
    2a72:	3b 81       	ldd	r19, Y+3	; 0x03
    2a74:	20 34       	cpi	r18, 0x40	; 64
    2a76:	31 05       	cpc	r19, r1
    2a78:	79 f0       	breq	.+30     	; 0x2a98 <main+0xae>
    2a7a:	c2 cf       	rjmp	.-124    	; 0x2a00 <main+0x16>
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	8c 37       	cpi	r24, 0x7C	; 124
    2a82:	91 05       	cpc	r25, r1
    2a84:	c1 f0       	breq	.+48     	; 0x2ab6 <main+0xcc>
    2a86:	2a 81       	ldd	r18, Y+2	; 0x02
    2a88:	3b 81       	ldd	r19, Y+3	; 0x03
    2a8a:	2e 37       	cpi	r18, 0x7E	; 126
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <main+0xa8>
    2a90:	b7 cf       	rjmp	.-146    	; 0x2a00 <main+0x16>
		{
		case RECEIVE_NEWEST_PASSWORD :
			APP2_receivePassword();
    2a92:	0e 94 7c 07 	call	0xef8	; 0xef8 <APP2_receivePassword>
    2a96:	b4 cf       	rjmp	.-152    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_RE_ENTERED_PASSWORD :
			/* Take the re-entered password and check it if it's valid or not and continue the operation */
			APP2_receiveAndCheckPassword();
    2a98:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <APP2_receiveAndCheckPassword>
    2a9c:	b1 cf       	rjmp	.-158    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_PASSWORD_2 :
			/* Receive the password given for the second time and check its validity */
			APP2_receiveAndCheckPassword2();
    2a9e:	0e 94 9f 09 	call	0x133e	; 0x133e <APP2_receiveAndCheckPassword2>
    2aa2:	ae cf       	rjmp	.-164    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_PASSWORD_3 :
			/* Receive the password given for the Third time and check its validity,
			 * this is the function that will operate the BUZZER is wrong pass is given */
			APP2_receiveAndCheckPassword3();
    2aa4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <APP2_receiveAndCheckPassword3>
    2aa8:	ab cf       	rjmp	.-170    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_PASSWORD_IN_MAIN_MENU :
			APP2_receiveAndCheckPassword_mainMenu();
    2aaa:	0e 94 21 0a 	call	0x1442	; 0x1442 <APP2_receiveAndCheckPassword_mainMenu>
    2aae:	a8 cf       	rjmp	.-176    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_PASSWORD_2_MAIN_MENU:
			APP2_receiveAndCheckPassword2_mainMenu();
    2ab0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <APP2_receiveAndCheckPassword2_mainMenu>
    2ab4:	a5 cf       	rjmp	.-182    	; 0x2a00 <main+0x16>
			break;

		case RECEIVE_PASSWORD_3_MAIN_MENU :
			APP2_receiveAndCheckPassword3_mainMenu();
    2ab6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <APP2_receiveAndCheckPassword3_mainMenu>
    2aba:	a2 cf       	rjmp	.-188    	; 0x2a00 <main+0x16>
			break;

		case OPEN_DOOR :
			APP2_openDoor();
    2abc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <APP2_openDoor>
    2ac0:	9f cf       	rjmp	.-194    	; 0x2a00 <main+0x16>
			break;

		case CLOSE_DOOR :
			APP2_closeDoor();
    2ac2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <APP2_closeDoor>
    2ac6:	9c cf       	rjmp	.-200    	; 0x2a00 <main+0x16>

00002ac8 <PWM_Timer0_Start>:
 * [DESCRIPTION]:	This Function is used to initialize the DC motor
 * [ARGS]:		No Arguments
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	0f 92       	push	r0
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    2ad4:	e2 e5       	ldi	r30, 0x52	; 82
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	10 82       	st	Z, r1
	OCR0 = duty_cycle;
    2ada:	ec e5       	ldi	r30, 0x5C	; 92
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	80 83       	st	Z, r24

	SET_BIT(DDRB,PB3);	/* Set PB3/OC0 pin as output */
    2ae2:	a7 e3       	ldi	r26, 0x37	; 55
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	e7 e3       	ldi	r30, 0x37	; 55
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	88 60       	ori	r24, 0x08	; 8
    2aee:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2af0:	e3 e5       	ldi	r30, 0x53	; 83
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	8a e6       	ldi	r24, 0x6A	; 106
    2af6:	80 83       	st	Z, r24
}
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <PWM_Timer0_Stop>:
 * [DESCRIPTION]:	This Function is used to de-initialize the PWM driver
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void PWM_Timer0_Stop(void)
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    2b08:	e2 e5       	ldi	r30, 0x52	; 82
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	10 82       	st	Z, r1
	OCR0 = 0;
    2b0e:	ec e5       	ldi	r30, 0x5C	; 92
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	10 82       	st	Z, r1
	TCCR0 = 0;
    2b14:	e3 e5       	ldi	r30, 0x53	; 83
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	10 82       	st	Z, r1
}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <TIMER_init>:
 * [ARGS]:	const TIMER_ConfigType *a_configPtr : This Argument is a pointer to struct,
 * 			it will indicate the struct input for this function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER_init(const TIMER_ConfigType *a_configPtr)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	28 97       	sbiw	r28, 0x08	; 8
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
	/* Switching for each TIMER exist */
	switch(a_configPtr->timer)
    2b38:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3c:	80 81       	ld	r24, Z
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	38 87       	std	Y+8, r19	; 0x08
    2b44:	2f 83       	std	Y+7, r18	; 0x07
    2b46:	8f 81       	ldd	r24, Y+7	; 0x07
    2b48:	98 85       	ldd	r25, Y+8	; 0x08
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <TIMER_init+0x32>
    2b50:	76 c0       	rjmp	.+236    	; 0x2c3e <TIMER_init+0x11e>
    2b52:	2f 81       	ldd	r18, Y+7	; 0x07
    2b54:	38 85       	ldd	r19, Y+8	; 0x08
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <TIMER_init+0x3e>
    2b5c:	08 c1       	rjmp	.+528    	; 0x2d6e <TIMER_init+0x24e>
    2b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b60:	98 85       	ldd	r25, Y+8	; 0x08
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <TIMER_init+0x48>
    2b66:	6c c1       	rjmp	.+728    	; 0x2e40 <TIMER_init+0x320>
	{
	case TIMER0 :
		/* Force Output Compare bit (FOC0) */
		TCCR0 |= (1<<FOC0);
    2b68:	a3 e5       	ldi	r26, 0x53	; 83
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e3 e5       	ldi	r30, 0x53	; 83
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	80 68       	ori	r24, 0x80	; 128
    2b74:	8c 93       	st	X, r24

		/* WaveForm Generation Mode (WGM00, WGM01) */
		TCCR0 = (TCCR0 & 0xBF) | (((a_configPtr->mode0) & 0x01) << 6);
    2b76:	a3 e5       	ldi	r26, 0x53	; 83
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	e3 e5       	ldi	r30, 0x53	; 83
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	28 2f       	mov	r18, r24
    2b82:	2f 7b       	andi	r18, 0xBF	; 191
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	81 81       	ldd	r24, Z+1	; 0x01
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	81 70       	andi	r24, 0x01	; 1
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	00 24       	eor	r0, r0
    2b94:	96 95       	lsr	r25
    2b96:	87 95       	ror	r24
    2b98:	07 94       	ror	r0
    2b9a:	96 95       	lsr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	07 94       	ror	r0
    2ba0:	98 2f       	mov	r25, r24
    2ba2:	80 2d       	mov	r24, r0
    2ba4:	82 2b       	or	r24, r18
    2ba6:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF7) | (((a_configPtr->mode0) & 0x02) << 3);
    2ba8:	a3 e5       	ldi	r26, 0x53	; 83
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e3 e5       	ldi	r30, 0x53	; 83
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	27 7f       	andi	r18, 0xF7	; 247
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	81 81       	ldd	r24, Z+1	; 0x01
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	82 70       	andi	r24, 0x02	; 2
    2bc2:	90 70       	andi	r25, 0x00	; 0
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	82 2b       	or	r24, r18
    2bd2:	8c 93       	st	X, r24

		/* Clock Select bits (CS02,CS01,CS00) */
		TCCR0 = (TCCR0 & 0xF8) | (a_configPtr->prescalar0);
    2bd4:	a3 e5       	ldi	r26, 0x53	; 83
    2bd6:	b0 e0       	ldi	r27, 0x00	; 0
    2bd8:	e3 e5       	ldi	r30, 0x53	; 83
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	98 2f       	mov	r25, r24
    2be0:	98 7f       	andi	r25, 0xF8	; 248
    2be2:	e9 81       	ldd	r30, Y+1	; 0x01
    2be4:	fa 81       	ldd	r31, Y+2	; 0x02
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	89 2b       	or	r24, r25
    2bea:	8c 93       	st	X, r24

		/* Set the initial value of timer here */
		TCNT0 = (a_configPtr->initial_value);
    2bec:	a2 e5       	ldi	r26, 0x52	; 82
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf4:	80 85       	ldd	r24, Z+8	; 0x08
    2bf6:	91 85       	ldd	r25, Z+9	; 0x09
    2bf8:	8c 93       	st	X, r24

		/* Set the compare value of timer here */
		OCR0 = (a_configPtr->compare_value);
    2bfa:	ac e5       	ldi	r26, 0x5C	; 92
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2c00:	fa 81       	ldd	r31, Y+2	; 0x02
    2c02:	82 85       	ldd	r24, Z+10	; 0x0a
    2c04:	93 85       	ldd	r25, Z+11	; 0x0b
    2c06:	8c 93       	st	X, r24

		/* Module interrupt enable select (CompareMatch or OverFlow) */
		if((a_configPtr->mode0) == CTC_T0)
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	81 81       	ldd	r24, Z+1	; 0x01
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	41 f4       	brne	.+16     	; 0x2c22 <TIMER_init+0x102>
		{
			TIMSK |= (1<<OCIE0);
    2c12:	a9 e5       	ldi	r26, 0x59	; 89
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e9 e5       	ldi	r30, 0x59	; 89
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	82 60       	ori	r24, 0x02	; 2
    2c1e:	8c 93       	st	X, r24
    2c20:	0f c1       	rjmp	.+542    	; 0x2e40 <TIMER_init+0x320>
		}
		else if((a_configPtr->mode0) == NORMAL_T0)
    2c22:	e9 81       	ldd	r30, Y+1	; 0x01
    2c24:	fa 81       	ldd	r31, Y+2	; 0x02
    2c26:	81 81       	ldd	r24, Z+1	; 0x01
    2c28:	88 23       	and	r24, r24
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <TIMER_init+0x10e>
    2c2c:	09 c1       	rjmp	.+530    	; 0x2e40 <TIMER_init+0x320>
		{
			TIMSK |= (1<<TOIE0);
    2c2e:	a9 e5       	ldi	r26, 0x59	; 89
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	e9 e5       	ldi	r30, 0x59	; 89
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	81 60       	ori	r24, 0x01	; 1
    2c3a:	8c 93       	st	X, r24
    2c3c:	01 c1       	rjmp	.+514    	; 0x2e40 <TIMER_init+0x320>
		}
		break;
/*******************************************************************************************/
	case TIMER1 :
		/* Set the initial value of timer in TCNT1 register */
		TCNT1 = (a_configPtr->initial_value);
    2c3e:	ac e4       	ldi	r26, 0x4C	; 76
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e9 81       	ldd	r30, Y+1	; 0x01
    2c44:	fa 81       	ldd	r31, Y+2	; 0x02
    2c46:	80 85       	ldd	r24, Z+8	; 0x08
    2c48:	91 85       	ldd	r25, Z+9	; 0x09
    2c4a:	11 96       	adiw	r26, 0x01	; 1
    2c4c:	9c 93       	st	X, r25
    2c4e:	8e 93       	st	-X, r24

		/* Force Output Compare bit (FOC1A,FOC1B)
		 * Set the compare value of timer in OCR1A and OCR1B */
		switch(a_configPtr->channel1)
    2c50:	e9 81       	ldd	r30, Y+1	; 0x01
    2c52:	fa 81       	ldd	r31, Y+2	; 0x02
    2c54:	84 81       	ldd	r24, Z+4	; 0x04
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	3e 83       	std	Y+6, r19	; 0x06
    2c5c:	2d 83       	std	Y+5, r18	; 0x05
    2c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c60:	9e 81       	ldd	r25, Y+6	; 0x06
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	31 f0       	breq	.+12     	; 0x2c72 <TIMER_init+0x152>
    2c66:	2d 81       	ldd	r18, Y+5	; 0x05
    2c68:	3e 81       	ldd	r19, Y+6	; 0x06
    2c6a:	21 30       	cpi	r18, 0x01	; 1
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	91 f0       	breq	.+36     	; 0x2c94 <TIMER_init+0x174>
    2c70:	21 c0       	rjmp	.+66     	; 0x2cb4 <TIMER_init+0x194>
		{
		case CHANNEL_A :
			TCCR1A |= (1<<FOC1A);
    2c72:	af e4       	ldi	r26, 0x4F	; 79
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	ef e4       	ldi	r30, 0x4F	; 79
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 60       	ori	r24, 0x08	; 8
    2c7e:	8c 93       	st	X, r24
			OCR1A = (a_configPtr->compare_value);
    2c80:	aa e4       	ldi	r26, 0x4A	; 74
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e9 81       	ldd	r30, Y+1	; 0x01
    2c86:	fa 81       	ldd	r31, Y+2	; 0x02
    2c88:	82 85       	ldd	r24, Z+10	; 0x0a
    2c8a:	93 85       	ldd	r25, Z+11	; 0x0b
    2c8c:	11 96       	adiw	r26, 0x01	; 1
    2c8e:	9c 93       	st	X, r25
    2c90:	8e 93       	st	-X, r24
    2c92:	10 c0       	rjmp	.+32     	; 0x2cb4 <TIMER_init+0x194>
			break;

		case CHANNEL_B :
			TCCR1A |= (1<<FOC1B);
    2c94:	af e4       	ldi	r26, 0x4F	; 79
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	ef e4       	ldi	r30, 0x4F	; 79
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	84 60       	ori	r24, 0x04	; 4
    2ca0:	8c 93       	st	X, r24
			OCR1B = (a_configPtr->compare_value);
    2ca2:	a8 e4       	ldi	r26, 0x48	; 72
    2ca4:	b0 e0       	ldi	r27, 0x00	; 0
    2ca6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca8:	fa 81       	ldd	r31, Y+2	; 0x02
    2caa:	82 85       	ldd	r24, Z+10	; 0x0a
    2cac:	93 85       	ldd	r25, Z+11	; 0x0b
    2cae:	11 96       	adiw	r26, 0x01	; 1
    2cb0:	9c 93       	st	X, r25
    2cb2:	8e 93       	st	-X, r24
			break;
		}

		/* Set the module interrupt bit according to the mode we are using */
		switch(a_configPtr->mode1)
    2cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb8:	83 81       	ldd	r24, Z+3	; 0x03
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	3c 83       	std	Y+4, r19	; 0x04
    2cc0:	2b 83       	std	Y+3, r18	; 0x03
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	f9 f0       	breq	.+62     	; 0x2d08 <TIMER_init+0x1e8>
    2cca:	2b 81       	ldd	r18, Y+3	; 0x03
    2ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    2cce:	24 30       	cpi	r18, 0x04	; 4
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	09 f5       	brne	.+66     	; 0x2d16 <TIMER_init+0x1f6>
		{
		case CTC_T1 :
			if((a_configPtr->channel1) == CHANNEL_A)
    2cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd8:	84 81       	ldd	r24, Z+4	; 0x04
    2cda:	88 23       	and	r24, r24
    2cdc:	41 f4       	brne	.+16     	; 0x2cee <TIMER_init+0x1ce>
			{
				TIMSK |= (1<<OCIE1A);
    2cde:	a9 e5       	ldi	r26, 0x59	; 89
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e9 e5       	ldi	r30, 0x59	; 89
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 61       	ori	r24, 0x10	; 16
    2cea:	8c 93       	st	X, r24
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <TIMER_init+0x1f6>
			}
			else if((a_configPtr->channel1) == CHANNEL_B)
    2cee:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf2:	84 81       	ldd	r24, Z+4	; 0x04
    2cf4:	81 30       	cpi	r24, 0x01	; 1
    2cf6:	79 f4       	brne	.+30     	; 0x2d16 <TIMER_init+0x1f6>
			{
				TIMSK |= (1<<OCIE1B);
    2cf8:	a9 e5       	ldi	r26, 0x59	; 89
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e9 e5       	ldi	r30, 0x59	; 89
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	88 60       	ori	r24, 0x08	; 8
    2d04:	8c 93       	st	X, r24
    2d06:	07 c0       	rjmp	.+14     	; 0x2d16 <TIMER_init+0x1f6>
			}
			break;

		case NORMAL_T1 :
			TIMSK |= (1<<TOIE1);
    2d08:	a9 e5       	ldi	r26, 0x59	; 89
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e9 e5       	ldi	r30, 0x59	; 89
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	84 60       	ori	r24, 0x04	; 4
    2d14:	8c 93       	st	X, r24
			break;
		}

		/* WaveForm Generation Mode (WGM10, WGM11) in TCCR1A & (WGM12,WGM13) in TCCR1B
		 * as it controls the mode we are using */
		TCCR1A = (TCCR1A & 0xFC) | ((a_configPtr->mode1) & 0x03);
    2d16:	af e4       	ldi	r26, 0x4F	; 79
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ef e4       	ldi	r30, 0x4F	; 79
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	98 2f       	mov	r25, r24
    2d22:	9c 7f       	andi	r25, 0xFC	; 252
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	83 81       	ldd	r24, Z+3	; 0x03
    2d2a:	83 70       	andi	r24, 0x03	; 3
    2d2c:	89 2b       	or	r24, r25
    2d2e:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xE7) | ( ((a_configPtr->mode1) & 0x0C) << 1 );
    2d30:	ae e4       	ldi	r26, 0x4E	; 78
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	ee e4       	ldi	r30, 0x4E	; 78
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	27 7e       	andi	r18, 0xE7	; 231
    2d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d40:	fa 81       	ldd	r31, Y+2	; 0x02
    2d42:	83 81       	ldd	r24, Z+3	; 0x03
    2d44:	88 2f       	mov	r24, r24
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	8c 70       	andi	r24, 0x0C	; 12
    2d4a:	90 70       	andi	r25, 0x00	; 0
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	82 2b       	or	r24, r18
    2d52:	8c 93       	st	X, r24

		/* Clock Select bits "Prescalar" (CS02,CS01,CS00) */
		TCCR1B = (TCCR1B & 0xF8) | (a_configPtr->prescalar1);
    2d54:	ae e4       	ldi	r26, 0x4E	; 78
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	ee e4       	ldi	r30, 0x4E	; 78
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	98 2f       	mov	r25, r24
    2d60:	98 7f       	andi	r25, 0xF8	; 248
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	85 81       	ldd	r24, Z+5	; 0x05
    2d68:	89 2b       	or	r24, r25
    2d6a:	8c 93       	st	X, r24
    2d6c:	69 c0       	rjmp	.+210    	; 0x2e40 <TIMER_init+0x320>
		break;
/*******************************************************************************************/
		case TIMER2 :
			/* Force Output Compare bit (FOC0) */
			TCCR2 |= (1<<FOC0);
    2d6e:	a5 e4       	ldi	r26, 0x45	; 69
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e5 e4       	ldi	r30, 0x45	; 69
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	80 68       	ori	r24, 0x80	; 128
    2d7a:	8c 93       	st	X, r24

			/* WaveForm Generation Mode (WGM00, WGM01) */
			TCCR2 = (TCCR2 & 0xBF) | (((a_configPtr->mode2) & 0x01) << 6);
    2d7c:	a5 e4       	ldi	r26, 0x45	; 69
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e5 e4       	ldi	r30, 0x45	; 69
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	28 2f       	mov	r18, r24
    2d88:	2f 7b       	andi	r18, 0xBF	; 191
    2d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d8e:	86 81       	ldd	r24, Z+6	; 0x06
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	81 70       	andi	r24, 0x01	; 1
    2d96:	90 70       	andi	r25, 0x00	; 0
    2d98:	00 24       	eor	r0, r0
    2d9a:	96 95       	lsr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	07 94       	ror	r0
    2da0:	96 95       	lsr	r25
    2da2:	87 95       	ror	r24
    2da4:	07 94       	ror	r0
    2da6:	98 2f       	mov	r25, r24
    2da8:	80 2d       	mov	r24, r0
    2daa:	82 2b       	or	r24, r18
    2dac:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF7) | (((a_configPtr->mode2) & 0x02) << 3);
    2dae:	a5 e4       	ldi	r26, 0x45	; 69
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e5 e4       	ldi	r30, 0x45	; 69
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	28 2f       	mov	r18, r24
    2dba:	27 7f       	andi	r18, 0xF7	; 247
    2dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc0:	86 81       	ldd	r24, Z+6	; 0x06
    2dc2:	88 2f       	mov	r24, r24
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	82 70       	andi	r24, 0x02	; 2
    2dc8:	90 70       	andi	r25, 0x00	; 0
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	82 2b       	or	r24, r18
    2dd8:	8c 93       	st	X, r24

			/* Clock Select bits (CS02,CS01,CS00) */
			TCCR2 = (TCCR0 & 0xF8) | (a_configPtr->prescalar2);
    2dda:	a5 e4       	ldi	r26, 0x45	; 69
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e3 e5       	ldi	r30, 0x53	; 83
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	98 2f       	mov	r25, r24
    2de6:	98 7f       	andi	r25, 0xF8	; 248
    2de8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dea:	fa 81       	ldd	r31, Y+2	; 0x02
    2dec:	87 81       	ldd	r24, Z+7	; 0x07
    2dee:	89 2b       	or	r24, r25
    2df0:	8c 93       	st	X, r24

			/* Set the initial value of timer here */
			TCNT2 = (a_configPtr->initial_value);
    2df2:	a4 e4       	ldi	r26, 0x44	; 68
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e9 81       	ldd	r30, Y+1	; 0x01
    2df8:	fa 81       	ldd	r31, Y+2	; 0x02
    2dfa:	80 85       	ldd	r24, Z+8	; 0x08
    2dfc:	91 85       	ldd	r25, Z+9	; 0x09
    2dfe:	8c 93       	st	X, r24

			/* Set the compare value of timer here */
			OCR2 = (a_configPtr->compare_value);
    2e00:	a3 e4       	ldi	r26, 0x43	; 67
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e9 81       	ldd	r30, Y+1	; 0x01
    2e06:	fa 81       	ldd	r31, Y+2	; 0x02
    2e08:	82 85       	ldd	r24, Z+10	; 0x0a
    2e0a:	93 85       	ldd	r25, Z+11	; 0x0b
    2e0c:	8c 93       	st	X, r24

			if((a_configPtr->mode2) == CTC_T2)
    2e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e10:	fa 81       	ldd	r31, Y+2	; 0x02
    2e12:	86 81       	ldd	r24, Z+6	; 0x06
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	41 f4       	brne	.+16     	; 0x2e28 <TIMER_init+0x308>
			{
				TIMSK |= (1<<OCIE2);
    2e18:	a9 e5       	ldi	r26, 0x59	; 89
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e9 e5       	ldi	r30, 0x59	; 89
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	80 68       	ori	r24, 0x80	; 128
    2e24:	8c 93       	st	X, r24
    2e26:	0c c0       	rjmp	.+24     	; 0x2e40 <TIMER_init+0x320>
			}
			else if(((a_configPtr->mode2) == NORMAL_T2))
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	86 81       	ldd	r24, Z+6	; 0x06
    2e2e:	88 23       	and	r24, r24
    2e30:	39 f4       	brne	.+14     	; 0x2e40 <TIMER_init+0x320>
			{
				TIMSK |= (1<<TOIE2);
    2e32:	a9 e5       	ldi	r26, 0x59	; 89
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e9 e5       	ldi	r30, 0x59	; 89
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	80 64       	ori	r24, 0x40	; 64
    2e3e:	8c 93       	st	X, r24
			}
			break;
	}
	/* Set the global interrupt bit */
	SREG |= (1<<7);
    2e40:	af e5       	ldi	r26, 0x5F	; 95
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	ef e5       	ldi	r30, 0x5F	; 95
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	80 68       	ori	r24, 0x80	; 128
    2e4c:	8c 93       	st	X, r24
}
    2e4e:	28 96       	adiw	r28, 0x08	; 8
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <TIMER0_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER0_setCallBack(void(*a_ptr)(uint16))
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <TIMER0_setCallBack+0x6>
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_callBackPtr = a_ptr;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	90 93 92 00 	sts	0x0092, r25
    2e76:	80 93 91 00 	sts	0x0091, r24
}
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <TIMER1_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_setCallBack(void(*a_ptr)(uint16))
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <TIMER1_setCallBack+0x6>
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER1_callBackPtr = a_ptr;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	90 93 94 00 	sts	0x0094, r25
    2e9a:	80 93 93 00 	sts	0x0093, r24
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <TIMER2_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER2_setCallBack(void(*a_ptr)(uint16))
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <TIMER2_setCallBack+0x6>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER2_callBackPtr = a_ptr;
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eba:	90 93 96 00 	sts	0x0096, r25
    2ebe:	80 93 95 00 	sts	0x0095, r24
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <TIMER0_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER0_deInit(void)
{
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER0 registers */
	TCCR0 = 0;
    2ed4:	e3 e5       	ldi	r30, 0x53	; 83
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	10 82       	st	Z, r1
	TCNT0 = 0;
    2eda:	e2 e5       	ldi	r30, 0x52	; 82
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	10 82       	st	Z, r1
	OCR0 = 0;
    2ee0:	ec e5       	ldi	r30, 0x5C	; 92
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE,TOIE0) */
	TIMSK &= ~(0x03);
    2ee6:	a9 e5       	ldi	r26, 0x59	; 89
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e9 e5       	ldi	r30, 0x59	; 89
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	8c 7f       	andi	r24, 0xFC	; 252
    2ef2:	8c 93       	st	X, r24
}
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <TIMER1_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER1_deInit(void)
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER1 registers */
	TCCR1A = 0;
    2f02:	ef e4       	ldi	r30, 0x4F	; 79
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	10 82       	st	Z, r1
	TCCR1B = 0;
    2f08:	ee e4       	ldi	r30, 0x4E	; 78
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	10 82       	st	Z, r1
	TCNT1 = 0;
    2f0e:	ec e4       	ldi	r30, 0x4C	; 76
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	11 82       	std	Z+1, r1	; 0x01
    2f14:	10 82       	st	Z, r1
	OCR1A = 0;
    2f16:	ea e4       	ldi	r30, 0x4A	; 74
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	11 82       	std	Z+1, r1	; 0x01
    2f1c:	10 82       	st	Z, r1
	OCR1B = 0;
    2f1e:	e8 e4       	ldi	r30, 0x48	; 72
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	11 82       	std	Z+1, r1	; 0x01
    2f24:	10 82       	st	Z, r1
	ICR1 = 0;
    2f26:	e6 e4       	ldi	r30, 0x46	; 70
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	11 82       	std	Z+1, r1	; 0x01
    2f2c:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE1A,OCIE1B,TOIE1) */
	TIMSK &= ~(0x3C);
    2f2e:	a9 e5       	ldi	r26, 0x59	; 89
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e9 e5       	ldi	r30, 0x59	; 89
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	80 81       	ld	r24, Z
    2f38:	83 7c       	andi	r24, 0xC3	; 195
    2f3a:	8c 93       	st	X, r24
}
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <TIMER2_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER2_deInit(void)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER2 registers */
	TCCR2 = 0;
    2f4a:	e5 e4       	ldi	r30, 0x45	; 69
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	10 82       	st	Z, r1
	TCNT2 = 0;
    2f50:	e4 e4       	ldi	r30, 0x44	; 68
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	10 82       	st	Z, r1
	OCR2 = 0;
    2f56:	e3 e4       	ldi	r30, 0x43	; 67
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE2,TOIE2) */
	TIMSK &= ~(0xC0);
    2f5c:	a9 e5       	ldi	r26, 0x59	; 89
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e9 e5       	ldi	r30, 0x59	; 89
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8f 73       	andi	r24, 0x3F	; 63
    2f68:	8c 93       	st	X, r24
}
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <__vector_9>:
 * [ISR NAME]:		TIMER0_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER0
 ----------------------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
    2f70:	1f 92       	push	r1
    2f72:	0f 92       	push	r0
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	0f 92       	push	r0
    2f78:	11 24       	eor	r1, r1
    2f7a:	2f 93       	push	r18
    2f7c:	3f 93       	push	r19
    2f7e:	4f 93       	push	r20
    2f80:	5f 93       	push	r21
    2f82:	6f 93       	push	r22
    2f84:	7f 93       	push	r23
    2f86:	8f 93       	push	r24
    2f88:	9f 93       	push	r25
    2f8a:	af 93       	push	r26
    2f8c:	bf 93       	push	r27
    2f8e:	ef 93       	push	r30
    2f90:	ff 93       	push	r31
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2f9a:	80 91 91 00 	lds	r24, 0x0091
    2f9e:	90 91 92 00 	lds	r25, 0x0092
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	49 f0       	breq	.+18     	; 0x2fb8 <__vector_9+0x48>
	{
		(*g_TIMER0_callBackPtr)(g_msec0);
    2fa6:	e0 91 91 00 	lds	r30, 0x0091
    2faa:	f0 91 92 00 	lds	r31, 0x0092
    2fae:	80 91 9b 00 	lds	r24, 0x009B
    2fb2:	90 91 9c 00 	lds	r25, 0x009C
    2fb6:	09 95       	icall
	}
}
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	ff 91       	pop	r31
    2fbe:	ef 91       	pop	r30
    2fc0:	bf 91       	pop	r27
    2fc2:	af 91       	pop	r26
    2fc4:	9f 91       	pop	r25
    2fc6:	8f 91       	pop	r24
    2fc8:	7f 91       	pop	r23
    2fca:	6f 91       	pop	r22
    2fcc:	5f 91       	pop	r21
    2fce:	4f 91       	pop	r20
    2fd0:	3f 91       	pop	r19
    2fd2:	2f 91       	pop	r18
    2fd4:	0f 90       	pop	r0
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	0f 90       	pop	r0
    2fda:	1f 90       	pop	r1
    2fdc:	18 95       	reti

00002fde <__vector_19>:
 * [ISR NAME]:		TIMER0_COMP_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER0
 ----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMP_vect)
{
    2fde:	1f 92       	push	r1
    2fe0:	0f 92       	push	r0
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	0f 92       	push	r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	2f 93       	push	r18
    2fea:	3f 93       	push	r19
    2fec:	4f 93       	push	r20
    2fee:	5f 93       	push	r21
    2ff0:	6f 93       	push	r22
    2ff2:	7f 93       	push	r23
    2ff4:	8f 93       	push	r24
    2ff6:	9f 93       	push	r25
    2ff8:	af 93       	push	r26
    2ffa:	bf 93       	push	r27
    2ffc:	ef 93       	push	r30
    2ffe:	ff 93       	push	r31
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    3008:	80 91 91 00 	lds	r24, 0x0091
    300c:	90 91 92 00 	lds	r25, 0x0092
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	49 f0       	breq	.+18     	; 0x3026 <__vector_19+0x48>
	{
		(*g_TIMER0_callBackPtr)(g_msec0);
    3014:	e0 91 91 00 	lds	r30, 0x0091
    3018:	f0 91 92 00 	lds	r31, 0x0092
    301c:	80 91 9b 00 	lds	r24, 0x009B
    3020:	90 91 9c 00 	lds	r25, 0x009C
    3024:	09 95       	icall
	}
}
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	ff 91       	pop	r31
    302c:	ef 91       	pop	r30
    302e:	bf 91       	pop	r27
    3030:	af 91       	pop	r26
    3032:	9f 91       	pop	r25
    3034:	8f 91       	pop	r24
    3036:	7f 91       	pop	r23
    3038:	6f 91       	pop	r22
    303a:	5f 91       	pop	r21
    303c:	4f 91       	pop	r20
    303e:	3f 91       	pop	r19
    3040:	2f 91       	pop	r18
    3042:	0f 90       	pop	r0
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	0f 90       	pop	r0
    3048:	1f 90       	pop	r1
    304a:	18 95       	reti

0000304c <__vector_8>:
 * [ISR NAME]:		TIMER1_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER1
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
    304c:	1f 92       	push	r1
    304e:	0f 92       	push	r0
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	2f 93       	push	r18
    3058:	3f 93       	push	r19
    305a:	4f 93       	push	r20
    305c:	5f 93       	push	r21
    305e:	6f 93       	push	r22
    3060:	7f 93       	push	r23
    3062:	8f 93       	push	r24
    3064:	9f 93       	push	r25
    3066:	af 93       	push	r26
    3068:	bf 93       	push	r27
    306a:	ef 93       	push	r30
    306c:	ff 93       	push	r31
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    3076:	80 91 93 00 	lds	r24, 0x0093
    307a:	90 91 94 00 	lds	r25, 0x0094
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	49 f0       	breq	.+18     	; 0x3094 <__vector_8+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    3082:	e0 91 93 00 	lds	r30, 0x0093
    3086:	f0 91 94 00 	lds	r31, 0x0094
    308a:	80 91 9d 00 	lds	r24, 0x009D
    308e:	90 91 9e 00 	lds	r25, 0x009E
    3092:	09 95       	icall
	}
}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	ff 91       	pop	r31
    309a:	ef 91       	pop	r30
    309c:	bf 91       	pop	r27
    309e:	af 91       	pop	r26
    30a0:	9f 91       	pop	r25
    30a2:	8f 91       	pop	r24
    30a4:	7f 91       	pop	r23
    30a6:	6f 91       	pop	r22
    30a8:	5f 91       	pop	r21
    30aa:	4f 91       	pop	r20
    30ac:	3f 91       	pop	r19
    30ae:	2f 91       	pop	r18
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0f 90       	pop	r0
    30b6:	1f 90       	pop	r1
    30b8:	18 95       	reti

000030ba <__vector_6>:
 * [ISR NAME]:		TIMER1_COMPA_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER1 - Channel A
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPA_vect)
{
    30ba:	1f 92       	push	r1
    30bc:	0f 92       	push	r0
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	0f 92       	push	r0
    30c2:	11 24       	eor	r1, r1
    30c4:	2f 93       	push	r18
    30c6:	3f 93       	push	r19
    30c8:	4f 93       	push	r20
    30ca:	5f 93       	push	r21
    30cc:	6f 93       	push	r22
    30ce:	7f 93       	push	r23
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
    30d8:	ef 93       	push	r30
    30da:	ff 93       	push	r31
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    30e4:	80 91 93 00 	lds	r24, 0x0093
    30e8:	90 91 94 00 	lds	r25, 0x0094
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	49 f0       	breq	.+18     	; 0x3102 <__vector_6+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    30f0:	e0 91 93 00 	lds	r30, 0x0093
    30f4:	f0 91 94 00 	lds	r31, 0x0094
    30f8:	80 91 9d 00 	lds	r24, 0x009D
    30fc:	90 91 9e 00 	lds	r25, 0x009E
    3100:	09 95       	icall
	}
}
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	ff 91       	pop	r31
    3108:	ef 91       	pop	r30
    310a:	bf 91       	pop	r27
    310c:	af 91       	pop	r26
    310e:	9f 91       	pop	r25
    3110:	8f 91       	pop	r24
    3112:	7f 91       	pop	r23
    3114:	6f 91       	pop	r22
    3116:	5f 91       	pop	r21
    3118:	4f 91       	pop	r20
    311a:	3f 91       	pop	r19
    311c:	2f 91       	pop	r18
    311e:	0f 90       	pop	r0
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	0f 90       	pop	r0
    3124:	1f 90       	pop	r1
    3126:	18 95       	reti

00003128 <__vector_7>:
 * [ISR NAME]:		TIMER1_COMPB_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER1 - Channel B
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPB_vect)
{
    3128:	1f 92       	push	r1
    312a:	0f 92       	push	r0
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	0f 92       	push	r0
    3130:	11 24       	eor	r1, r1
    3132:	2f 93       	push	r18
    3134:	3f 93       	push	r19
    3136:	4f 93       	push	r20
    3138:	5f 93       	push	r21
    313a:	6f 93       	push	r22
    313c:	7f 93       	push	r23
    313e:	8f 93       	push	r24
    3140:	9f 93       	push	r25
    3142:	af 93       	push	r26
    3144:	bf 93       	push	r27
    3146:	ef 93       	push	r30
    3148:	ff 93       	push	r31
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    3152:	80 91 93 00 	lds	r24, 0x0093
    3156:	90 91 94 00 	lds	r25, 0x0094
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	49 f0       	breq	.+18     	; 0x3170 <__vector_7+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    315e:	e0 91 93 00 	lds	r30, 0x0093
    3162:	f0 91 94 00 	lds	r31, 0x0094
    3166:	80 91 9d 00 	lds	r24, 0x009D
    316a:	90 91 9e 00 	lds	r25, 0x009E
    316e:	09 95       	icall
	}
}
    3170:	cf 91       	pop	r28
    3172:	df 91       	pop	r29
    3174:	ff 91       	pop	r31
    3176:	ef 91       	pop	r30
    3178:	bf 91       	pop	r27
    317a:	af 91       	pop	r26
    317c:	9f 91       	pop	r25
    317e:	8f 91       	pop	r24
    3180:	7f 91       	pop	r23
    3182:	6f 91       	pop	r22
    3184:	5f 91       	pop	r21
    3186:	4f 91       	pop	r20
    3188:	3f 91       	pop	r19
    318a:	2f 91       	pop	r18
    318c:	0f 90       	pop	r0
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	0f 90       	pop	r0
    3192:	1f 90       	pop	r1
    3194:	18 95       	reti

00003196 <__vector_4>:
 * [ISR NAME]:		TIMER2_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER2
 ----------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect)
{
    3196:	1f 92       	push	r1
    3198:	0f 92       	push	r0
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	0f 92       	push	r0
    319e:	11 24       	eor	r1, r1
    31a0:	2f 93       	push	r18
    31a2:	3f 93       	push	r19
    31a4:	4f 93       	push	r20
    31a6:	5f 93       	push	r21
    31a8:	6f 93       	push	r22
    31aa:	7f 93       	push	r23
    31ac:	8f 93       	push	r24
    31ae:	9f 93       	push	r25
    31b0:	af 93       	push	r26
    31b2:	bf 93       	push	r27
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    31c0:	80 91 95 00 	lds	r24, 0x0095
    31c4:	90 91 96 00 	lds	r25, 0x0096
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	49 f0       	breq	.+18     	; 0x31de <__vector_4+0x48>
	{
		(*g_TIMER2_callBackPtr)(g_msec2);
    31cc:	e0 91 95 00 	lds	r30, 0x0095
    31d0:	f0 91 96 00 	lds	r31, 0x0096
    31d4:	80 91 9f 00 	lds	r24, 0x009F
    31d8:	90 91 a0 00 	lds	r25, 0x00A0
    31dc:	09 95       	icall
	}
}
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	ff 91       	pop	r31
    31e4:	ef 91       	pop	r30
    31e6:	bf 91       	pop	r27
    31e8:	af 91       	pop	r26
    31ea:	9f 91       	pop	r25
    31ec:	8f 91       	pop	r24
    31ee:	7f 91       	pop	r23
    31f0:	6f 91       	pop	r22
    31f2:	5f 91       	pop	r21
    31f4:	4f 91       	pop	r20
    31f6:	3f 91       	pop	r19
    31f8:	2f 91       	pop	r18
    31fa:	0f 90       	pop	r0
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	0f 90       	pop	r0
    3200:	1f 90       	pop	r1
    3202:	18 95       	reti

00003204 <__vector_3>:
 * [ISR NAME]:		TIMER2_COMP_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER2
 ----------------------------------------------------------------------------------------*/
ISR(TIMER2_COMP_vect)
{
    3204:	1f 92       	push	r1
    3206:	0f 92       	push	r0
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	0f 92       	push	r0
    320c:	11 24       	eor	r1, r1
    320e:	2f 93       	push	r18
    3210:	3f 93       	push	r19
    3212:	4f 93       	push	r20
    3214:	5f 93       	push	r21
    3216:	6f 93       	push	r22
    3218:	7f 93       	push	r23
    321a:	8f 93       	push	r24
    321c:	9f 93       	push	r25
    321e:	af 93       	push	r26
    3220:	bf 93       	push	r27
    3222:	ef 93       	push	r30
    3224:	ff 93       	push	r31
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    322e:	80 91 95 00 	lds	r24, 0x0095
    3232:	90 91 96 00 	lds	r25, 0x0096
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	49 f0       	breq	.+18     	; 0x324c <__vector_3+0x48>
	{
		(*g_TIMER2_callBackPtr)(g_msec2);
    323a:	e0 91 95 00 	lds	r30, 0x0095
    323e:	f0 91 96 00 	lds	r31, 0x0096
    3242:	80 91 9f 00 	lds	r24, 0x009F
    3246:	90 91 a0 00 	lds	r25, 0x00A0
    324a:	09 95       	icall
	}
}
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	ff 91       	pop	r31
    3252:	ef 91       	pop	r30
    3254:	bf 91       	pop	r27
    3256:	af 91       	pop	r26
    3258:	9f 91       	pop	r25
    325a:	8f 91       	pop	r24
    325c:	7f 91       	pop	r23
    325e:	6f 91       	pop	r22
    3260:	5f 91       	pop	r21
    3262:	4f 91       	pop	r20
    3264:	3f 91       	pop	r19
    3266:	2f 91       	pop	r18
    3268:	0f 90       	pop	r0
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	0f 90       	pop	r0
    326e:	1f 90       	pop	r1
    3270:	18 95       	reti

00003272 <TWI_init>:
 * [ARGS]:		const TWI_ConfigType *a_configPtr : This Argument is a pointer to struct,
 * 				it will indicate the struct input for the function
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TWI_init(const TWI_ConfigType *a_configPtr)
{
    3272:	cf 92       	push	r12
    3274:	df 92       	push	r13
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <TWI_init+0x12>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
	 * To get the TWI bit rate, apply this equation on TWBR register:
	 * F_SCL = F_CPU / (16 + 2(TWBR) * 4^TWPS
	 * then,
	 * TWBR = ( ((F_CPU/F_SCL) - 16) / (2 * (4^TWPS)) )
	 */
	TWBR = ( ((F_CPU/(a_configPtr->modeFreq)) - 16) / (2 * (4^(a_configPtr->prescalar))) );
    328c:	cc 24       	eor	r12, r12
    328e:	dd 24       	eor	r13, r13
    3290:	68 94       	set
    3292:	c5 f8       	bld	r12, 5
    3294:	e9 81       	ldd	r30, Y+1	; 0x01
    3296:	fa 81       	ldd	r31, Y+2	; 0x02
    3298:	20 81       	ld	r18, Z
    329a:	31 81       	ldd	r19, Z+1	; 0x01
    329c:	42 81       	ldd	r20, Z+2	; 0x02
    329e:	53 81       	ldd	r21, Z+3	; 0x03
    32a0:	80 e4       	ldi	r24, 0x40	; 64
    32a2:	92 e4       	ldi	r25, 0x42	; 66
    32a4:	af e0       	ldi	r26, 0x0F	; 15
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    32b0:	da 01       	movw	r26, r20
    32b2:	c9 01       	movw	r24, r18
    32b4:	0f 2e       	mov	r0, r31
    32b6:	f0 ef       	ldi	r31, 0xF0	; 240
    32b8:	ef 2e       	mov	r14, r31
    32ba:	ff ef       	ldi	r31, 0xFF	; 255
    32bc:	ff 2e       	mov	r15, r31
    32be:	ff ef       	ldi	r31, 0xFF	; 255
    32c0:	0f 2f       	mov	r16, r31
    32c2:	ff ef       	ldi	r31, 0xFF	; 255
    32c4:	1f 2f       	mov	r17, r31
    32c6:	f0 2d       	mov	r31, r0
    32c8:	e8 0e       	add	r14, r24
    32ca:	f9 1e       	adc	r15, r25
    32cc:	0a 1f       	adc	r16, r26
    32ce:	1b 1f       	adc	r17, r27
    32d0:	e9 81       	ldd	r30, Y+1	; 0x01
    32d2:	fa 81       	ldd	r31, Y+2	; 0x02
    32d4:	94 81       	ldd	r25, Z+4	; 0x04
    32d6:	84 e0       	ldi	r24, 0x04	; 4
    32d8:	89 27       	eor	r24, r25
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	88 0f       	add	r24, r24
    32e0:	99 1f       	adc	r25, r25
    32e2:	9c 01       	movw	r18, r24
    32e4:	44 27       	eor	r20, r20
    32e6:	37 fd       	sbrc	r19, 7
    32e8:	40 95       	com	r20
    32ea:	54 2f       	mov	r21, r20
    32ec:	c8 01       	movw	r24, r16
    32ee:	b7 01       	movw	r22, r14
    32f0:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    32f4:	da 01       	movw	r26, r20
    32f6:	c9 01       	movw	r24, r18
    32f8:	f6 01       	movw	r30, r12
    32fa:	80 83       	st	Z, r24

	/* Set the prescalar in TWSR register */
	TWSR = (TWSR & 0xFC) | ((a_configPtr->prescalar) & 0x03);
    32fc:	a1 e2       	ldi	r26, 0x21	; 33
    32fe:	b0 e0       	ldi	r27, 0x00	; 0
    3300:	e1 e2       	ldi	r30, 0x21	; 33
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	80 81       	ld	r24, Z
    3306:	98 2f       	mov	r25, r24
    3308:	9c 7f       	andi	r25, 0xFC	; 252
    330a:	e9 81       	ldd	r30, Y+1	; 0x01
    330c:	fa 81       	ldd	r31, Y+2	; 0x02
    330e:	84 81       	ldd	r24, Z+4	; 0x04
    3310:	83 70       	andi	r24, 0x03	; 3
    3312:	89 2b       	or	r24, r25
    3314:	8c 93       	st	X, r24

	TWCR = (1<<TWEN);	/* Enable TWI module */
    3316:	e6 e5       	ldi	r30, 0x56	; 86
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	84 e0       	ldi	r24, 0x04	; 4
    331c:	80 83       	st	Z, r24

	TWAR = (a_configPtr->address); /* Give the user an address to be able to be called if it's initiated as a slave any time */
    331e:	a2 e2       	ldi	r26, 0x22	; 34
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	e9 81       	ldd	r30, Y+1	; 0x01
    3324:	fa 81       	ldd	r31, Y+2	; 0x02
    3326:	85 81       	ldd	r24, Z+5	; 0x05
    3328:	8c 93       	st	X, r24
	/* <<1 test */
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	df 90       	pop	r13
    333c:	cf 90       	pop	r12
    333e:	08 95       	ret

00003340 <TWI_start>:
 * [DESCRIPTION]:	This Function is used to send the start bit to start the TWI operation
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TWI_start(void)
{
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1. Clear TWI interrupt flag at first by set a 1 in it
	 * 2. Set TWI START condition bit
	 * 3. Set the TWI enable bit
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    3348:	e6 e5       	ldi	r30, 0x56	; 86
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	84 ea       	ldi	r24, 0xA4	; 164
    334e:	80 83       	st	Z, r24

	/* Wait until the Flag is set to 1 as it indicates the the START operation is finished */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    3350:	e6 e5       	ldi	r30, 0x56	; 86
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	88 23       	and	r24, r24
    3358:	dc f7       	brge	.-10     	; 0x3350 <TWI_start+0x10>
}
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <TWI_stop>:
 * [DESCRIPTION]:	This Function is used to send the stop bit to finish the TWI operation
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TWI_stop(void)
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1. Clear TWI interrupt flag at first by set a 1 in it
	 * 2. Set TWI STOP condition bit
	 * 3. Set the TWI enable bit
	 */
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    3368:	e6 e5       	ldi	r30, 0x56	; 86
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	84 e9       	ldi	r24, 0x94	; 148
    336e:	80 83       	st	Z, r24
}
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <TWI_writeByte>:
 * [DESCRIPTION]:	This Function is used to send the data bits to the SDA bus
 * [ARGS]:		uint8 data: This Argument indicates the data sent to the SDA bus
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TWI_writeByte(uint8 data)
{
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	0f 92       	push	r0
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    3380:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    3382:	e3 e2       	ldi	r30, 0x23	; 35
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	80 83       	st	Z, r24

	/*
	 * 1. Clear TWI interrupt flag at first by set a 1 in it
	 * 2. Set the TWI enable bit
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    338a:	e6 e5       	ldi	r30, 0x56	; 86
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	84 e8       	ldi	r24, 0x84	; 132
    3390:	80 83       	st	Z, r24

	/* Wait until the Flag is set to 1 as it indicates that the WRITE operation is finished */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    3392:	e6 e5       	ldi	r30, 0x56	; 86
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	88 23       	and	r24, r24
    339a:	dc f7       	brge	.-10     	; 0x3392 <TWI_writeByte+0x1c>
}
    339c:	0f 90       	pop	r0
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	08 95       	ret

000033a4 <TWI_readWithACK>:
 * 					an ACK bit after finishing this process
 * [ARGS]:		No Arguments
 * [RETURNS]:	This Return indicates the data read from TWI data register
 ----------------------------------------------------------------------------------------*/
uint8 TWI_readWithACK(void)
{
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
	 * 1. Clear TWI interrupt flag at first by set a 1 in it
	 * 2. Set TWI enable Acknowledge bit that will enable TWI to send ACK after reading
	 * 	  or receiving data
	 * 3. Set the TWI enable bit
	 */
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    33ac:	e6 e5       	ldi	r30, 0x56	; 86
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	84 ec       	ldi	r24, 0xC4	; 196
    33b2:	80 83       	st	Z, r24

	/* Wait until the Flag is set to 1 as it indicates that the RECEIVING operation is completed */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    33b4:	e6 e5       	ldi	r30, 0x56	; 86
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	88 23       	and	r24, r24
    33bc:	dc f7       	brge	.-10     	; 0x33b4 <TWI_readWithACK+0x10>

	return TWDR;
    33be:	e3 e2       	ldi	r30, 0x23	; 35
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <TWI_readWithNACK>:
 * 					communication
 * [ARGS]:		No Arguments
 * [RETURNS]:	This Return indicates the data read from TWI data register
 ----------------------------------------------------------------------------------------*/
uint8 TWI_readWithNACK(void)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
	 * 1. Clear TWI interrupt flag at first by set a 1 in it
	 * 2. Set TWI enable Acknowledge bit that will enable TWI to send ACK after reading
	 * 	  or receiving data
	 * 3. Set the TWI enable bit
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    33d2:	e6 e5       	ldi	r30, 0x56	; 86
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	84 e8       	ldi	r24, 0x84	; 132
    33d8:	80 83       	st	Z, r24

	/* Wait until the Flag is set to 1 as it indicates that the RECEIVING operation is completed */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    33da:	e6 e5       	ldi	r30, 0x56	; 86
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	88 23       	and	r24, r24
    33e2:	dc f7       	brge	.-10     	; 0x33da <TWI_readWithNACK+0x10>

	return TWDR;
    33e4:	e3 e2       	ldi	r30, 0x23	; 35
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
}
    33ea:	cf 91       	pop	r28
    33ec:	df 91       	pop	r29
    33ee:	08 95       	ret

000033f0 <TWI_getStatus>:
 * 					is described in the DATASHEET
 * [ARGS]:		No Arguments
 * [RETURNS]:	This Return indicates the status code read from TWI data register
 ----------------------------------------------------------------------------------------*/
uint8 TWI_getStatus(void)
{
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	0f 92       	push	r0
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* Mask the status register TWSR with 0b11111000 to eliminate the first 3 bits as we don't need them */
	status = TWSR & 0xF8;
    33fa:	e1 e2       	ldi	r30, 0x21	; 33
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	88 7f       	andi	r24, 0xF8	; 248
    3402:	89 83       	std	Y+1, r24	; 0x01

	return status;
    3404:	89 81       	ldd	r24, Y+1	; 0x01
}
    3406:	0f 90       	pop	r0
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <UART_init>:
 * 												variables for UART module.
 * 				uint16 baud_rate: This Argument shall indicate the baud rate of UART module.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_init(UART_configType *configPtr)
{
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	00 d0       	rcall	.+0      	; 0x3414 <UART_init+0x6>
    3414:	00 d0       	rcall	.+0      	; 0x3416 <UART_init+0x8>
    3416:	00 d0       	rcall	.+0      	; 0x3418 <UART_init+0xa>
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
	uint32 ubrr_value = 0;
    3420:	19 82       	std	Y+1, r1	; 0x01
    3422:	1a 82       	std	Y+2, r1	; 0x02
    3424:	1b 82       	std	Y+3, r1	; 0x03
    3426:	1c 82       	std	Y+4, r1	; 0x04

	/* Set the U2X bit to 1 to double the transmission speed */
	SET_BIT(UCSRA,U2X);
    3428:	ab e2       	ldi	r26, 0x2B	; 43
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	eb e2       	ldi	r30, 0x2B	; 43
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	82 60       	ori	r24, 0x02	; 2
    3434:	8c 93       	st	X, r24

	/* Set the Receive and Transmit Enable bits to 1 */
	SET_BIT(UCSRB,TXEN);
    3436:	aa e2       	ldi	r26, 0x2A	; 42
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ea e2       	ldi	r30, 0x2A	; 42
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	88 60       	ori	r24, 0x08	; 8
    3442:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    3444:	aa e2       	ldi	r26, 0x2A	; 42
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	ea e2       	ldi	r30, 0x2A	; 42
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	80 61       	ori	r24, 0x10	; 16
    3450:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((configPtr->parityBit)<<4);
    3452:	a0 e4       	ldi	r26, 0x40	; 64
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e0 e4       	ldi	r30, 0x40	; 64
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	28 2f       	mov	r18, r24
    345e:	2f 7c       	andi	r18, 0xCF	; 207
    3460:	ed 81       	ldd	r30, Y+5	; 0x05
    3462:	fe 81       	ldd	r31, Y+6	; 0x06
    3464:	80 81       	ld	r24, Z
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	82 95       	swap	r24
    346c:	92 95       	swap	r25
    346e:	90 7f       	andi	r25, 0xF0	; 240
    3470:	98 27       	eor	r25, r24
    3472:	80 7f       	andi	r24, 0xF0	; 240
    3474:	98 27       	eor	r25, r24
    3476:	82 2b       	or	r24, r18
    3478:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((configPtr->stopBit)<<3);
    347a:	a0 e4       	ldi	r26, 0x40	; 64
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e0 e4       	ldi	r30, 0x40	; 64
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	28 2f       	mov	r18, r24
    3486:	27 7f       	andi	r18, 0xF7	; 247
    3488:	ed 81       	ldd	r30, Y+5	; 0x05
    348a:	fe 81       	ldd	r31, Y+6	; 0x06
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	82 2b       	or	r24, r18
    34a0:	8c 93       	st	X, r24

	/* The bitLength consists of 3 bits, 2 in UCSRC register "UCSZ0,UCSZ1"
	 * and the third bit is in UCSRB register "UCSZ2" */
	UCSRC = (UCSRC & 0xF9) | ((configPtr->bitLength)<<2);
    34a2:	a0 e4       	ldi	r26, 0x40	; 64
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e0 e4       	ldi	r30, 0x40	; 64
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	28 2f       	mov	r18, r24
    34ae:	29 7f       	andi	r18, 0xF9	; 249
    34b0:	ed 81       	ldd	r30, Y+5	; 0x05
    34b2:	fe 81       	ldd	r31, Y+6	; 0x06
    34b4:	81 81       	ldd	r24, Z+1	; 0x01
    34b6:	88 2f       	mov	r24, r24
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	82 2b       	or	r24, r18
    34c4:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (((configPtr->bitLength) & 0x04)<<2);
    34c6:	aa e2       	ldi	r26, 0x2A	; 42
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	ea e2       	ldi	r30, 0x2A	; 42
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	28 2f       	mov	r18, r24
    34d2:	2b 7f       	andi	r18, 0xFB	; 251
    34d4:	ed 81       	ldd	r30, Y+5	; 0x05
    34d6:	fe 81       	ldd	r31, Y+6	; 0x06
    34d8:	81 81       	ldd	r24, Z+1	; 0x01
    34da:	88 2f       	mov	r24, r24
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	84 70       	andi	r24, 0x04	; 4
    34e0:	90 70       	andi	r25, 0x00	; 0
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	82 2b       	or	r24, r18
    34ec:	8c 93       	st	X, r24

	/* Calculate the baud rate and set it in the UBRR registers */
	ubrr_value =(( (F_CPU / ( 8 * (configPtr->baudRate) )) ) - 1);
    34ee:	ed 81       	ldd	r30, Y+5	; 0x05
    34f0:	fe 81       	ldd	r31, Y+6	; 0x06
    34f2:	83 81       	ldd	r24, Z+3	; 0x03
    34f4:	94 81       	ldd	r25, Z+4	; 0x04
    34f6:	88 0f       	add	r24, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	9c 01       	movw	r18, r24
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	50 e0       	ldi	r21, 0x00	; 0
    3508:	80 e4       	ldi	r24, 0x40	; 64
    350a:	92 e4       	ldi	r25, 0x42	; 66
    350c:	af e0       	ldi	r26, 0x0F	; 15
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	bc 01       	movw	r22, r24
    3512:	cd 01       	movw	r24, r26
    3514:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <__udivmodsi4>
    3518:	da 01       	movw	r26, r20
    351a:	c9 01       	movw	r24, r18
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	a1 09       	sbc	r26, r1
    3520:	b1 09       	sbc	r27, r1
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	9a 83       	std	Y+2, r25	; 0x02
    3526:	ab 83       	std	Y+3, r26	; 0x03
    3528:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = (uint8) (ubrr_value>>8);
    352a:	e0 e4       	ldi	r30, 0x40	; 64
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	9a 81       	ldd	r25, Y+2	; 0x02
    3532:	ab 81       	ldd	r26, Y+3	; 0x03
    3534:	bc 81       	ldd	r27, Y+4	; 0x04
    3536:	89 2f       	mov	r24, r25
    3538:	9a 2f       	mov	r25, r26
    353a:	ab 2f       	mov	r26, r27
    353c:	bb 27       	eor	r27, r27
    353e:	80 83       	st	Z, r24
	UBRRL = (uint8) (ubrr_value);
    3540:	e9 e2       	ldi	r30, 0x29	; 41
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	80 83       	st	Z, r24
}
    3548:	26 96       	adiw	r28, 0x06	; 6
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	08 95       	ret

0000355a <UART_sendByte>:
 * [DESCRIPTION]:	This Function is used to send data bytes
 * [ARGS]:		uint8 byte:	This Argument shall indicate the data byte to be sent
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendByte(uint8 byte)
{
    355a:	df 93       	push	r29
    355c:	cf 93       	push	r28
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the UART data register empty flag bit "UDRE" = 0,
	 * this bit is set to one when the transmit buffer is ready to receive
	 * new data  */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3566:	eb e2       	ldi	r30, 0x2B	; 43
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	88 2f       	mov	r24, r24
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	80 72       	andi	r24, 0x20	; 32
    3572:	90 70       	andi	r25, 0x00	; 0
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	b9 f3       	breq	.-18     	; 0x3566 <UART_sendByte+0xc>
	UDR = byte;
    3578:	ec e2       	ldi	r30, 0x2C	; 44
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	80 83       	st	Z, r24
}
    3580:	0f 90       	pop	r0
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <UART_receiveByte>:
 * [DESCRIPTION]:	This Function is used to receive data bytes
 * [ARGS]:		No Arguments
 * [RETURNS]:	The return shall indicates the received data byte
 ----------------------------------------------------------------------------------------*/
uint8 UART_receiveByte(void)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the UART receive complete flag bit "RXC" = 1,
	* this bit is set to one when the UART finish receiving data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3590:	eb e2       	ldi	r30, 0x2B	; 43
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	88 23       	and	r24, r24
    3598:	dc f7       	brge	.-10     	; 0x3590 <UART_receiveByte+0x8>
	return UDR;
    359a:	ec e2       	ldi	r30, 0x2C	; 44
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	80 81       	ld	r24, Z
}
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <UART_sendString>:
 * 									that will pass over each character in the string and
 * 									send it.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendString(const uint8 *str)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <UART_sendString+0x6>
    35ac:	0f 92       	push	r0
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	9b 83       	std	Y+3, r25	; 0x03
    35b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35b6:	19 82       	std	Y+1, r1	; 0x01
    35b8:	0e c0       	rjmp	.+28     	; 0x35d6 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	9b 81       	ldd	r25, Y+3	; 0x03
    35c4:	fc 01       	movw	r30, r24
    35c6:	e2 0f       	add	r30, r18
    35c8:	f3 1f       	adc	r31, r19
    35ca:	80 81       	ld	r24, Z
    35cc:	0e 94 ad 1a 	call	0x355a	; 0x355a <UART_sendByte>
		i++;
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	8f 5f       	subi	r24, 0xFF	; 255
    35d4:	89 83       	std	Y+1, r24	; 0x01
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendString(const uint8 *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	28 2f       	mov	r18, r24
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	8a 81       	ldd	r24, Y+2	; 0x02
    35de:	9b 81       	ldd	r25, Y+3	; 0x03
    35e0:	fc 01       	movw	r30, r24
    35e2:	e2 0f       	add	r30, r18
    35e4:	f3 1f       	adc	r31, r19
    35e6:	80 81       	ld	r24, Z
    35e8:	88 23       	and	r24, r24
    35ea:	39 f7       	brne	.-50     	; 0x35ba <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <UART_receiveString>:
 * 									that will pass over each character in the string and
 * 									receive it until it reaches the # character.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_receiveString(uint8 *str)
{
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	00 d0       	rcall	.+0      	; 0x3602 <UART_receiveString+0xa>
    3602:	0f 92       	push	r0
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	9b 83       	std	Y+3, r25	; 0x03
    360a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    360c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	9b 81       	ldd	r25, Y+3	; 0x03
    3618:	8c 01       	movw	r16, r24
    361a:	02 0f       	add	r16, r18
    361c:	13 1f       	adc	r17, r19
    361e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    3622:	f8 01       	movw	r30, r16
    3624:	80 83       	st	Z, r24
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <UART_receiveString+0x4e>

	while(str[i] != '#')
	{
		i++;
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	8f 5f       	subi	r24, 0xFF	; 255
    362c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	28 2f       	mov	r18, r24
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
    3636:	9b 81       	ldd	r25, Y+3	; 0x03
    3638:	8c 01       	movw	r16, r24
    363a:	02 0f       	add	r16, r18
    363c:	13 1f       	adc	r17, r19
    363e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <UART_receiveByte>
    3642:	f8 01       	movw	r30, r16
    3644:	80 83       	st	Z, r24
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_receiveByte();

	while(str[i] != '#')
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	9b 81       	ldd	r25, Y+3	; 0x03
    3650:	fc 01       	movw	r30, r24
    3652:	e2 0f       	add	r30, r18
    3654:	f3 1f       	adc	r31, r19
    3656:	80 81       	ld	r24, Z
    3658:	83 32       	cpi	r24, 0x23	; 35
    365a:	31 f7       	brne	.-52     	; 0x3628 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0';
    365c:	89 81       	ldd	r24, Y+1	; 0x01
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	8a 81       	ldd	r24, Y+2	; 0x02
    3664:	9b 81       	ldd	r25, Y+3	; 0x03
    3666:	fc 01       	movw	r30, r24
    3668:	e2 0f       	add	r30, r18
    366a:	f3 1f       	adc	r31, r19
    366c:	10 82       	st	Z, r1
}
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	cf 91       	pop	r28
    3676:	df 91       	pop	r29
    3678:	1f 91       	pop	r17
    367a:	0f 91       	pop	r16
    367c:	08 95       	ret

0000367e <__udivmodhi4>:
    367e:	aa 1b       	sub	r26, r26
    3680:	bb 1b       	sub	r27, r27
    3682:	51 e1       	ldi	r21, 0x11	; 17
    3684:	07 c0       	rjmp	.+14     	; 0x3694 <__udivmodhi4_ep>

00003686 <__udivmodhi4_loop>:
    3686:	aa 1f       	adc	r26, r26
    3688:	bb 1f       	adc	r27, r27
    368a:	a6 17       	cp	r26, r22
    368c:	b7 07       	cpc	r27, r23
    368e:	10 f0       	brcs	.+4      	; 0x3694 <__udivmodhi4_ep>
    3690:	a6 1b       	sub	r26, r22
    3692:	b7 0b       	sbc	r27, r23

00003694 <__udivmodhi4_ep>:
    3694:	88 1f       	adc	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	5a 95       	dec	r21
    369a:	a9 f7       	brne	.-22     	; 0x3686 <__udivmodhi4_loop>
    369c:	80 95       	com	r24
    369e:	90 95       	com	r25
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	08 95       	ret

000036a6 <__udivmodsi4>:
    36a6:	a1 e2       	ldi	r26, 0x21	; 33
    36a8:	1a 2e       	mov	r1, r26
    36aa:	aa 1b       	sub	r26, r26
    36ac:	bb 1b       	sub	r27, r27
    36ae:	fd 01       	movw	r30, r26
    36b0:	0d c0       	rjmp	.+26     	; 0x36cc <__udivmodsi4_ep>

000036b2 <__udivmodsi4_loop>:
    36b2:	aa 1f       	adc	r26, r26
    36b4:	bb 1f       	adc	r27, r27
    36b6:	ee 1f       	adc	r30, r30
    36b8:	ff 1f       	adc	r31, r31
    36ba:	a2 17       	cp	r26, r18
    36bc:	b3 07       	cpc	r27, r19
    36be:	e4 07       	cpc	r30, r20
    36c0:	f5 07       	cpc	r31, r21
    36c2:	20 f0       	brcs	.+8      	; 0x36cc <__udivmodsi4_ep>
    36c4:	a2 1b       	sub	r26, r18
    36c6:	b3 0b       	sbc	r27, r19
    36c8:	e4 0b       	sbc	r30, r20
    36ca:	f5 0b       	sbc	r31, r21

000036cc <__udivmodsi4_ep>:
    36cc:	66 1f       	adc	r22, r22
    36ce:	77 1f       	adc	r23, r23
    36d0:	88 1f       	adc	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	1a 94       	dec	r1
    36d6:	69 f7       	brne	.-38     	; 0x36b2 <__udivmodsi4_loop>
    36d8:	60 95       	com	r22
    36da:	70 95       	com	r23
    36dc:	80 95       	com	r24
    36de:	90 95       	com	r25
    36e0:	9b 01       	movw	r18, r22
    36e2:	ac 01       	movw	r20, r24
    36e4:	bd 01       	movw	r22, r26
    36e6:	cf 01       	movw	r24, r30
    36e8:	08 95       	ret

000036ea <__prologue_saves__>:
    36ea:	2f 92       	push	r2
    36ec:	3f 92       	push	r3
    36ee:	4f 92       	push	r4
    36f0:	5f 92       	push	r5
    36f2:	6f 92       	push	r6
    36f4:	7f 92       	push	r7
    36f6:	8f 92       	push	r8
    36f8:	9f 92       	push	r9
    36fa:	af 92       	push	r10
    36fc:	bf 92       	push	r11
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	cd b7       	in	r28, 0x3d	; 61
    3710:	de b7       	in	r29, 0x3e	; 62
    3712:	ca 1b       	sub	r28, r26
    3714:	db 0b       	sbc	r29, r27
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	09 94       	ijmp

00003722 <__epilogue_restores__>:
    3722:	2a 88       	ldd	r2, Y+18	; 0x12
    3724:	39 88       	ldd	r3, Y+17	; 0x11
    3726:	48 88       	ldd	r4, Y+16	; 0x10
    3728:	5f 84       	ldd	r5, Y+15	; 0x0f
    372a:	6e 84       	ldd	r6, Y+14	; 0x0e
    372c:	7d 84       	ldd	r7, Y+13	; 0x0d
    372e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3730:	9b 84       	ldd	r9, Y+11	; 0x0b
    3732:	aa 84       	ldd	r10, Y+10	; 0x0a
    3734:	b9 84       	ldd	r11, Y+9	; 0x09
    3736:	c8 84       	ldd	r12, Y+8	; 0x08
    3738:	df 80       	ldd	r13, Y+7	; 0x07
    373a:	ee 80       	ldd	r14, Y+6	; 0x06
    373c:	fd 80       	ldd	r15, Y+5	; 0x05
    373e:	0c 81       	ldd	r16, Y+4	; 0x04
    3740:	1b 81       	ldd	r17, Y+3	; 0x03
    3742:	aa 81       	ldd	r26, Y+2	; 0x02
    3744:	b9 81       	ldd	r27, Y+1	; 0x01
    3746:	ce 0f       	add	r28, r30
    3748:	d1 1d       	adc	r29, r1
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	ed 01       	movw	r28, r26
    3756:	08 95       	ret

00003758 <itoa>:
    3758:	fb 01       	movw	r30, r22
    375a:	9f 01       	movw	r18, r30
    375c:	e8 94       	clt
    375e:	42 30       	cpi	r20, 0x02	; 2
    3760:	c4 f0       	brlt	.+48     	; 0x3792 <itoa+0x3a>
    3762:	45 32       	cpi	r20, 0x25	; 37
    3764:	b4 f4       	brge	.+44     	; 0x3792 <itoa+0x3a>
    3766:	4a 30       	cpi	r20, 0x0A	; 10
    3768:	29 f4       	brne	.+10     	; 0x3774 <itoa+0x1c>
    376a:	97 fb       	bst	r25, 7
    376c:	1e f4       	brtc	.+6      	; 0x3774 <itoa+0x1c>
    376e:	90 95       	com	r25
    3770:	81 95       	neg	r24
    3772:	9f 4f       	sbci	r25, 0xFF	; 255
    3774:	64 2f       	mov	r22, r20
    3776:	77 27       	eor	r23, r23
    3778:	0e 94 3f 1b 	call	0x367e	; 0x367e <__udivmodhi4>
    377c:	80 5d       	subi	r24, 0xD0	; 208
    377e:	8a 33       	cpi	r24, 0x3A	; 58
    3780:	0c f0       	brlt	.+2      	; 0x3784 <itoa+0x2c>
    3782:	89 5d       	subi	r24, 0xD9	; 217
    3784:	81 93       	st	Z+, r24
    3786:	cb 01       	movw	r24, r22
    3788:	00 97       	sbiw	r24, 0x00	; 0
    378a:	a1 f7       	brne	.-24     	; 0x3774 <itoa+0x1c>
    378c:	16 f4       	brtc	.+4      	; 0x3792 <itoa+0x3a>
    378e:	5d e2       	ldi	r21, 0x2D	; 45
    3790:	51 93       	st	Z+, r21
    3792:	10 82       	st	Z, r1
    3794:	c9 01       	movw	r24, r18
    3796:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <strrev>

0000379a <strrev>:
    379a:	dc 01       	movw	r26, r24
    379c:	fc 01       	movw	r30, r24
    379e:	67 2f       	mov	r22, r23
    37a0:	71 91       	ld	r23, Z+
    37a2:	77 23       	and	r23, r23
    37a4:	e1 f7       	brne	.-8      	; 0x379e <strrev+0x4>
    37a6:	32 97       	sbiw	r30, 0x02	; 2
    37a8:	04 c0       	rjmp	.+8      	; 0x37b2 <strrev+0x18>
    37aa:	7c 91       	ld	r23, X
    37ac:	6d 93       	st	X+, r22
    37ae:	70 83       	st	Z, r23
    37b0:	62 91       	ld	r22, -Z
    37b2:	ae 17       	cp	r26, r30
    37b4:	bf 07       	cpc	r27, r31
    37b6:	c8 f3       	brcs	.-14     	; 0x37aa <strrev+0x10>
    37b8:	08 95       	ret

000037ba <_exit>:
    37ba:	f8 94       	cli

000037bc <__stop_program>:
    37bc:	ff cf       	rjmp	.-2      	; 0x37bc <__stop_program>
