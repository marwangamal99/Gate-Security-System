
final_mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  000034e8  0000357c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800110  00800110  0000362c  2**0
                  ALLOC
  3 .stab         00003198  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017bc  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bf01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__vector_3>
      10:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <__vector_6>
      1c:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_7>
      20:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_8>
      24:	0c 94 1b 17 	jmp	0x2e36	; 0x2e36 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 14 	call	0x2840	; 0x2840 <main>
      8a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ef       	ldi	r26, 0xF7	; 247
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 ef       	ldi	r24, 0xF7	; 247
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP1_init>:
 * 					HAL, Timer, UART Drivers
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6b 97       	sbiw	r28, 0x1b	; 27
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* As we're using a prescalar of 64, then every count takes 8 u.sec,
	 * so we need 125 counts to get 1 millisecond */

	TIMER_ConfigType TIMER1_config = {TIMER1,0,0,CTC_T1,CHANNEL_A,FCPU_64_T1,0,0,0,125};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9b 8b       	std	Y+19, r25	; 0x13
     b60:	8a 8b       	std	Y+18, r24	; 0x12
     b62:	e4 e0       	ldi	r30, 0x04	; 4
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	fd 8b       	std	Y+21, r31	; 0x15
     b68:	ec 8b       	std	Y+20, r30	; 0x14
     b6a:	fc e0       	ldi	r31, 0x0C	; 12
     b6c:	fe 8b       	std	Y+22, r31	; 0x16
     b6e:	ec 89       	ldd	r30, Y+20	; 0x14
     b70:	fd 89       	ldd	r31, Y+21	; 0x15
     b72:	00 80       	ld	r0, Z
     b74:	8c 89       	ldd	r24, Y+20	; 0x14
     b76:	9d 89       	ldd	r25, Y+21	; 0x15
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9d 8b       	std	Y+21, r25	; 0x15
     b7c:	8c 8b       	std	Y+20, r24	; 0x14
     b7e:	ea 89       	ldd	r30, Y+18	; 0x12
     b80:	fb 89       	ldd	r31, Y+19	; 0x13
     b82:	00 82       	st	Z, r0
     b84:	8a 89       	ldd	r24, Y+18	; 0x12
     b86:	9b 89       	ldd	r25, Y+19	; 0x13
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9b 8b       	std	Y+19, r25	; 0x13
     b8c:	8a 8b       	std	Y+18, r24	; 0x12
     b8e:	9e 89       	ldd	r25, Y+22	; 0x16
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9e 8b       	std	Y+22, r25	; 0x16
     b94:	ee 89       	ldd	r30, Y+22	; 0x16
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <APP1_init+0x28>
	TIMER_init(&TIMER1_config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <TIMER_init>
	TIMER1_setCallBack(TIMER1_countProcessing);
     ba2:	88 ee       	ldi	r24, 0xE8	; 232
     ba4:	9a e0       	ldi	r25, 0x0A	; 10
     ba6:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <TIMER1_setCallBack>
	 * Parity bits: No bits
	 * Data length: 8 bits
	 * Number of stop bits: 1
	 * Baud Rate: 19200
	 */
	UART_configType UART_config = {OFF, EIGHT, ONE, 19200};
     baa:	ce 01       	movw	r24, r28
     bac:	0d 96       	adiw	r24, 0x0d	; 13
     bae:	98 8f       	std	Y+24, r25	; 0x18
     bb0:	8f 8b       	std	Y+23, r24	; 0x17
     bb2:	ef ef       	ldi	r30, 0xFF	; 255
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	fa 8f       	std	Y+26, r31	; 0x1a
     bb8:	e9 8f       	std	Y+25, r30	; 0x19
     bba:	f5 e0       	ldi	r31, 0x05	; 5
     bbc:	fb 8f       	std	Y+27, r31	; 0x1b
     bbe:	e9 8d       	ldd	r30, Y+25	; 0x19
     bc0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     bc2:	00 80       	ld	r0, Z
     bc4:	89 8d       	ldd	r24, Y+25	; 0x19
     bc6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9a 8f       	std	Y+26, r25	; 0x1a
     bcc:	89 8f       	std	Y+25, r24	; 0x19
     bce:	ef 89       	ldd	r30, Y+23	; 0x17
     bd0:	f8 8d       	ldd	r31, Y+24	; 0x18
     bd2:	00 82       	st	Z, r0
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	98 8f       	std	Y+24, r25	; 0x18
     bdc:	8f 8b       	std	Y+23, r24	; 0x17
     bde:	9b 8d       	ldd	r25, Y+27	; 0x1b
     be0:	91 50       	subi	r25, 0x01	; 1
     be2:	9b 8f       	std	Y+27, r25	; 0x1b
     be4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     be6:	ee 23       	and	r30, r30
     be8:	51 f7       	brne	.-44     	; 0xbbe <APP1_init+0x78>
	UART_init(&UART_config);
     bea:	ce 01       	movw	r24, r28
     bec:	0d 96       	adiw	r24, 0x0d	; 13
     bee:	0e 94 9c 18 	call	0x3138	; 0x3138 <UART_init>

	/* Initializing the LCD driver */
	LCD_init();
     bf2:	0e 94 44 13 	call	0x2688	; 0x2688 <LCD_init>
}
     bf6:	6b 96       	adiw	r28, 0x1b	; 27
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <APP1_enterNewPassword>:
 * 					it to mC2
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_enterNewPassword(void)
{
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	a4 97       	sbiw	r28, 0x24	; 36
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     c20:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Enter New Pass:");
     c24:	80 e6       	ldi	r24, 0x60	; 96
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
	LCD_moveCursor(1,0);
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_moveCursor>
	 * Get the password entered until the user press Enter key
	 * if Enter key is pressed, set a # symbol at the end the
	 * send it by UART
	 */
	uint8 password[PASSWORD_SIZE];
	for(uint8 i=0; i<PASSWORD_SIZE; i++)
     c34:	1d 8e       	std	Y+29, r1	; 0x1d
     c36:	0f c1       	rjmp	.+542    	; 0xe56 <APP1_enterNewPassword+0x24e>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	aa ef       	ldi	r26, 0xFA	; 250
     c3e:	b4 e4       	ldi	r27, 0x44	; 68
     c40:	89 8f       	std	Y+25, r24	; 0x19
     c42:	9a 8f       	std	Y+26, r25	; 0x1a
     c44:	ab 8f       	std	Y+27, r26	; 0x1b
     c46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c48:	69 8d       	ldd	r22, Y+25	; 0x19
     c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	4a e7       	ldi	r20, 0x7A	; 122
     c56:	53 e4       	ldi	r21, 0x43	; 67
     c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8d 8b       	std	Y+21, r24	; 0x15
     c62:	9e 8b       	std	Y+22, r25	; 0x16
     c64:	af 8b       	std	Y+23, r26	; 0x17
     c66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c68:	6d 89       	ldd	r22, Y+21	; 0x15
     c6a:	7e 89       	ldd	r23, Y+22	; 0x16
     c6c:	8f 89       	ldd	r24, Y+23	; 0x17
     c6e:	98 8d       	ldd	r25, Y+24	; 0x18
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e8       	ldi	r20, 0x80	; 128
     c76:	5f e3       	ldi	r21, 0x3F	; 63
     c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	2c f4       	brge	.+10     	; 0xc8a <APP1_enterNewPassword+0x82>
		__ticks = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9c 8b       	std	Y+20, r25	; 0x14
     c86:	8b 8b       	std	Y+19, r24	; 0x13
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <APP1_enterNewPassword+0x100>
	else if (__tmp > 65535)
     c8a:	6d 89       	ldd	r22, Y+21	; 0x15
     c8c:	7e 89       	ldd	r23, Y+22	; 0x16
     c8e:	8f 89       	ldd	r24, Y+23	; 0x17
     c90:	98 8d       	ldd	r25, Y+24	; 0x18
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	3f ef       	ldi	r19, 0xFF	; 255
     c96:	4f e7       	ldi	r20, 0x7F	; 127
     c98:	57 e4       	ldi	r21, 0x47	; 71
     c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	4c f5       	brge	.+82     	; 0xcf4 <APP1_enterNewPassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca2:	69 8d       	ldd	r22, Y+25	; 0x19
     ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e2       	ldi	r20, 0x20	; 32
     cb0:	51 e4       	ldi	r21, 0x41	; 65
     cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	9c 8b       	std	Y+20, r25	; 0x14
     cc8:	8b 8b       	std	Y+19, r24	; 0x13
     cca:	0f c0       	rjmp	.+30     	; 0xcea <APP1_enterNewPassword+0xe2>
     ccc:	89 e1       	ldi	r24, 0x19	; 25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9a 8b       	std	Y+18, r25	; 0x12
     cd2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd4:	89 89       	ldd	r24, Y+17	; 0x11
     cd6:	9a 89       	ldd	r25, Y+18	; 0x12
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <APP1_enterNewPassword+0xd0>
     cdc:	9a 8b       	std	Y+18, r25	; 0x12
     cde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce0:	8b 89       	ldd	r24, Y+19	; 0x13
     ce2:	9c 89       	ldd	r25, Y+20	; 0x14
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9c 8b       	std	Y+20, r25	; 0x14
     ce8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cea:	8b 89       	ldd	r24, Y+19	; 0x13
     cec:	9c 89       	ldd	r25, Y+20	; 0x14
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	69 f7       	brne	.-38     	; 0xccc <APP1_enterNewPassword+0xc4>
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <APP1_enterNewPassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf4:	6d 89       	ldd	r22, Y+21	; 0x15
     cf6:	7e 89       	ldd	r23, Y+22	; 0x16
     cf8:	8f 89       	ldd	r24, Y+23	; 0x17
     cfa:	98 8d       	ldd	r25, Y+24	; 0x18
     cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	8b 89       	ldd	r24, Y+19	; 0x13
     d0a:	9c 89       	ldd	r25, Y+20	; 0x14
     d0c:	98 8b       	std	Y+16, r25	; 0x10
     d0e:	8f 87       	std	Y+15, r24	; 0x0f
     d10:	8f 85       	ldd	r24, Y+15	; 0x0f
     d12:	98 89       	ldd	r25, Y+16	; 0x10
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <APP1_enterNewPassword+0x10c>
     d18:	98 8b       	std	Y+16, r25	; 0x10
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(KEYPAD_DELAY);
		if(KEYPAD_getPressedKey() != ENTER_KEY)
     d1c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
     d20:	8d 30       	cpi	r24, 0x0D	; 13
     d22:	09 f4       	brne	.+2      	; 0xd26 <APP1_enterNewPassword+0x11e>
     d24:	82 c0       	rjmp	.+260    	; 0xe2a <APP1_enterNewPassword+0x222>
		{
			password[i] = KEYPAD_getPressedKey();
     d26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d28:	08 2f       	mov	r16, r24
     d2a:	10 e0       	ldi	r17, 0x00	; 0
     d2c:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
     d30:	28 2f       	mov	r18, r24
     d32:	ce 01       	movw	r24, r28
     d34:	4e 96       	adiw	r24, 0x1e	; 30
     d36:	fc 01       	movw	r30, r24
     d38:	e0 0f       	add	r30, r16
     d3a:	f1 1f       	adc	r31, r17
     d3c:	20 83       	st	Z, r18
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	aa ef       	ldi	r26, 0xFA	; 250
     d44:	b4 e4       	ldi	r27, 0x44	; 68
     d46:	8b 87       	std	Y+11, r24	; 0x0b
     d48:	9c 87       	std	Y+12, r25	; 0x0c
     d4a:	ad 87       	std	Y+13, r26	; 0x0d
     d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d50:	7c 85       	ldd	r23, Y+12	; 0x0c
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a e7       	ldi	r20, 0x7A	; 122
     d5c:	53 e4       	ldi	r21, 0x43	; 67
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	8f 83       	std	Y+7, r24	; 0x07
     d68:	98 87       	std	Y+8, r25	; 0x08
     d6a:	a9 87       	std	Y+9, r26	; 0x09
     d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6e:	6f 81       	ldd	r22, Y+7	; 0x07
     d70:	78 85       	ldd	r23, Y+8	; 0x08
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d82:	88 23       	and	r24, r24
     d84:	2c f4       	brge	.+10     	; 0xd90 <APP1_enterNewPassword+0x188>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	3f c0       	rjmp	.+126    	; 0xe0e <APP1_enterNewPassword+0x206>
	else if (__tmp > 65535)
     d90:	6f 81       	ldd	r22, Y+7	; 0x07
     d92:	78 85       	ldd	r23, Y+8	; 0x08
     d94:	89 85       	ldd	r24, Y+9	; 0x09
     d96:	9a 85       	ldd	r25, Y+10	; 0x0a
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	4f e7       	ldi	r20, 0x7F	; 127
     d9e:	57 e4       	ldi	r21, 0x47	; 71
     da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da4:	18 16       	cp	r1, r24
     da6:	4c f5       	brge	.+82     	; 0xdfa <APP1_enterNewPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da8:	6b 85       	ldd	r22, Y+11	; 0x0b
     daa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dac:	8d 85       	ldd	r24, Y+13	; 0x0d
     dae:	9e 85       	ldd	r25, Y+14	; 0x0e
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	0f c0       	rjmp	.+30     	; 0xdf0 <APP1_enterNewPassword+0x1e8>
     dd2:	89 e1       	ldi	r24, 0x19	; 25
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <APP1_enterNewPassword+0x1d6>
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	69 f7       	brne	.-38     	; 0xdd2 <APP1_enterNewPassword+0x1ca>
     df8:	14 c0       	rjmp	.+40     	; 0xe22 <APP1_enterNewPassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9e 83       	std	Y+6, r25	; 0x06
     e0c:	8d 83       	std	Y+5, r24	; 0x05
     e0e:	8d 81       	ldd	r24, Y+5	; 0x05
     e10:	9e 81       	ldd	r25, Y+6	; 0x06
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <APP1_enterNewPassword+0x212>
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
			/* delay function for the keypad */
			_delay_ms(KEYPAD_DELAY);
			LCD_displayCharacter('*');
     e22:	8a e2       	ldi	r24, 0x2A	; 42
     e24:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_displayCharacter>
     e28:	13 c0       	rjmp	.+38     	; 0xe50 <APP1_enterNewPassword+0x248>
		}
		else if(KEYPAD_getPressedKey() == ENTER_KEY)
     e2a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
     e2e:	8d 30       	cpi	r24, 0x0D	; 13
     e30:	79 f4       	brne	.+30     	; 0xe50 <APP1_enterNewPassword+0x248>
		{
			password[i] = '#';
     e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	ce 01       	movw	r24, r28
     e3a:	4e 96       	adiw	r24, 0x1e	; 30
     e3c:	fc 01       	movw	r30, r24
     e3e:	e2 0f       	add	r30, r18
     e40:	f3 1f       	adc	r31, r19
     e42:	83 e2       	ldi	r24, 0x23	; 35
     e44:	80 83       	st	Z, r24
			UART_sendString(password);
     e46:	ce 01       	movw	r24, r28
     e48:	4e 96       	adiw	r24, 0x1e	; 30
     e4a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_sendString>
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <APP1_enterNewPassword+0x256>
	 * Get the password entered until the user press Enter key
	 * if Enter key is pressed, set a # symbol at the end the
	 * send it by UART
	 */
	uint8 password[PASSWORD_SIZE];
	for(uint8 i=0; i<PASSWORD_SIZE; i++)
     e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8d 8f       	std	Y+29, r24	; 0x1d
     e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e58:	87 30       	cpi	r24, 0x07	; 7
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <APP1_enterNewPassword+0x256>
     e5c:	ed ce       	rjmp	.-550    	; 0xc38 <APP1_enterNewPassword+0x30>
			password[i] = '#';
			UART_sendString(password);
			break;
		}
	}
	UART_sendString(password);
     e5e:	ce 01       	movw	r24, r28
     e60:	4e 96       	adiw	r24, 0x1e	; 30
     e62:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_sendString>
}
     e66:	a4 96       	adiw	r28, 0x24	; 36
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <APP1_stateCheck>:
 * [DESCRIPTION]:	This Function is used to check for the state received from mC2
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
uint8 APP1_stateCheck(void)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	/* Receive states from mC2 */
	return UART_receiveByte();
     e84:	0e 94 59 19 	call	0x32b2	; 0x32b2 <UART_receiveByte>
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <APP1_sendCommand>:
 * [DESCRIPTION]:	This Function is used to send commands to mC2 from mC1
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_sendCommand(uint8 command)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01
	/* Send Commands to mC2 */
	UART_sendByte(command);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	0e 94 42 19 	call	0x3284	; 0x3284 <UART_sendByte>
}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <APP1_re_enterPassword>:
 * 					send it to mC2
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_re_enterPassword(void)
{
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	a4 97       	sbiw	r28, 0x24	; 36
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     ec0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Re-enter Pass:");
     ec4:	80 e7       	ldi	r24, 0x70	; 112
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
	LCD_moveCursor(1,0);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_moveCursor>
	 * Get the re-entered password entered until the user press Enter key
	 * if Enter key is pressed, set a # symbol at the end the
	 * send it by UART
	 */
	uint8 re_password[PASSWORD_SIZE];
	for(uint8 i=0; i<PASSWORD_SIZE; i++)
     ed4:	1d 8e       	std	Y+29, r1	; 0x1d
     ed6:	0f c1       	rjmp	.+542    	; 0x10f6 <APP1_re_enterPassword+0x24e>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	aa ef       	ldi	r26, 0xFA	; 250
     ede:	b4 e4       	ldi	r27, 0x44	; 68
     ee0:	89 8f       	std	Y+25, r24	; 0x19
     ee2:	9a 8f       	std	Y+26, r25	; 0x1a
     ee4:	ab 8f       	std	Y+27, r26	; 0x1b
     ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	69 8d       	ldd	r22, Y+25	; 0x19
     eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	53 e4       	ldi	r21, 0x43	; 67
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8d 8b       	std	Y+21, r24	; 0x15
     f02:	9e 8b       	std	Y+22, r25	; 0x16
     f04:	af 8b       	std	Y+23, r26	; 0x17
     f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f08:	6d 89       	ldd	r22, Y+21	; 0x15
     f0a:	7e 89       	ldd	r23, Y+22	; 0x16
     f0c:	8f 89       	ldd	r24, Y+23	; 0x17
     f0e:	98 8d       	ldd	r25, Y+24	; 0x18
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <APP1_re_enterPassword+0x82>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 8b       	std	Y+20, r25	; 0x14
     f26:	8b 8b       	std	Y+19, r24	; 0x13
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <APP1_re_enterPassword+0x100>
	else if (__tmp > 65535)
     f2a:	6d 89       	ldd	r22, Y+21	; 0x15
     f2c:	7e 89       	ldd	r23, Y+22	; 0x16
     f2e:	8f 89       	ldd	r24, Y+23	; 0x17
     f30:	98 8d       	ldd	r25, Y+24	; 0x18
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <APP1_re_enterPassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	69 8d       	ldd	r22, Y+25	; 0x19
     f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9c 8b       	std	Y+20, r25	; 0x14
     f68:	8b 8b       	std	Y+19, r24	; 0x13
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <APP1_re_enterPassword+0xe2>
     f6c:	89 e1       	ldi	r24, 0x19	; 25
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9a 8b       	std	Y+18, r25	; 0x12
     f72:	89 8b       	std	Y+17, r24	; 0x11
     f74:	89 89       	ldd	r24, Y+17	; 0x11
     f76:	9a 89       	ldd	r25, Y+18	; 0x12
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <APP1_re_enterPassword+0xd0>
     f7c:	9a 8b       	std	Y+18, r25	; 0x12
     f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8b 89       	ldd	r24, Y+19	; 0x13
     f82:	9c 89       	ldd	r25, Y+20	; 0x14
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9c 8b       	std	Y+20, r25	; 0x14
     f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8b 89       	ldd	r24, Y+19	; 0x13
     f8c:	9c 89       	ldd	r25, Y+20	; 0x14
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <APP1_re_enterPassword+0xc4>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <APP1_re_enterPassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6d 89       	ldd	r22, Y+21	; 0x15
     f96:	7e 89       	ldd	r23, Y+22	; 0x16
     f98:	8f 89       	ldd	r24, Y+23	; 0x17
     f9a:	98 8d       	ldd	r25, Y+24	; 0x18
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9c 8b       	std	Y+20, r25	; 0x14
     fa6:	8b 8b       	std	Y+19, r24	; 0x13
     fa8:	8b 89       	ldd	r24, Y+19	; 0x13
     faa:	9c 89       	ldd	r25, Y+20	; 0x14
     fac:	98 8b       	std	Y+16, r25	; 0x10
     fae:	8f 87       	std	Y+15, r24	; 0x0f
     fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb2:	98 89       	ldd	r25, Y+16	; 0x10
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <APP1_re_enterPassword+0x10c>
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(KEYPAD_DELAY);
		if(KEYPAD_getPressedKey() != ENTER_KEY)
     fbc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
     fc0:	8d 30       	cpi	r24, 0x0D	; 13
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <APP1_re_enterPassword+0x11e>
     fc4:	82 c0       	rjmp	.+260    	; 0x10ca <APP1_re_enterPassword+0x222>
		{
			re_password[i] = KEYPAD_getPressedKey();
     fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc8:	08 2f       	mov	r16, r24
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
     fd0:	28 2f       	mov	r18, r24
     fd2:	ce 01       	movw	r24, r28
     fd4:	4e 96       	adiw	r24, 0x1e	; 30
     fd6:	fc 01       	movw	r30, r24
     fd8:	e0 0f       	add	r30, r16
     fda:	f1 1f       	adc	r31, r17
     fdc:	20 83       	st	Z, r18
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	aa ef       	ldi	r26, 0xFA	; 250
     fe4:	b4 e4       	ldi	r27, 0x44	; 68
     fe6:	8b 87       	std	Y+11, r24	; 0x0b
     fe8:	9c 87       	std	Y+12, r25	; 0x0c
     fea:	ad 87       	std	Y+13, r26	; 0x0d
     fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a e7       	ldi	r20, 0x7A	; 122
     ffc:	53 e4       	ldi	r21, 0x43	; 67
     ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	8f 83       	std	Y+7, r24	; 0x07
    1008:	98 87       	std	Y+8, r25	; 0x08
    100a:	a9 87       	std	Y+9, r26	; 0x09
    100c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	78 85       	ldd	r23, Y+8	; 0x08
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <APP1_re_enterPassword+0x188>
		__ticks = 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	3f c0       	rjmp	.+126    	; 0x10ae <APP1_re_enterPassword+0x206>
	else if (__tmp > 65535)
    1030:	6f 81       	ldd	r22, Y+7	; 0x07
    1032:	78 85       	ldd	r23, Y+8	; 0x08
    1034:	89 85       	ldd	r24, Y+9	; 0x09
    1036:	9a 85       	ldd	r25, Y+10	; 0x0a
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	4c f5       	brge	.+82     	; 0x109a <APP1_re_enterPassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1048:	6b 85       	ldd	r22, Y+11	; 0x0b
    104a:	7c 85       	ldd	r23, Y+12	; 0x0c
    104c:	8d 85       	ldd	r24, Y+13	; 0x0d
    104e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	9e 83       	std	Y+6, r25	; 0x06
    106e:	8d 83       	std	Y+5, r24	; 0x05
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <APP1_re_enterPassword+0x1e8>
    1072:	89 e1       	ldi	r24, 0x19	; 25
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 83       	std	Y+4, r25	; 0x04
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <APP1_re_enterPassword+0x1d6>
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	69 f7       	brne	.-38     	; 0x1072 <APP1_re_enterPassword+0x1ca>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <APP1_re_enterPassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109a:	6f 81       	ldd	r22, Y+7	; 0x07
    109c:	78 85       	ldd	r23, Y+8	; 0x08
    109e:	89 85       	ldd	r24, Y+9	; 0x09
    10a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <APP1_re_enterPassword+0x212>
    10be:	9a 83       	std	Y+2, r25	; 0x02
    10c0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(KEYPAD_DELAY);
			LCD_displayCharacter('*');
    10c2:	8a e2       	ldi	r24, 0x2A	; 42
    10c4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_displayCharacter>
    10c8:	13 c0       	rjmp	.+38     	; 0x10f0 <APP1_re_enterPassword+0x248>
		}
		else if(KEYPAD_getPressedKey() == ENTER_KEY)
    10ca:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
    10ce:	8d 30       	cpi	r24, 0x0D	; 13
    10d0:	79 f4       	brne	.+30     	; 0x10f0 <APP1_re_enterPassword+0x248>
		{
			re_password[i] = '#';
    10d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	ce 01       	movw	r24, r28
    10da:	4e 96       	adiw	r24, 0x1e	; 30
    10dc:	fc 01       	movw	r30, r24
    10de:	e2 0f       	add	r30, r18
    10e0:	f3 1f       	adc	r31, r19
    10e2:	83 e2       	ldi	r24, 0x23	; 35
    10e4:	80 83       	st	Z, r24
			UART_sendString(re_password);
    10e6:	ce 01       	movw	r24, r28
    10e8:	4e 96       	adiw	r24, 0x1e	; 30
    10ea:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_sendString>
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <APP1_re_enterPassword+0x256>
	 * Get the re-entered password entered until the user press Enter key
	 * if Enter key is pressed, set a # symbol at the end the
	 * send it by UART
	 */
	uint8 re_password[PASSWORD_SIZE];
	for(uint8 i=0; i<PASSWORD_SIZE; i++)
    10f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	8d 8f       	std	Y+29, r24	; 0x1d
    10f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f8:	87 30       	cpi	r24, 0x07	; 7
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <APP1_re_enterPassword+0x256>
    10fc:	ed ce       	rjmp	.-550    	; 0xed8 <APP1_re_enterPassword+0x30>
			re_password[i] = '#';
			UART_sendString(re_password);
			break;
		}
	}
	UART_sendString(re_password);
    10fe:	ce 01       	movw	r24, r28
    1100:	4e 96       	adiw	r24, 0x1e	; 30
    1102:	0e 94 68 19 	call	0x32d0	; 0x32d0 <UART_sendString>
}
    1106:	a4 96       	adiw	r28, 0x24	; 36
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <APP1_mainOptionMenu>:
 * 					the choice of the user to send it by UART to mC2
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
uint8 APP1_mainOptionMenu(void)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	6d 97       	sbiw	r28, 0x1d	; 29
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
	uint8 choice = 0;
    1130:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    1132:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayStringRowColumn("+: Open Door",0 ,0);
    1136:	8f e7       	ldi	r24, 0x7F	; 127
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("-: Change Pass",1 ,0);
    1142:	8c e8       	ldi	r24, 0x8C	; 140
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <LCD_displayStringRowColumn>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	aa ef       	ldi	r26, 0xFA	; 250
    1154:	b4 e4       	ldi	r27, 0x44	; 68
    1156:	89 8f       	std	Y+25, r24	; 0x19
    1158:	9a 8f       	std	Y+26, r25	; 0x1a
    115a:	ab 8f       	std	Y+27, r26	; 0x1b
    115c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115e:	69 8d       	ldd	r22, Y+25	; 0x19
    1160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a e7       	ldi	r20, 0x7A	; 122
    116c:	53 e4       	ldi	r21, 0x43	; 67
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	8d 8b       	std	Y+21, r24	; 0x15
    1178:	9e 8b       	std	Y+22, r25	; 0x16
    117a:	af 8b       	std	Y+23, r26	; 0x17
    117c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    117e:	6d 89       	ldd	r22, Y+21	; 0x15
    1180:	7e 89       	ldd	r23, Y+22	; 0x16
    1182:	8f 89       	ldd	r24, Y+23	; 0x17
    1184:	98 8d       	ldd	r25, Y+24	; 0x18
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e8       	ldi	r20, 0x80	; 128
    118c:	5f e3       	ldi	r21, 0x3F	; 63
    118e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1192:	88 23       	and	r24, r24
    1194:	2c f4       	brge	.+10     	; 0x11a0 <APP1_mainOptionMenu+0x84>
		__ticks = 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	9c 8b       	std	Y+20, r25	; 0x14
    119c:	8b 8b       	std	Y+19, r24	; 0x13
    119e:	3f c0       	rjmp	.+126    	; 0x121e <APP1_mainOptionMenu+0x102>
	else if (__tmp > 65535)
    11a0:	6d 89       	ldd	r22, Y+21	; 0x15
    11a2:	7e 89       	ldd	r23, Y+22	; 0x16
    11a4:	8f 89       	ldd	r24, Y+23	; 0x17
    11a6:	98 8d       	ldd	r25, Y+24	; 0x18
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	3f ef       	ldi	r19, 0xFF	; 255
    11ac:	4f e7       	ldi	r20, 0x7F	; 127
    11ae:	57 e4       	ldi	r21, 0x47	; 71
    11b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11b4:	18 16       	cp	r1, r24
    11b6:	4c f5       	brge	.+82     	; 0x120a <APP1_mainOptionMenu+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b8:	69 8d       	ldd	r22, Y+25	; 0x19
    11ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e2       	ldi	r20, 0x20	; 32
    11c6:	51 e4       	ldi	r21, 0x41	; 65
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	9c 8b       	std	Y+20, r25	; 0x14
    11de:	8b 8b       	std	Y+19, r24	; 0x13
    11e0:	0f c0       	rjmp	.+30     	; 0x1200 <APP1_mainOptionMenu+0xe4>
    11e2:	89 e1       	ldi	r24, 0x19	; 25
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9a 8b       	std	Y+18, r25	; 0x12
    11e8:	89 8b       	std	Y+17, r24	; 0x11
    11ea:	89 89       	ldd	r24, Y+17	; 0x11
    11ec:	9a 89       	ldd	r25, Y+18	; 0x12
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	f1 f7       	brne	.-4      	; 0x11ee <APP1_mainOptionMenu+0xd2>
    11f2:	9a 8b       	std	Y+18, r25	; 0x12
    11f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
    11f8:	9c 89       	ldd	r25, Y+20	; 0x14
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	9c 8b       	std	Y+20, r25	; 0x14
    11fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	69 f7       	brne	.-38     	; 0x11e2 <APP1_mainOptionMenu+0xc6>
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <APP1_mainOptionMenu+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120a:	6d 89       	ldd	r22, Y+21	; 0x15
    120c:	7e 89       	ldd	r23, Y+22	; 0x16
    120e:	8f 89       	ldd	r24, Y+23	; 0x17
    1210:	98 8d       	ldd	r25, Y+24	; 0x18
    1212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9c 8b       	std	Y+20, r25	; 0x14
    121c:	8b 8b       	std	Y+19, r24	; 0x13
    121e:	8b 89       	ldd	r24, Y+19	; 0x13
    1220:	9c 89       	ldd	r25, Y+20	; 0x14
    1222:	98 8b       	std	Y+16, r25	; 0x10
    1224:	8f 87       	std	Y+15, r24	; 0x0f
    1226:	8f 85       	ldd	r24, Y+15	; 0x0f
    1228:	98 89       	ldd	r25, Y+16	; 0x10
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <APP1_mainOptionMenu+0x10e>
    122e:	98 8b       	std	Y+16, r25	; 0x10
    1230:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(KEYPAD_DELAY);
	choice = KEYPAD_getPressedKey();
    1232:	0e 94 67 0e 	call	0x1cce	; 0x1cce <KEYPAD_getPressedKey>
    1236:	8d 8f       	std	Y+29, r24	; 0x1d
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	aa ef       	ldi	r26, 0xFA	; 250
    123e:	b4 e4       	ldi	r27, 0x44	; 68
    1240:	8b 87       	std	Y+11, r24	; 0x0b
    1242:	9c 87       	std	Y+12, r25	; 0x0c
    1244:	ad 87       	std	Y+13, r26	; 0x0d
    1246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	6b 85       	ldd	r22, Y+11	; 0x0b
    124a:	7c 85       	ldd	r23, Y+12	; 0x0c
    124c:	8d 85       	ldd	r24, Y+13	; 0x0d
    124e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a e7       	ldi	r20, 0x7A	; 122
    1256:	53 e4       	ldi	r21, 0x43	; 67
    1258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8f 83       	std	Y+7, r24	; 0x07
    1262:	98 87       	std	Y+8, r25	; 0x08
    1264:	a9 87       	std	Y+9, r26	; 0x09
    1266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1268:	6f 81       	ldd	r22, Y+7	; 0x07
    126a:	78 85       	ldd	r23, Y+8	; 0x08
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <APP1_mainOptionMenu+0x16e>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <APP1_mainOptionMenu+0x1ec>
	else if (__tmp > 65535)
    128a:	6f 81       	ldd	r22, Y+7	; 0x07
    128c:	78 85       	ldd	r23, Y+8	; 0x08
    128e:	89 85       	ldd	r24, Y+9	; 0x09
    1290:	9a 85       	ldd	r25, Y+10	; 0x0a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129e:	18 16       	cp	r1, r24
    12a0:	4c f5       	brge	.+82     	; 0x12f4 <APP1_mainOptionMenu+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <APP1_mainOptionMenu+0x1ce>
    12cc:	89 e1       	ldi	r24, 0x19	; 25
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	8b 83       	std	Y+3, r24	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <APP1_mainOptionMenu+0x1bc>
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f7       	brne	.-38     	; 0x12cc <APP1_mainOptionMenu+0x1b0>
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <APP1_mainOptionMenu+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <APP1_mainOptionMenu+0x1f8>
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(KEYPAD_DELAY);
	return choice;
    131c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    131e:	6d 96       	adiw	r28, 0x1d	; 29
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <APP1_openDoor>:
 * [DESCRIPTION]:	This Function is used to display that the Door is opening
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_openDoor(void)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1338:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Door OPENING...");
    133c:	8b e9       	ldi	r24, 0x9B	; 155
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <APP1_doorIsOpened>:
 * [DESCRIPTION]:	This Function is used to display that the Door is opened successfully
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_doorIsOpened(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1352:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString(" Door is OPENED");
    1356:	8b ea       	ldi	r24, 0xAB	; 171
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <APP1_closeDoor>:
 * [DESCRIPTION]:	This Function is used to display that the Door is closing
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_closeDoor(void)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    136c:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Door CLOSING...");
    1370:	8b eb       	ldi	r24, 0xBB	; 187
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <APP1_setAlarmON>:
 * [DESCRIPTION]:	This Function is used to display that the Alarm is sent off
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_setAlarmON(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1386:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("WARNING !!");
    138a:	8b ec       	ldi	r24, 0xCB	; 203
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <APP1_displayCorrect>:
 * [DESCRIPTION]:	This Function is used to display that the Password sent is correct
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_displayCorrect(void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	2e 97       	sbiw	r28, 0x0e	; 14
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    13ac:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Password Correct");
    13b0:	86 ed       	ldi	r24, 0xD6	; 214
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e4       	ldi	r25, 0x40	; 64
    13bc:	ac e9       	ldi	r26, 0x9C	; 156
    13be:	b5 e4       	ldi	r27, 0x45	; 69
    13c0:	8b 87       	std	Y+11, r24	; 0x0b
    13c2:	9c 87       	std	Y+12, r25	; 0x0c
    13c4:	ad 87       	std	Y+13, r26	; 0x0d
    13c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	53 e4       	ldi	r21, 0x43	; 67
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	98 87       	std	Y+8, r25	; 0x08
    13e4:	a9 87       	std	Y+9, r26	; 0x09
    13e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <APP1_displayCorrect+0x72>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <APP1_displayCorrect+0xf0>
	else if (__tmp > 65535)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <APP1_displayCorrect+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	0f c0       	rjmp	.+30     	; 0x146a <APP1_displayCorrect+0xd2>
    144c:	89 e1       	ldi	r24, 0x19	; 25
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <APP1_displayCorrect+0xc0>
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <APP1_displayCorrect+0xb4>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <APP1_displayCorrect+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <APP1_displayCorrect+0xfc>
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	UART_sendByte(SEND_CORRECT);
    149c:	8e e3       	ldi	r24, 0x3E	; 62
    149e:	0e 94 42 19 	call	0x3284	; 0x3284 <UART_sendByte>
}
    14a2:	2e 96       	adiw	r28, 0x0e	; 14
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <APP1_displayWrong>:
 * [DESCRIPTION]:	This Function is used to display that the Password sent is correct
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void APP1_displayWrong(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	2e 97       	sbiw	r28, 0x0e	; 14
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    14c8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_clearScreen>
	LCD_displayString("Password Wrong!");
    14cc:	87 ee       	ldi	r24, 0xE7	; 231
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e4       	ldi	r25, 0x40	; 64
    14d8:	ac e9       	ldi	r26, 0x9C	; 156
    14da:	b5 e4       	ldi	r27, 0x45	; 69
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a e7       	ldi	r20, 0x7A	; 122
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <APP1_displayWrong+0x72>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <APP1_displayWrong+0xf0>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <APP1_displayWrong+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <APP1_displayWrong+0xd2>
    1568:	89 e1       	ldi	r24, 0x19	; 25
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <APP1_displayWrong+0xc0>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <APP1_displayWrong+0xb4>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <APP1_displayWrong+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <APP1_displayWrong+0xfc>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5000);
	UART_sendByte(SEND_WRONG);
    15b8:	8c e3       	ldi	r24, 0x3C	; 60
    15ba:	0e 94 42 19 	call	0x3284	; 0x3284 <UART_sendByte>
}
    15be:	2e 96       	adiw	r28, 0x0e	; 14
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <TIMER1_countProcessing>:
 * 					milliseconds
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_countProcessing(uint16 g_msec1)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <TIMER1_countProcessing+0x6>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
	g_tick1++;
    15de:	80 91 18 01 	lds	r24, 0x0118
    15e2:	90 91 19 01 	lds	r25, 0x0119
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	90 93 19 01 	sts	0x0119, r25
    15ec:	80 93 18 01 	sts	0x0118, r24
	if(g_tick1 == g_msec1)
    15f0:	20 91 18 01 	lds	r18, 0x0118
    15f4:	30 91 19 01 	lds	r19, 0x0119
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	39 f4       	brne	.+14     	; 0x1610 <TIMER1_countProcessing+0x40>
	{
		TIMER1_flagComplete = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 10 01 	sts	0x0110, r24
		g_tick1 = 0;
    1608:	10 92 19 01 	sts	0x0119, r1
    160c:	10 92 18 01 	sts	0x0118, r1
	}
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <TIMER1_delay_ms>:
 * 					milliseconds
 * [ARGS]:		No Arguments
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_delay_ms(uint16 seconds)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <TIMER1_delay_ms+0x6>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	g_tick1 = 0;
    1628:	10 92 19 01 	sts	0x0119, r1
    162c:	10 92 18 01 	sts	0x0118, r1
	g_msec1 = seconds;
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	90 93 1e 01 	sts	0x011E, r25
    1638:	80 93 1d 01 	sts	0x011D, r24

	while(TIMER1_flagComplete != 1){}
    163c:	80 91 10 01 	lds	r24, 0x0110
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	e1 f7       	brne	.-8      	; 0x163c <TIMER1_delay_ms+0x22>
	TIMER1_flagComplete = 0;
    1644:	10 92 10 01 	sts	0x0110, r1
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <GPIO_setPinDirection>:
 * 			GPIO_PinDirectionType direction :	This Arg shall indicate the direction of
 * 												the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_setPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <GPIO_setPinDirection+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_setPinDirection+0x8>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	6a 83       	std	Y+2, r22	; 0x02
    1664:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	08 f0       	brcs	.+2      	; 0x166e <GPIO_setPinDirection+0x1c>
    166c:	d5 c0       	rjmp	.+426    	; 0x1818 <GPIO_setPinDirection+0x1c6>
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	88 30       	cpi	r24, 0x08	; 8
    1672:	08 f0       	brcs	.+2      	; 0x1676 <GPIO_setPinDirection+0x24>
    1674:	d1 c0       	rjmp	.+418    	; 0x1818 <GPIO_setPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3d 83       	std	Y+5, r19	; 0x05
    167e:	2c 83       	std	Y+4, r18	; 0x04
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	9d 81       	ldd	r25, Y+5	; 0x05
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <GPIO_setPinDirection+0x3a>
    168a:	43 c0       	rjmp	.+134    	; 0x1712 <GPIO_setPinDirection+0xc0>
    168c:	2c 81       	ldd	r18, Y+4	; 0x04
    168e:	3d 81       	ldd	r19, Y+5	; 0x05
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <GPIO_setPinDirection+0x4e>
    1696:	8c 81       	ldd	r24, Y+4	; 0x04
    1698:	9d 81       	ldd	r25, Y+5	; 0x05
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	71 f0       	breq	.+28     	; 0x16ba <GPIO_setPinDirection+0x68>
    169e:	bc c0       	rjmp	.+376    	; 0x1818 <GPIO_setPinDirection+0x1c6>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <GPIO_setPinDirection+0x5a>
    16aa:	5f c0       	rjmp	.+190    	; 0x176a <GPIO_setPinDirection+0x118>
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <GPIO_setPinDirection+0x66>
    16b6:	85 c0       	rjmp	.+266    	; 0x17c2 <GPIO_setPinDirection+0x170>
    16b8:	af c0       	rjmp	.+350    	; 0x1818 <GPIO_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	a1 f4       	brne	.+40     	; 0x16e8 <GPIO_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16c0:	aa e3       	ldi	r26, 0x3A	; 58
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <GPIO_setPinDirection+0x8c>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <GPIO_setPinDirection+0x88>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	98 c0       	rjmp	.+304    	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16e8:	aa e3       	ldi	r26, 0x3A	; 58
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <GPIO_setPinDirection+0xb4>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <GPIO_setPinDirection+0xb0>
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	83 c0       	rjmp	.+262    	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <GPIO_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1718:	a7 e3       	ldi	r26, 0x37	; 55
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <GPIO_setPinDirection+0xe4>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <GPIO_setPinDirection+0xe0>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	6c c0       	rjmp	.+216    	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1740:	a7 e3       	ldi	r26, 0x37	; 55
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e7 e3       	ldi	r30, 0x37	; 55
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_setPinDirection+0x10c>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_setPinDirection+0x108>
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	57 c0       	rjmp	.+174    	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	a1 f4       	brne	.+40     	; 0x1798 <GPIO_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1770:	a4 e3       	ldi	r26, 0x34	; 52
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e4 e3       	ldi	r30, 0x34	; 52
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	48 2f       	mov	r20, r24
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 2e       	mov	r0, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_setPinDirection+0x13c>
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_setPinDirection+0x138>
    1792:	84 2b       	or	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	40 c0       	rjmp	.+128    	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1798:	a4 e3       	ldi	r26, 0x34	; 52
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e4 e3       	ldi	r30, 0x34	; 52
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_setPinDirection+0x164>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_setPinDirection+0x160>
    17ba:	80 95       	com	r24
    17bc:	84 23       	and	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	2b c0       	rjmp	.+86     	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	a1 f4       	brne	.+40     	; 0x17f0 <GPIO_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17c8:	a1 e3       	ldi	r26, 0x31	; 49
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e1 e3       	ldi	r30, 0x31	; 49
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_setPinDirection+0x194>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_setPinDirection+0x190>
    17ea:	84 2b       	or	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <GPIO_setPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17f0:	a1 e3       	ldi	r26, 0x31	; 49
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 e3       	ldi	r30, 0x31	; 49
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_setPinDirection+0x1bc>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_setPinDirection+0x1b8>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <GPIO_writePin>:
 * 							    specified port
 * 			uint8 value :		This Arg shall indicate the value of the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_writePin+0x6>
    182e:	00 d0       	rcall	.+0      	; 0x1830 <GPIO_writePin+0x8>
    1830:	0f 92       	push	r0
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
    183a:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	08 f0       	brcs	.+2      	; 0x1844 <GPIO_writePin+0x1c>
    1842:	d5 c0       	rjmp	.+426    	; 0x19ee <GPIO_writePin+0x1c6>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	88 30       	cpi	r24, 0x08	; 8
    1848:	08 f0       	brcs	.+2      	; 0x184c <GPIO_writePin+0x24>
    184a:	d1 c0       	rjmp	.+418    	; 0x19ee <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3d 83       	std	Y+5, r19	; 0x05
    1854:	2c 83       	std	Y+4, r18	; 0x04
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	09 f4       	brne	.+2      	; 0x1862 <GPIO_writePin+0x3a>
    1860:	43 c0       	rjmp	.+134    	; 0x18e8 <GPIO_writePin+0xc0>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <GPIO_writePin+0x4e>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	71 f0       	breq	.+28     	; 0x1890 <GPIO_writePin+0x68>
    1874:	bc c0       	rjmp	.+376    	; 0x19ee <GPIO_writePin+0x1c6>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <GPIO_writePin+0x5a>
    1880:	5f c0       	rjmp	.+190    	; 0x1940 <GPIO_writePin+0x118>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <GPIO_writePin+0x66>
    188c:	85 c0       	rjmp	.+266    	; 0x1998 <GPIO_writePin+0x170>
    188e:	af c0       	rjmp	.+350    	; 0x19ee <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	a1 f4       	brne	.+40     	; 0x18be <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1896:	ab e3       	ldi	r26, 0x3B	; 59
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <GPIO_writePin+0x8c>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <GPIO_writePin+0x88>
    18b8:	84 2b       	or	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	98 c0       	rjmp	.+304    	; 0x19ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18be:	ab e3       	ldi	r26, 0x3B	; 59
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e3       	ldi	r30, 0x3B	; 59
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_writePin+0xb4>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_writePin+0xb0>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	83 c0       	rjmp	.+262    	; 0x19ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	a1 f4       	brne	.+40     	; 0x1916 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18ee:	a8 e3       	ldi	r26, 0x38	; 56
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e8 e3       	ldi	r30, 0x38	; 56
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <GPIO_writePin+0xe4>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <GPIO_writePin+0xe0>
    1910:	84 2b       	or	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	6c c0       	rjmp	.+216    	; 0x19ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1916:	a8 e3       	ldi	r26, 0x38	; 56
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e8 e3       	ldi	r30, 0x38	; 56
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_writePin+0x10c>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_writePin+0x108>
    1938:	80 95       	com	r24
    193a:	84 23       	and	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	57 c0       	rjmp	.+174    	; 0x19ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	a1 f4       	brne	.+40     	; 0x196e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1946:	a5 e3       	ldi	r26, 0x35	; 53
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <GPIO_writePin+0x13c>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <GPIO_writePin+0x138>
    1968:	84 2b       	or	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	40 c0       	rjmp	.+128    	; 0x19ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    196e:	a5 e3       	ldi	r26, 0x35	; 53
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e5 e3       	ldi	r30, 0x35	; 53
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	48 2f       	mov	r20, r24
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	02 2e       	mov	r0, r18
    1986:	02 c0       	rjmp	.+4      	; 0x198c <GPIO_writePin+0x164>
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	0a 94       	dec	r0
    198e:	e2 f7       	brpl	.-8      	; 0x1988 <GPIO_writePin+0x160>
    1990:	80 95       	com	r24
    1992:	84 23       	and	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	2b c0       	rjmp	.+86     	; 0x19ee <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	a1 f4       	brne	.+40     	; 0x19c6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    199e:	a2 e3       	ldi	r26, 0x32	; 50
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e2 e3       	ldi	r30, 0x32	; 50
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 2e       	mov	r0, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <GPIO_writePin+0x194>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <GPIO_writePin+0x190>
    19c0:	84 2b       	or	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19c6:	a2 e3       	ldi	r26, 0x32	; 50
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e2 e3       	ldi	r30, 0x32	; 50
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	48 2f       	mov	r20, r24
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <GPIO_writePin+0x1bc>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <GPIO_writePin+0x1b8>
    19e8:	80 95       	com	r24
    19ea:	84 23       	and	r24, r20
    19ec:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <GPIO_readPin>:
 * 			uint8 pin_num : 	This Arg shall indicate the register pin number in the
 * 							    specified port
 *	[RETURNS]:	The function returns the value on the pin (High or Low)
 ----------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <GPIO_readPin+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <GPIO_readPin+0x8>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	8a 83       	std	Y+2, r24	; 0x02
    1a0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = LOGIC_LOW;
    1a10:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT))
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <GPIO_readPin+0x1c>
    1a18:	84 c0       	rjmp	.+264    	; 0x1b22 <GPIO_readPin+0x124>
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	88 30       	cpi	r24, 0x08	; 8
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <GPIO_readPin+0x24>
    1a20:	80 c0       	rjmp	.+256    	; 0x1b22 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a30:	41 30       	cpi	r20, 0x01	; 1
    1a32:	51 05       	cpc	r21, r1
    1a34:	79 f1       	breq	.+94     	; 0x1a94 <GPIO_readPin+0x96>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	82 30       	cpi	r24, 0x02	; 2
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	34 f4       	brge	.+12     	; 0x1a4c <GPIO_readPin+0x4e>
    1a40:	2c 81       	ldd	r18, Y+4	; 0x04
    1a42:	3d 81       	ldd	r19, Y+5	; 0x05
    1a44:	21 15       	cp	r18, r1
    1a46:	31 05       	cpc	r19, r1
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <GPIO_readPin+0x66>
    1a4a:	6b c0       	rjmp	.+214    	; 0x1b22 <GPIO_readPin+0x124>
    1a4c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a4e:	5d 81       	ldd	r21, Y+5	; 0x05
    1a50:	42 30       	cpi	r20, 0x02	; 2
    1a52:	51 05       	cpc	r21, r1
    1a54:	b9 f1       	breq	.+110    	; 0x1ac4 <GPIO_readPin+0xc6>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <GPIO_readPin+0x64>
    1a60:	49 c0       	rjmp	.+146    	; 0x1af4 <GPIO_readPin+0xf6>
    1a62:	5f c0       	rjmp	.+190    	; 0x1b22 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a64:	e9 e3       	ldi	r30, 0x39	; 57
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <GPIO_readPin+0x7e>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <GPIO_readPin+0x7a>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	90 70       	andi	r25, 0x00	; 0
    1a86:	88 23       	and	r24, r24
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <GPIO_readPin+0x92>
			{
				pinValue = LOGIC_HIGH;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	49 c0       	rjmp	.+146    	; 0x1b22 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	47 c0       	rjmp	.+142    	; 0x1b22 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a94:	e6 e3       	ldi	r30, 0x36	; 54
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <GPIO_readPin+0xae>
    1aa8:	55 95       	asr	r21
    1aaa:	47 95       	ror	r20
    1aac:	8a 95       	dec	r24
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <GPIO_readPin+0xaa>
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	81 70       	andi	r24, 0x01	; 1
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	88 23       	and	r24, r24
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <GPIO_readPin+0xc2>
			{
				pinValue = LOGIC_HIGH;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	31 c0       	rjmp	.+98     	; 0x1b22 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1ac0:	19 82       	std	Y+1, r1	; 0x01
    1ac2:	2f c0       	rjmp	.+94     	; 0x1b22 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ac4:	e3 e3       	ldi	r30, 0x33	; 51
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <GPIO_readPin+0xde>
    1ad8:	55 95       	asr	r21
    1ada:	47 95       	ror	r20
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <GPIO_readPin+0xda>
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	90 70       	andi	r25, 0x00	; 0
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <GPIO_readPin+0xf2>
			{
				pinValue = LOGIC_HIGH;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	19 c0       	rjmp	.+50     	; 0x1b22 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1af0:	19 82       	std	Y+1, r1	; 0x01
    1af2:	17 c0       	rjmp	.+46     	; 0x1b22 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <GPIO_readPin+0x10e>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <GPIO_readPin+0x10a>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	90 70       	andi	r25, 0x00	; 0
    1b16:	88 23       	and	r24, r24
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <GPIO_readPin+0x122>
			{
				pinValue = LOGIC_HIGH;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <GPIO_readPin+0x124>
			}
			else
			{
				pinValue = LOGIC_LOW;
    1b20:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pinValue;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <GPIO_setPortDirection>:
 * 			GPIO_PinDirectionType direction :	This Arg shall indicate the direction of
 * 												the pin
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_setPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <GPIO_setPortDirection+0x6>
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <GPIO_setPortDirection+0x8>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	84 30       	cpi	r24, 0x04	; 4
    1b48:	90 f5       	brcc	.+100    	; 0x1bae <GPIO_setPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 83       	std	Y+4, r19	; 0x04
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	d1 f0       	breq	.+52     	; 0x1b92 <GPIO_setPortDirection+0x5e>
    1b5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b60:	3c 81       	ldd	r19, Y+4	; 0x04
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <GPIO_setPortDirection+0x3e>
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	61 f0       	breq	.+24     	; 0x1b88 <GPIO_setPortDirection+0x54>
    1b70:	1e c0       	rjmp	.+60     	; 0x1bae <GPIO_setPortDirection+0x7a>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <GPIO_setPortDirection+0x68>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	91 05       	cpc	r25, r1
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <GPIO_setPortDirection+0x72>
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <GPIO_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b88:	ea e3       	ldi	r30, 0x3A	; 58
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	80 83       	st	Z, r24
    1b90:	0e c0       	rjmp	.+28     	; 0x1bae <GPIO_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b92:	e7 e3       	ldi	r30, 0x37	; 55
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	80 83       	st	Z, r24
    1b9a:	09 c0       	rjmp	.+18     	; 0x1bae <GPIO_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b9c:	e4 e3       	ldi	r30, 0x34	; 52
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <GPIO_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ba6:	e1 e3       	ldi	r30, 0x31	; 49
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <GPIO_writePort>:
 * [in]		uint8 port_num :	This Arg shall indicate the register port number
 * 			uint8 value :		This Arg shall indicate the value to write in port
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <GPIO_writePort+0x6>
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <GPIO_writePort+0x8>
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	90 f5       	brcc	.+100    	; 0x1c36 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3c 83       	std	Y+4, r19	; 0x04
    1bda:	2b 83       	std	Y+3, r18	; 0x03
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	91 05       	cpc	r25, r1
    1be4:	d1 f0       	breq	.+52     	; 0x1c1a <GPIO_writePort+0x5e>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <GPIO_writePort+0x3e>
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <GPIO_writePort+0x54>
    1bf8:	1e c0       	rjmp	.+60     	; 0x1c36 <GPIO_writePort+0x7a>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	81 f0       	breq	.+32     	; 0x1c24 <GPIO_writePort+0x68>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	83 30       	cpi	r24, 0x03	; 3
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <GPIO_writePort+0x72>
    1c0e:	13 c0       	rjmp	.+38     	; 0x1c36 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c10:	eb e3       	ldi	r30, 0x3B	; 59
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	80 83       	st	Z, r24
    1c18:	0e c0       	rjmp	.+28     	; 0x1c36 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c1a:	e8 e3       	ldi	r30, 0x38	; 56
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c24:	e5 e3       	ldi	r30, 0x35	; 53
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c2e:	e2 e3       	ldi	r30, 0x32	; 50
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <GPIO_readPort>:
 * [ARGS]:
 * [in]		uint8 port_num :	This Arg shall indicate the register port number
 *	[RETURNS]:	The function returns the value on the port
 ----------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <GPIO_readPort+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <GPIO_readPort+0x8>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 portValue = 0x00;
    1c52:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	84 30       	cpi	r24, 0x04	; 4
    1c58:	90 f5       	brcc	.+100    	; 0x1cbe <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	3c 83       	std	Y+4, r19	; 0x04
    1c62:	2b 83       	std	Y+3, r18	; 0x03
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	91 05       	cpc	r25, r1
    1c6c:	d1 f0       	breq	.+52     	; 0x1ca2 <GPIO_readPort+0x5e>
    1c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c70:	3c 81       	ldd	r19, Y+4	; 0x04
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <GPIO_readPort+0x3e>
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	61 f0       	breq	.+24     	; 0x1c98 <GPIO_readPort+0x54>
    1c80:	1e c0       	rjmp	.+60     	; 0x1cbe <GPIO_readPort+0x7a>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	81 f0       	breq	.+32     	; 0x1cac <GPIO_readPort+0x68>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	83 30       	cpi	r24, 0x03	; 3
    1c92:	91 05       	cpc	r25, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <GPIO_readPort+0x72>
    1c96:	13 c0       	rjmp	.+38     	; 0x1cbe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			portValue = PINA;
    1c98:	e9 e3       	ldi	r30, 0x39	; 57
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	0e c0       	rjmp	.+28     	; 0x1cbe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			portValue = PINB;
    1ca2:	e6 e3       	ldi	r30, 0x36	; 54
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	09 c0       	rjmp	.+18     	; 0x1cbe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			portValue = PINC;
    1cac:	e3 e3       	ldi	r30, 0x33	; 51
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			portValue = PIND;
    1cb6:	e0 e3       	ldi	r30, 0x30	; 48
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return portValue;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <KEYPAD_getPressedKey>:
 * 					function will return the number order of this pressed button
 * [ARGS]:			No Arguments
 *	[RETURNS]:		The function return the value of the pressed button
 ----------------------------------------------------------------------------------------*/
uint8 KEYPAD_getPressedKey(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <KEYPAD_getPressedKey+0x6>
    1cd4:	0f 92       	push	r0
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col, value = 0;
    1cda:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    1cdc:	1a 82       	std	Y+2, r1	; 0x02
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <KEYPAD_getPressedKey+0x98>
		{
			/* First, set all the port as an Input port */
			GPIO_setPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <GPIO_setPortDirection>

			/* Then, begin to set each pin in the port as an output */
			GPIO_setPinDirection(KEYPAD_PORT_ID, (col+KEYPAD_FIRST_COL_PIN_ID), PIN_OUTPUT);
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	98 2f       	mov	r25, r24
    1cec:	9c 5f       	subi	r25, 0xFC	; 252
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	69 2f       	mov	r22, r25
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 29 0b 	call	0x1652	; 0x1652 <GPIO_setPinDirection>

#if (KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Put the value of the PORT in a variable as all 1 and the only pressed one is 0 */
			value = ~(1<<(col+KEYPAD_FIRST_COL_PIN_ID));
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	88 2f       	mov	r24, r24
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 01       	movw	r18, r24
    1d00:	2c 5f       	subi	r18, 0xFC	; 252
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <KEYPAD_getPressedKey+0x40>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	2a 95       	dec	r18
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <KEYPAD_getPressedKey+0x3c>
    1d12:	80 95       	com	r24
    1d14:	89 83       	std	Y+1, r24	; 0x01
			/* Put the value of the PORT in a variable as all 0 and the only pressed one is 1 */
			value = 1<<(col+KEYPAD_FIRST_COL_PIN_ID);
#endif

			/*  */
			GPIO_writePort(KEYPAD_PORT_ID, value);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	69 81       	ldd	r22, Y+1	; 0x01
    1d1a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePort>

			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	1c c0       	rjmp	.+56     	; 0x1d5a <KEYPAD_getPressedKey+0x8c>
			{
				if((GPIO_readPin(KEYPAD_PORT_ID,row)) == KEYPAD_BUTTON_PRESSED)
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	6b 81       	ldd	r22, Y+3	; 0x03
    1d26:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <GPIO_readPin>
    1d2a:	88 23       	and	r24, r24
    1d2c:	99 f4       	brne	.+38     	; 0x1d54 <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row * KEYPAD_NUM_OF_COLS) + col + 1);
					/* An empirical equation used to get the button number */
#elif (KEYPAD_NUM_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_OF_COLS) + col + 1);
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	89 0f       	add	r24, r25
    1d42:	8f 5f       	subi	r24, 0xFF	; 255
    1d44:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret
#endif

			/*  */
			GPIO_writePort(KEYPAD_PORT_ID, value);

			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	8b 83       	std	Y+3, r24	; 0x03
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	08 f3       	brcs	.-62     	; 0x1d22 <KEYPAD_getPressedKey+0x54>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 row, col, value = 0;
	while(1)
	{
		for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	8f 5f       	subi	r24, 0xFF	; 255
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <KEYPAD_getPressedKey+0xa0>
    1d6c:	b9 cf       	rjmp	.-142    	; 0x1ce0 <KEYPAD_getPressedKey+0x12>
    1d6e:	b6 cf       	rjmp	.-148    	; 0x1cdc <KEYPAD_getPressedKey+0xe>

00001d70 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_OF_COLS == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d7e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	3c 83       	std	Y+4, r19	; 0x04
    1d88:	2b 83       	std	Y+3, r18	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	88 30       	cpi	r24, 0x08	; 8
    1d90:	91 05       	cpc	r25, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d94:	70 c0       	rjmp	.+224    	; 0x1e76 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	29 30       	cpi	r18, 0x09	; 9
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	5c f5       	brge	.+86     	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	84 30       	cpi	r24, 0x04	; 4
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1daa:	59 c0       	rjmp	.+178    	; 0x1e5e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	25 30       	cpi	r18, 0x05	; 5
    1db2:	31 05       	cpc	r19, r1
    1db4:	9c f4       	brge	.+38     	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1dc0:	48 c0       	rjmp	.+144    	; 0x1e52 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc6:	23 30       	cpi	r18, 0x03	; 3
    1dc8:	31 05       	cpc	r19, r1
    1dca:	0c f0       	brlt	.+2      	; 0x1dce <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1dcc:	45 c0       	rjmp	.+138    	; 0x1e58 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1dd8:	39 c0       	rjmp	.+114    	; 0x1e4c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1dda:	66 c0       	rjmp	.+204    	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
    1ddc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dde:	3c 81       	ldd	r19, Y+4	; 0x04
    1de0:	26 30       	cpi	r18, 0x06	; 6
    1de2:	31 05       	cpc	r19, r1
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1de6:	41 c0       	rjmp	.+130    	; 0x1e6a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	87 30       	cpi	r24, 0x07	; 7
    1dee:	91 05       	cpc	r25, r1
    1df0:	0c f0       	brlt	.+2      	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1df2:	3e c0       	rjmp	.+124    	; 0x1e70 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1df4:	37 c0       	rjmp	.+110    	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1df6:	2b 81       	ldd	r18, Y+3	; 0x03
    1df8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfa:	2c 30       	cpi	r18, 0x0C	; 12
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e00:	46 c0       	rjmp	.+140    	; 0x1e8e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	8d 30       	cpi	r24, 0x0D	; 13
    1e08:	91 05       	cpc	r25, r1
    1e0a:	5c f4       	brge	.+22     	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e10:	2a 30       	cpi	r18, 0x0A	; 10
    1e12:	31 05       	cpc	r19, r1
    1e14:	b1 f1       	breq	.+108    	; 0x1e82 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	8b 30       	cpi	r24, 0x0B	; 11
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	a4 f5       	brge	.+104    	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1e20:	2d c0       	rjmp	.+90     	; 0x1e7c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1e22:	2b 81       	ldd	r18, Y+3	; 0x03
    1e24:	3c 81       	ldd	r19, Y+4	; 0x04
    1e26:	2e 30       	cpi	r18, 0x0E	; 14
    1e28:	31 05       	cpc	r19, r1
    1e2a:	b9 f1       	breq	.+110    	; 0x1e9a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	8e 30       	cpi	r24, 0x0E	; 14
    1e32:	91 05       	cpc	r25, r1
    1e34:	7c f1       	brlt	.+94     	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1e36:	2b 81       	ldd	r18, Y+3	; 0x03
    1e38:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3a:	2f 30       	cpi	r18, 0x0F	; 15
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	79 f1       	breq	.+94     	; 0x1e9e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	80 31       	cpi	r24, 0x10	; 16
    1e46:	91 05       	cpc	r25, r1
    1e48:	69 f1       	breq	.+90     	; 0x1ea4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e4a:	2e c0       	rjmp	.+92     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		keypad_button = 7;
    1e4c:	87 e0       	ldi	r24, 0x07	; 7
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	2b c0       	rjmp	.+86     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 2:
		keypad_button = 8;
    1e52:	88 e0       	ldi	r24, 0x08	; 8
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	28 c0       	rjmp	.+80     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 3:
		keypad_button = 9;
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	25 c0       	rjmp	.+74     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 4:
		keypad_button = '%';
    1e5e:	85 e2       	ldi	r24, 0x25	; 37
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	22 c0       	rjmp	.+68     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 5:
		keypad_button = 4;
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	1f c0       	rjmp	.+62     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 6:
		keypad_button = 5;
    1e6a:	85 e0       	ldi	r24, 0x05	; 5
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	1c c0       	rjmp	.+56     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 7:
		keypad_button = 6;
    1e70:	86 e0       	ldi	r24, 0x06	; 6
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	19 c0       	rjmp	.+50     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 8:
		keypad_button = 'x';
    1e76:	88 e7       	ldi	r24, 0x78	; 120
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	16 c0       	rjmp	.+44     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 9:
		keypad_button = 1;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	89 83       	std	Y+1, r24	; 0x01
    1e80:	13 c0       	rjmp	.+38     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 10:
		keypad_button = 2;
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	10 c0       	rjmp	.+32     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 11:
		keypad_button = 3;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 12:
		keypad_button = '-';
    1e8e:	8d e2       	ldi	r24, 0x2D	; 45
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	0a c0       	rjmp	.+20     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 13:
		keypad_button = 13;		/* ASCII code of Enter is 13 */
    1e94:	8d e0       	ldi	r24, 0x0D	; 13
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 14:
		keypad_button = 0;
    1e9a:	19 82       	std	Y+1, r1	; 0x01
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 15:
		keypad_button = '=';
    1e9e:	8d e3       	ldi	r24, 0x3D	; 61
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 16:
		keypad_button = '+';
    1ea4:	8b e2       	ldi	r24, 0x2B	; 43
    1ea6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <LCD_sendCommand>:
 * [ARGS]:
 * [in]		uint8 command :		This Arg shall indicate the sent command
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	e9 97       	sbiw	r28, 0x39	; 57
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	89 af       	std	Y+57, r24	; 0x39
	 * 5. delay t(pw)-t(dsw) = 290-100 = 190 ns	~1ms
	 * 6. send the command
	 * 7. delay t(dsw) = 100 ns	~1ms
	 * 8. E = 0
	 * 9. delay t(h) = 13 ns 	~1ms */
	GPIO_writePin(LCD_PORT, LCD_RS_PIN, LOGIC_LOW);
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
	GPIO_writePin(LCD_PORT, LCD_RW_PIN, LOGIC_LOW);
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e8       	ldi	r26, 0x80	; 128
    1ee8:	bf e3       	ldi	r27, 0x3F	; 63
    1eea:	8d ab       	std	Y+53, r24	; 0x35
    1eec:	9e ab       	std	Y+54, r25	; 0x36
    1eee:	af ab       	std	Y+55, r26	; 0x37
    1ef0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a e7       	ldi	r20, 0x7A	; 122
    1f00:	53 e4       	ldi	r21, 0x43	; 67
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	89 ab       	std	Y+49, r24	; 0x31
    1f0c:	9a ab       	std	Y+50, r25	; 0x32
    1f0e:	ab ab       	std	Y+51, r26	; 0x33
    1f10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f12:	69 a9       	ldd	r22, Y+49	; 0x31
    1f14:	7a a9       	ldd	r23, Y+50	; 0x32
    1f16:	8b a9       	ldd	r24, Y+51	; 0x33
    1f18:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	98 ab       	std	Y+48, r25	; 0x30
    1f30:	8f a7       	std	Y+47, r24	; 0x2f
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1f34:	69 a9       	ldd	r22, Y+49	; 0x31
    1f36:	7a a9       	ldd	r23, Y+50	; 0x32
    1f38:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f50:	8f a9       	ldd	r24, Y+55	; 0x37
    1f52:	98 ad       	ldd	r25, Y+56	; 0x38
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	98 ab       	std	Y+48, r25	; 0x30
    1f72:	8f a7       	std	Y+47, r24	; 0x2f
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <LCD_sendCommand+0xdc>
    1f76:	89 e1       	ldi	r24, 0x19	; 25
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9e a7       	std	Y+46, r25	; 0x2e
    1f7c:	8d a7       	std	Y+45, r24	; 0x2d
    1f7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f80:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_sendCommand+0xca>
    1f86:	9e a7       	std	Y+46, r25	; 0x2e
    1f88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <LCD_sendCommand+0xbe>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	98 ab       	std	Y+48, r25	; 0x30
    1fb0:	8f a7       	std	Y+47, r24	; 0x2f
    1fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb6:	9c a7       	std	Y+44, r25	; 0x2c
    1fb8:	8b a7       	std	Y+43, r24	; 0x2b
    1fba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_sendCommand+0x106>
    1fc2:	9c a7       	std	Y+44, r25	; 0x2c
    1fc4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_HIGH);
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a0 e8       	ldi	r26, 0x80	; 128
    1fd6:	bf e3       	ldi	r27, 0x3F	; 63
    1fd8:	8f a3       	std	Y+39, r24	; 0x27
    1fda:	98 a7       	std	Y+40, r25	; 0x28
    1fdc:	a9 a7       	std	Y+41, r26	; 0x29
    1fde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	4a e7       	ldi	r20, 0x7A	; 122
    1fee:	53 e4       	ldi	r21, 0x43	; 67
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	8b a3       	std	Y+35, r24	; 0x23
    1ffa:	9c a3       	std	Y+36, r25	; 0x24
    1ffc:	ad a3       	std	Y+37, r26	; 0x25
    1ffe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2000:	6b a1       	ldd	r22, Y+35	; 0x23
    2002:	7c a1       	ldd	r23, Y+36	; 0x24
    2004:	8d a1       	ldd	r24, Y+37	; 0x25
    2006:	9e a1       	ldd	r25, Y+38	; 0x26
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2014:	88 23       	and	r24, r24
    2016:	2c f4       	brge	.+10     	; 0x2022 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9a a3       	std	Y+34, r25	; 0x22
    201e:	89 a3       	std	Y+33, r24	; 0x21
    2020:	3f c0       	rjmp	.+126    	; 0x20a0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2022:	6b a1       	ldd	r22, Y+35	; 0x23
    2024:	7c a1       	ldd	r23, Y+36	; 0x24
    2026:	8d a1       	ldd	r24, Y+37	; 0x25
    2028:	9e a1       	ldd	r25, Y+38	; 0x26
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	3f ef       	ldi	r19, 0xFF	; 255
    202e:	4f e7       	ldi	r20, 0x7F	; 127
    2030:	57 e4       	ldi	r21, 0x47	; 71
    2032:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2036:	18 16       	cp	r1, r24
    2038:	4c f5       	brge	.+82     	; 0x208c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203a:	6f a1       	ldd	r22, Y+39	; 0x27
    203c:	78 a5       	ldd	r23, Y+40	; 0x28
    203e:	89 a5       	ldd	r24, Y+41	; 0x29
    2040:	9a a5       	ldd	r25, Y+42	; 0x2a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e2       	ldi	r20, 0x20	; 32
    2048:	51 e4       	ldi	r21, 0x41	; 65
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	9a a3       	std	Y+34, r25	; 0x22
    2060:	89 a3       	std	Y+33, r24	; 0x21
    2062:	0f c0       	rjmp	.+30     	; 0x2082 <LCD_sendCommand+0x1ca>
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	98 a3       	std	Y+32, r25	; 0x20
    206a:	8f 8f       	std	Y+31, r24	; 0x1f
    206c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    206e:	98 a1       	ldd	r25, Y+32	; 0x20
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <LCD_sendCommand+0x1b8>
    2074:	98 a3       	std	Y+32, r25	; 0x20
    2076:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2078:	89 a1       	ldd	r24, Y+33	; 0x21
    207a:	9a a1       	ldd	r25, Y+34	; 0x22
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f7       	brne	.-38     	; 0x2064 <LCD_sendCommand+0x1ac>
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208c:	6b a1       	ldd	r22, Y+35	; 0x23
    208e:	7c a1       	ldd	r23, Y+36	; 0x24
    2090:	8d a1       	ldd	r24, Y+37	; 0x25
    2092:	9e a1       	ldd	r25, Y+38	; 0x26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9a a3       	std	Y+34, r25	; 0x22
    209e:	89 a3       	std	Y+33, r24	; 0x21
    20a0:	89 a1       	ldd	r24, Y+33	; 0x21
    20a2:	9a a1       	ldd	r25, Y+34	; 0x22
    20a4:	9e 8f       	std	Y+30, r25	; 0x1e
    20a6:	8d 8f       	std	Y+29, r24	; 0x1d
    20a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_sendCommand+0x1f4>
    20b0:	9e 8f       	std	Y+30, r25	; 0x1e
    20b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DB_PORT, command);
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	69 ad       	ldd	r22, Y+57	; 0x39
    20b8:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePort>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	89 8f       	std	Y+25, r24	; 0x19
    20c6:	9a 8f       	std	Y+26, r25	; 0x1a
    20c8:	ab 8f       	std	Y+27, r26	; 0x1b
    20ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	69 8d       	ldd	r22, Y+25	; 0x19
    20ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	53 e4       	ldi	r21, 0x43	; 67
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8d 8b       	std	Y+21, r24	; 0x15
    20e6:	9e 8b       	std	Y+22, r25	; 0x16
    20e8:	af 8b       	std	Y+23, r26	; 0x17
    20ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ec:	6d 89       	ldd	r22, Y+21	; 0x15
    20ee:	7e 89       	ldd	r23, Y+22	; 0x16
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	98 8d       	ldd	r25, Y+24	; 0x18
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <LCD_sendCommand+0x256>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
    210c:	3f c0       	rjmp	.+126    	; 0x218c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    210e:	6d 89       	ldd	r22, Y+21	; 0x15
    2110:	7e 89       	ldd	r23, Y+22	; 0x16
    2112:	8f 89       	ldd	r24, Y+23	; 0x17
    2114:	98 8d       	ldd	r25, Y+24	; 0x18
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	69 8d       	ldd	r22, Y+25	; 0x19
    2128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9c 8b       	std	Y+20, r25	; 0x14
    214c:	8b 8b       	std	Y+19, r24	; 0x13
    214e:	0f c0       	rjmp	.+30     	; 0x216e <LCD_sendCommand+0x2b6>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9a 8b       	std	Y+18, r25	; 0x12
    2156:	89 8b       	std	Y+17, r24	; 0x11
    2158:	89 89       	ldd	r24, Y+17	; 0x11
    215a:	9a 89       	ldd	r25, Y+18	; 0x12
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_sendCommand+0x2a4>
    2160:	9a 8b       	std	Y+18, r25	; 0x12
    2162:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9c 8b       	std	Y+20, r25	; 0x14
    216c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <LCD_sendCommand+0x298>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6d 89       	ldd	r22, Y+21	; 0x15
    217a:	7e 89       	ldd	r23, Y+22	; 0x16
    217c:	8f 89       	ldd	r24, Y+23	; 0x17
    217e:	98 8d       	ldd	r25, Y+24	; 0x18
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	98 8b       	std	Y+16, r25	; 0x10
    2192:	8f 87       	std	Y+15, r24	; 0x0f
    2194:	8f 85       	ldd	r24, Y+15	; 0x0f
    2196:	98 89       	ldd	r25, Y+16	; 0x10
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_sendCommand+0x2e0>
    219c:	98 8b       	std	Y+16, r25	; 0x10
    219e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_LOW);
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	64 e0       	ldi	r22, 0x04	; 4
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a0 e8       	ldi	r26, 0x80	; 128
    21b0:	bf e3       	ldi	r27, 0x3F	; 63
    21b2:	8b 87       	std	Y+11, r24	; 0x0b
    21b4:	9c 87       	std	Y+12, r25	; 0x0c
    21b6:	ad 87       	std	Y+13, r26	; 0x0d
    21b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a e7       	ldi	r20, 0x7A	; 122
    21c8:	53 e4       	ldi	r21, 0x43	; 67
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8f 83       	std	Y+7, r24	; 0x07
    21d4:	98 87       	std	Y+8, r25	; 0x08
    21d6:	a9 87       	std	Y+9, r26	; 0x09
    21d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21da:	6f 81       	ldd	r22, Y+7	; 0x07
    21dc:	78 85       	ldd	r23, Y+8	; 0x08
    21de:	89 85       	ldd	r24, Y+9	; 0x09
    21e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <LCD_sendCommand+0x344>
		__ticks = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
    21fa:	3f c0       	rjmp	.+126    	; 0x227a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	4c f5       	brge	.+82     	; 0x2266 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	6b 85       	ldd	r22, Y+11	; 0x0b
    2216:	7c 85       	ldd	r23, Y+12	; 0x0c
    2218:	8d 85       	ldd	r24, Y+13	; 0x0d
    221a:	9e 85       	ldd	r25, Y+14	; 0x0e
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	0f c0       	rjmp	.+30     	; 0x225c <LCD_sendCommand+0x3a4>
    223e:	89 e1       	ldi	r24, 0x19	; 25
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9c 83       	std	Y+4, r25	; 0x04
    2244:	8b 83       	std	Y+3, r24	; 0x03
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_sendCommand+0x392>
    224e:	9c 83       	std	Y+4, r25	; 0x04
    2250:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	69 f7       	brne	.-38     	; 0x223e <LCD_sendCommand+0x386>
    2264:	14 c0       	rjmp	.+40     	; 0x228e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9e 83       	std	Y+6, r25	; 0x06
    2278:	8d 83       	std	Y+5, r24	; 0x05
    227a:	8d 81       	ldd	r24, Y+5	; 0x05
    227c:	9e 81       	ldd	r25, Y+6	; 0x06
    227e:	9a 83       	std	Y+2, r25	; 0x02
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_sendCommand+0x3ce>
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    228e:	e9 96       	adiw	r28, 0x39	; 57
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	cd bf       	out	0x3d, r28	; 61
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <LCD_displayCharacter>:
 * [ARGS]:
 * [in]		uint8 character :	This Arg shall indicate the sent character to display on LCD
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayCharacter(uint8 character)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	e9 97       	sbiw	r28, 0x39	; 57
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	89 af       	std	Y+57, r24	; 0x39
	 * 5. delay t(pw)-t(dsw) = 290-100 = 190 ns	~1ms
	 * 6. send the command
	 * 7. delay t(dsw) = 100 ns	~1ms
	 * 8. E = 0
	 * 9. delay t(h) = 13 ns 	~1ms */
	GPIO_writePin(LCD_PORT, LCD_RS_PIN, LOGIC_HIGH);
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	62 e0       	ldi	r22, 0x02	; 2
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
	GPIO_writePin(LCD_PORT, LCD_RW_PIN, LOGIC_LOW);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	63 e0       	ldi	r22, 0x03	; 3
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e8       	ldi	r26, 0x80	; 128
    22d0:	bf e3       	ldi	r27, 0x3F	; 63
    22d2:	8d ab       	std	Y+53, r24	; 0x35
    22d4:	9e ab       	std	Y+54, r25	; 0x36
    22d6:	af ab       	std	Y+55, r26	; 0x37
    22d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6d a9       	ldd	r22, Y+53	; 0x35
    22dc:	7e a9       	ldd	r23, Y+54	; 0x36
    22de:	8f a9       	ldd	r24, Y+55	; 0x37
    22e0:	98 ad       	ldd	r25, Y+56	; 0x38
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a e7       	ldi	r20, 0x7A	; 122
    22e8:	53 e4       	ldi	r21, 0x43	; 67
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	89 ab       	std	Y+49, r24	; 0x31
    22f4:	9a ab       	std	Y+50, r25	; 0x32
    22f6:	ab ab       	std	Y+51, r26	; 0x33
    22f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22fa:	69 a9       	ldd	r22, Y+49	; 0x31
    22fc:	7a a9       	ldd	r23, Y+50	; 0x32
    22fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2300:	9c a9       	ldd	r25, Y+52	; 0x34
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	98 ab       	std	Y+48, r25	; 0x30
    2318:	8f a7       	std	Y+47, r24	; 0x2f
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    231c:	69 a9       	ldd	r22, Y+49	; 0x31
    231e:	7a a9       	ldd	r23, Y+50	; 0x32
    2320:	8b a9       	ldd	r24, Y+51	; 0x33
    2322:	9c a9       	ldd	r25, Y+52	; 0x34
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6d a9       	ldd	r22, Y+53	; 0x35
    2336:	7e a9       	ldd	r23, Y+54	; 0x36
    2338:	8f a9       	ldd	r24, Y+55	; 0x37
    233a:	98 ad       	ldd	r25, Y+56	; 0x38
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	98 ab       	std	Y+48, r25	; 0x30
    235a:	8f a7       	std	Y+47, r24	; 0x2f
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_displayCharacter+0xdc>
    235e:	89 e1       	ldi	r24, 0x19	; 25
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e a7       	std	Y+46, r25	; 0x2e
    2364:	8d a7       	std	Y+45, r24	; 0x2d
    2366:	8d a5       	ldd	r24, Y+45	; 0x2d
    2368:	9e a5       	ldd	r25, Y+46	; 0x2e
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_displayCharacter+0xca>
    236e:	9e a7       	std	Y+46, r25	; 0x2e
    2370:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8f a5       	ldd	r24, Y+47	; 0x2f
    2374:	98 a9       	ldd	r25, Y+48	; 0x30
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	98 ab       	std	Y+48, r25	; 0x30
    237a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8f a5       	ldd	r24, Y+47	; 0x2f
    237e:	98 a9       	ldd	r25, Y+48	; 0x30
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_displayCharacter+0xbe>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	69 a9       	ldd	r22, Y+49	; 0x31
    2388:	7a a9       	ldd	r23, Y+50	; 0x32
    238a:	8b a9       	ldd	r24, Y+51	; 0x33
    238c:	9c a9       	ldd	r25, Y+52	; 0x34
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	98 ab       	std	Y+48, r25	; 0x30
    2398:	8f a7       	std	Y+47, r24	; 0x2f
    239a:	8f a5       	ldd	r24, Y+47	; 0x2f
    239c:	98 a9       	ldd	r25, Y+48	; 0x30
    239e:	9c a7       	std	Y+44, r25	; 0x2c
    23a0:	8b a7       	std	Y+43, r24	; 0x2b
    23a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_displayCharacter+0x106>
    23aa:	9c a7       	std	Y+44, r25	; 0x2c
    23ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_HIGH);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	64 e0       	ldi	r22, 0x04	; 4
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8f a3       	std	Y+39, r24	; 0x27
    23c2:	98 a7       	std	Y+40, r25	; 0x28
    23c4:	a9 a7       	std	Y+41, r26	; 0x29
    23c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6f a1       	ldd	r22, Y+39	; 0x27
    23ca:	78 a5       	ldd	r23, Y+40	; 0x28
    23cc:	89 a5       	ldd	r24, Y+41	; 0x29
    23ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	53 e4       	ldi	r21, 0x43	; 67
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	8b a3       	std	Y+35, r24	; 0x23
    23e2:	9c a3       	std	Y+36, r25	; 0x24
    23e4:	ad a3       	std	Y+37, r26	; 0x25
    23e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23e8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ea:	7c a1       	ldd	r23, Y+36	; 0x24
    23ec:	8d a1       	ldd	r24, Y+37	; 0x25
    23ee:	9e a1       	ldd	r25, Y+38	; 0x26
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9a a3       	std	Y+34, r25	; 0x22
    2406:	89 a3       	std	Y+33, r24	; 0x21
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    240a:	6b a1       	ldd	r22, Y+35	; 0x23
    240c:	7c a1       	ldd	r23, Y+36	; 0x24
    240e:	8d a1       	ldd	r24, Y+37	; 0x25
    2410:	9e a1       	ldd	r25, Y+38	; 0x26
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6f a1       	ldd	r22, Y+39	; 0x27
    2424:	78 a5       	ldd	r23, Y+40	; 0x28
    2426:	89 a5       	ldd	r24, Y+41	; 0x29
    2428:	9a a5       	ldd	r25, Y+42	; 0x2a
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_displayCharacter+0x1ca>
    244c:	89 e1       	ldi	r24, 0x19	; 25
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	98 a3       	std	Y+32, r25	; 0x20
    2452:	8f 8f       	std	Y+31, r24	; 0x1f
    2454:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2456:	98 a1       	ldd	r25, Y+32	; 0x20
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_displayCharacter+0x1b8>
    245c:	98 a3       	std	Y+32, r25	; 0x20
    245e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	89 a1       	ldd	r24, Y+33	; 0x21
    2462:	9a a1       	ldd	r25, Y+34	; 0x22
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	9a a3       	std	Y+34, r25	; 0x22
    2468:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	89 a1       	ldd	r24, Y+33	; 0x21
    246c:	9a a1       	ldd	r25, Y+34	; 0x22
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_displayCharacter+0x1ac>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	6b a1       	ldd	r22, Y+35	; 0x23
    2476:	7c a1       	ldd	r23, Y+36	; 0x24
    2478:	8d a1       	ldd	r24, Y+37	; 0x25
    247a:	9e a1       	ldd	r25, Y+38	; 0x26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	89 a1       	ldd	r24, Y+33	; 0x21
    248a:	9a a1       	ldd	r25, Y+34	; 0x22
    248c:	9e 8f       	std	Y+30, r25	; 0x1e
    248e:	8d 8f       	std	Y+29, r24	; 0x1d
    2490:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2492:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_displayCharacter+0x1f4>
    2498:	9e 8f       	std	Y+30, r25	; 0x1e
    249a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_DB_PORT, character);
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	69 ad       	ldd	r22, Y+57	; 0x39
    24a0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <GPIO_writePort>
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e8       	ldi	r26, 0x80	; 128
    24aa:	bf e3       	ldi	r27, 0x3F	; 63
    24ac:	89 8f       	std	Y+25, r24	; 0x19
    24ae:	9a 8f       	std	Y+26, r25	; 0x1a
    24b0:	ab 8f       	std	Y+27, r26	; 0x1b
    24b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	69 8d       	ldd	r22, Y+25	; 0x19
    24b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	53 e4       	ldi	r21, 0x43	; 67
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	8d 8b       	std	Y+21, r24	; 0x15
    24ce:	9e 8b       	std	Y+22, r25	; 0x16
    24d0:	af 8b       	std	Y+23, r26	; 0x17
    24d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 8b       	std	Y+20, r25	; 0x14
    24f2:	8b 8b       	std	Y+19, r24	; 0x13
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	69 8d       	ldd	r22, Y+25	; 0x19
    2510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <LCD_displayCharacter+0x2b6>
    2538:	89 e1       	ldi	r24, 0x19	; 25
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
    2540:	89 89       	ldd	r24, Y+17	; 0x11
    2542:	9a 89       	ldd	r25, Y+18	; 0x12
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_displayCharacter+0x2a4>
    2548:	9a 8b       	std	Y+18, r25	; 0x12
    254a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8b 89       	ldd	r24, Y+19	; 0x13
    254e:	9c 89       	ldd	r25, Y+20	; 0x14
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8b 89       	ldd	r24, Y+19	; 0x13
    2558:	9c 89       	ldd	r25, Y+20	; 0x14
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <LCD_displayCharacter+0x298>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	8b 89       	ldd	r24, Y+19	; 0x13
    2576:	9c 89       	ldd	r25, Y+20	; 0x14
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f
    257c:	8f 85       	ldd	r24, Y+15	; 0x0f
    257e:	98 89       	ldd	r25, Y+16	; 0x10
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <LCD_displayCharacter+0x2e0>
    2584:	98 8b       	std	Y+16, r25	; 0x10
    2586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_PORT, LCD_E_PIN, LOGIC_LOW);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	64 e0       	ldi	r22, 0x04	; 4
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 14 0c 	call	0x1828	; 0x1828 <GPIO_writePin>
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a0 e8       	ldi	r26, 0x80	; 128
    2598:	bf e3       	ldi	r27, 0x3F	; 63
    259a:	8b 87       	std	Y+11, r24	; 0x0b
    259c:	9c 87       	std	Y+12, r25	; 0x0c
    259e:	ad 87       	std	Y+13, r26	; 0x0d
    25a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4a e7       	ldi	r20, 0x7A	; 122
    25b0:	53 e4       	ldi	r21, 0x43	; 67
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8f 83       	std	Y+7, r24	; 0x07
    25bc:	98 87       	std	Y+8, r25	; 0x08
    25be:	a9 87       	std	Y+9, r26	; 0x09
    25c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e8       	ldi	r20, 0x80	; 128
    25d0:	5f e3       	ldi	r21, 0x3F	; 63
    25d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d6:	88 23       	and	r24, r24
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f8:	18 16       	cp	r1, r24
    25fa:	4c f5       	brge	.+82     	; 0x264e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2600:	8d 85       	ldd	r24, Y+13	; 0x0d
    2602:	9e 85       	ldd	r25, Y+14	; 0x0e
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e2       	ldi	r20, 0x20	; 32
    260a:	51 e4       	ldi	r21, 0x41	; 65
    260c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	bc 01       	movw	r22, r24
    2616:	cd 01       	movw	r24, r26
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	0f c0       	rjmp	.+30     	; 0x2644 <LCD_displayCharacter+0x3a4>
    2626:	89 e1       	ldi	r24, 0x19	; 25
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_displayCharacter+0x392>
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	69 f7       	brne	.-38     	; 0x2626 <LCD_displayCharacter+0x386>
    264c:	14 c0       	rjmp	.+40     	; 0x2676 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	6f 81       	ldd	r22, Y+7	; 0x07
    2650:	78 85       	ldd	r23, Y+8	; 0x08
    2652:	89 85       	ldd	r24, Y+9	; 0x09
    2654:	9a 85       	ldd	r25, Y+10	; 0x0a
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_displayCharacter+0x3ce>
    2672:	9a 83       	std	Y+2, r25	; 0x02
    2674:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2676:	e9 96       	adiw	r28, 0x39	; 57
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <LCD_init>:
 * [DESCRIPTION]:	This Function is used to initiate the LCD
 * [ARGS]:		No Arguments
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_init(void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	 * 1. Set RS, R/W, E pins as output pins
	 * 2. Set DB port as output port
	 * 3. Send command to initiate 2-lines,8-bit mode
	 * 4. Send command to set cursor off
	 * 5. Send command to clear The screen */
	GPIO_setPinDirection(LCD_PORT, LCD_RS_PIN, PIN_OUTPUT);
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	62 e0       	ldi	r22, 0x02	; 2
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 29 0b 	call	0x1652	; 0x1652 <GPIO_setPinDirection>
	GPIO_setPinDirection(LCD_PORT, LCD_RW_PIN, PIN_OUTPUT);
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	63 e0       	ldi	r22, 0x03	; 3
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 29 0b 	call	0x1652	; 0x1652 <GPIO_setPinDirection>
	GPIO_setPinDirection(LCD_PORT, LCD_E_PIN, PIN_OUTPUT);
    26a4:	83 e0       	ldi	r24, 0x03	; 3
    26a6:	64 e0       	ldi	r22, 0x04	; 4
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	0e 94 29 0b 	call	0x1652	; 0x1652 <GPIO_setPinDirection>
	GPIO_setPortDirection(LCD_DB_PORT, PORT_OUTPUT);
    26ae:	82 e0       	ldi	r24, 0x02	; 2
    26b0:	6f ef       	ldi	r22, 0xFF	; 255
    26b2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <GPIO_setPortDirection>
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
    26b6:	88 e3       	ldi	r24, 0x38	; 56
    26b8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    26bc:	8c e0       	ldi	r24, 0x0C	; 12
    26be:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
}
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LCD_displayString>:
 * [ARGS]:
 * [in]		uint8 *str :	This Arg shall indicate the sent string to display on LCD
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LCD_displayString+0x6>
    26d4:	0f 92       	push	r0
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
    26da:	9b 83       	std	Y+3, r25	; 0x03
    26dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26de:	19 82       	std	Y+1, r1	; 0x01
    26e0:	0e c0       	rjmp	.+28     	; 0x26fe <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	fc 01       	movw	r30, r24
    26ee:	e2 0f       	add	r30, r18
    26f0:	f3 1f       	adc	r31, r19
    26f2:	80 81       	ld	r24, Z
    26f4:	0e 94 50 11 	call	0x22a0	; 0x22a0 <LCD_displayCharacter>
		i++;
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	8f 5f       	subi	r24, 0xFF	; 255
    26fc:	89 83       	std	Y+1, r24	; 0x01
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_displayString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	e2 0f       	add	r30, r18
    270c:	f3 1f       	adc	r31, r19
    270e:	80 81       	ld	r24, Z
    2710:	88 23       	and	r24, r24
    2712:	39 f7       	brne	.-50     	; 0x26e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <LCD_moveCursor>:
 * [in]		uint8 row :	This Arg shall indicate the specified row
 * 			uint8 column :	This Arg shall indicate the specified column
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row, uint8 column)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	00 d0       	rcall	.+0      	; 0x2726 <LCD_moveCursor+0x6>
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_moveCursor+0x8>
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	8a 83       	std	Y+2, r24	; 0x02
    2730:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;
	/* If the user entered any value bigger than the number of rows or columns */
	if((row >= NUM_OF_ROWS) || (column >= NUM_OF_COLS))
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	82 30       	cpi	r24, 0x02	; 2
    2736:	a0 f5       	brcc	.+104    	; 0x27a0 <LCD_moveCursor+0x80>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	80 31       	cpi	r24, 0x10	; 16
    273c:	88 f5       	brcc	.+98     	; 0x27a0 <LCD_moveCursor+0x80>
		 * first get into the specified row. then, add the given column number
		 * to the DDRAM address of the LCD to get the location address of the
		 * wanted location. Finally we send command to for the cursor to the beginning
		 * of the first line and add the location to it.
		 */
		switch(row)
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3d 83       	std	Y+5, r19	; 0x05
    2746:	2c 83       	std	Y+4, r18	; 0x04
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	91 05       	cpc	r25, r1
    2750:	c1 f0       	breq	.+48     	; 0x2782 <LCD_moveCursor+0x62>
    2752:	2c 81       	ldd	r18, Y+4	; 0x04
    2754:	3d 81       	ldd	r19, Y+5	; 0x05
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	2c f4       	brge	.+10     	; 0x2766 <LCD_moveCursor+0x46>
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	9d 81       	ldd	r25, Y+5	; 0x05
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	61 f0       	breq	.+24     	; 0x277c <LCD_moveCursor+0x5c>
    2764:	19 c0       	rjmp	.+50     	; 0x2798 <LCD_moveCursor+0x78>
    2766:	2c 81       	ldd	r18, Y+4	; 0x04
    2768:	3d 81       	ldd	r19, Y+5	; 0x05
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	31 05       	cpc	r19, r1
    276e:	69 f0       	breq	.+26     	; 0x278a <LCD_moveCursor+0x6a>
    2770:	8c 81       	ldd	r24, Y+4	; 0x04
    2772:	9d 81       	ldd	r25, Y+5	; 0x05
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	91 05       	cpc	r25, r1
    2778:	61 f0       	breq	.+24     	; 0x2792 <LCD_moveCursor+0x72>
    277a:	0e c0       	rjmp	.+28     	; 0x2798 <LCD_moveCursor+0x78>
		{
		case 0:
			location = column + 0x00;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	0b c0       	rjmp	.+22     	; 0x2798 <LCD_moveCursor+0x78>
			break;
		case 1:
			location = column + 0x40;
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	80 5c       	subi	r24, 0xC0	; 192
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	07 c0       	rjmp	.+14     	; 0x2798 <LCD_moveCursor+0x78>
			break;
		case 2:
			location = column + 0x10;
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	80 5f       	subi	r24, 0xF0	; 240
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <LCD_moveCursor+0x78>
			break;
		case 3:
			location = column + 0x50;
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	80 5b       	subi	r24, 0xB0	; 176
    2796:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		LCD_sendCommand(LCD_SET_CURSOR_AT_BEGIN | location);
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	80 68       	ori	r24, 0x80	; 128
    279c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
	}
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(const char *str, uint8 row, uint8 column)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <LCD_displayStringRowColumn+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <LCD_displayStringRowColumn+0x8>
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	6b 83       	std	Y+3, r22	; 0x03
    27c2:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(row,column);
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	6c 81       	ldd	r22, Y+4	; 0x04
    27c8:	0e 94 90 13 	call	0x2720	; 0x2720 <LCD_moveCursor>
	LCD_displayString(str);
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <LCD_sendCommand>
}
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <LCD_integerToString>:

void LCD_integerToString(uint32 integer)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	64 97       	sbiw	r28, 0x14	; 20
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	69 8b       	std	Y+17, r22	; 0x11
    280c:	7a 8b       	std	Y+18, r23	; 0x12
    280e:	8b 8b       	std	Y+19, r24	; 0x13
    2810:	9c 8b       	std	Y+20, r25	; 0x14
	char buffer[16];
	itoa(integer, buffer, 10);
    2812:	89 89       	ldd	r24, Y+17	; 0x11
    2814:	9a 89       	ldd	r25, Y+18	; 0x12
    2816:	9e 01       	movw	r18, r28
    2818:	2f 5f       	subi	r18, 0xFF	; 255
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	b9 01       	movw	r22, r18
    281e:	4a e0       	ldi	r20, 0x0A	; 10
    2820:	50 e0       	ldi	r21, 0x00	; 0
    2822:	0e 94 2d 1a 	call	0x345a	; 0x345a <itoa>
	LCD_displayString(buffer);
    2826:	ce 01       	movw	r24, r28
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_displayString>
}
    282e:	64 96       	adiw	r28, 0x14	; 20
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <main>:

/* Define the CPU frequency to 8MHz as a confirmation */
#define F_CPU 8000000UL

int main(void)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	00 d0       	rcall	.+0      	; 0x2846 <main+0x6>
    2846:	00 d0       	rcall	.+0      	; 0x2848 <main+0x8>
    2848:	00 d0       	rcall	.+0      	; 0x284a <main+0xa>
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	uint8 state = 0;
    284e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 choice = 0;
    2850:	19 82       	std	Y+1, r1	; 0x01

	/* Initializing all drivers used in mC1 */
	APP1_init();
    2852:	0e 94 a3 05 	call	0xb46	; 0xb46 <APP1_init>

	while(1)
	{
		/* Get the state send from mC2, and according to each case
		 * a specific function will be operated */
		state = APP1_stateCheck();
    2856:	0e 94 3e 07 	call	0xe7c	; 0xe7c <APP1_stateCheck>
    285a:	8a 83       	std	Y+2, r24	; 0x02
		switch(state)
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	3e 83       	std	Y+6, r19	; 0x06
    2864:	2d 83       	std	Y+5, r18	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	8a 33       	cpi	r24, 0x3A	; 58
    286c:	91 05       	cpc	r25, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <main+0x32>
    2870:	6b c0       	rjmp	.+214    	; 0x2948 <main+0x108>
    2872:	2d 81       	ldd	r18, Y+5	; 0x05
    2874:	3e 81       	ldd	r19, Y+6	; 0x06
    2876:	2b 33       	cpi	r18, 0x3B	; 59
    2878:	31 05       	cpc	r19, r1
    287a:	5c f5       	brge	.+86     	; 0x28d2 <main+0x92>
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	84 32       	cpi	r24, 0x24	; 36
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <main+0x48>
    2886:	66 c0       	rjmp	.+204    	; 0x2954 <main+0x114>
    2888:	2d 81       	ldd	r18, Y+5	; 0x05
    288a:	3e 81       	ldd	r19, Y+6	; 0x06
    288c:	25 32       	cpi	r18, 0x25	; 37
    288e:	31 05       	cpc	r19, r1
    2890:	6c f4       	brge	.+26     	; 0x28ac <main+0x6c>
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	81 32       	cpi	r24, 0x21	; 33
    2898:	91 05       	cpc	r25, r1
    289a:	09 f4       	brne	.+2      	; 0x289e <main+0x5e>
    289c:	4f c0       	rjmp	.+158    	; 0x293c <main+0xfc>
    289e:	2d 81       	ldd	r18, Y+5	; 0x05
    28a0:	3e 81       	ldd	r19, Y+6	; 0x06
    28a2:	23 32       	cpi	r18, 0x23	; 35
    28a4:	31 05       	cpc	r19, r1
    28a6:	09 f4       	brne	.+2      	; 0x28aa <main+0x6a>
    28a8:	61 c0       	rjmp	.+194    	; 0x296c <main+0x12c>
    28aa:	d5 cf       	rjmp	.-86     	; 0x2856 <main+0x16>
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	8e 32       	cpi	r24, 0x2E	; 46
    28b2:	91 05       	cpc	r25, r1
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <main+0x78>
    28b6:	88 c0       	rjmp	.+272    	; 0x29c8 <main+0x188>
    28b8:	2d 81       	ldd	r18, Y+5	; 0x05
    28ba:	3e 81       	ldd	r19, Y+6	; 0x06
    28bc:	2f 32       	cpi	r18, 0x2F	; 47
    28be:	31 05       	cpc	r19, r1
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <main+0x84>
    28c2:	79 c0       	rjmp	.+242    	; 0x29b6 <main+0x176>
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	88 32       	cpi	r24, 0x28	; 40
    28ca:	91 05       	cpc	r25, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <main+0x90>
    28ce:	6d c0       	rjmp	.+218    	; 0x29aa <main+0x16a>
    28d0:	c2 cf       	rjmp	.-124    	; 0x2856 <main+0x16>
    28d2:	2d 81       	ldd	r18, Y+5	; 0x05
    28d4:	3e 81       	ldd	r19, Y+6	; 0x06
    28d6:	2b 35       	cpi	r18, 0x5B	; 91
    28d8:	31 05       	cpc	r19, r1
    28da:	09 f4       	brne	.+2      	; 0x28de <main+0x9e>
    28dc:	72 c0       	rjmp	.+228    	; 0x29c2 <main+0x182>
    28de:	8d 81       	ldd	r24, Y+5	; 0x05
    28e0:	9e 81       	ldd	r25, Y+6	; 0x06
    28e2:	8c 35       	cpi	r24, 0x5C	; 92
    28e4:	91 05       	cpc	r25, r1
    28e6:	9c f4       	brge	.+38     	; 0x290e <main+0xce>
    28e8:	2d 81       	ldd	r18, Y+5	; 0x05
    28ea:	3e 81       	ldd	r19, Y+6	; 0x06
    28ec:	2c 33       	cpi	r18, 0x3C	; 60
    28ee:	31 05       	cpc	r19, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <main+0xb4>
    28f2:	76 c0       	rjmp	.+236    	; 0x29e0 <main+0x1a0>
    28f4:	8d 81       	ldd	r24, Y+5	; 0x05
    28f6:	9e 81       	ldd	r25, Y+6	; 0x06
    28f8:	8c 33       	cpi	r24, 0x3C	; 60
    28fa:	91 05       	cpc	r25, r1
    28fc:	0c f4       	brge	.+2      	; 0x2900 <main+0xc0>
    28fe:	67 c0       	rjmp	.+206    	; 0x29ce <main+0x18e>
    2900:	2d 81       	ldd	r18, Y+5	; 0x05
    2902:	3e 81       	ldd	r19, Y+6	; 0x06
    2904:	2e 33       	cpi	r18, 0x3E	; 62
    2906:	31 05       	cpc	r19, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <main+0xcc>
    290a:	67 c0       	rjmp	.+206    	; 0x29da <main+0x19a>
    290c:	a4 cf       	rjmp	.-184    	; 0x2856 <main+0x16>
    290e:	8d 81       	ldd	r24, Y+5	; 0x05
    2910:	9e 81       	ldd	r25, Y+6	; 0x06
    2912:	8e 35       	cpi	r24, 0x5E	; 94
    2914:	91 05       	cpc	r25, r1
    2916:	21 f1       	breq	.+72     	; 0x2960 <main+0x120>
    2918:	2d 81       	ldd	r18, Y+5	; 0x05
    291a:	3e 81       	ldd	r19, Y+6	; 0x06
    291c:	2b 37       	cpi	r18, 0x7B	; 123
    291e:	31 05       	cpc	r19, r1
    2920:	39 f0       	breq	.+14     	; 0x2930 <main+0xf0>
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	8d 35       	cpi	r24, 0x5D	; 93
    2928:	91 05       	cpc	r25, r1
    292a:	09 f4       	brne	.+2      	; 0x292e <main+0xee>
    292c:	53 c0       	rjmp	.+166    	; 0x29d4 <main+0x194>
    292e:	93 cf       	rjmp	.-218    	; 0x2856 <main+0x16>
		{
		case ASK_FOR_NEW_PASSWORD :
			APP1_sendCommand(RECEIVE_NEWEST_PASSWORD);
    2930:	8e e7       	ldi	r24, 0x7E	; 126
    2932:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_enterNewPassword();
    2936:	0e 94 04 06 	call	0xc08	; 0xc08 <APP1_enterNewPassword>
    293a:	8d cf       	rjmp	.-230    	; 0x2856 <main+0x16>
			break;
		case NEWEST_PASSWORD_RECEIVED :
			/* Send Command to mC2 to be ready to receive re-entered password */
			APP1_sendCommand(RECEIVE_RE_ENTERED_PASSWORD);
    293c:	80 e4       	ldi	r24, 0x40	; 64
    293e:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    2942:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    2946:	87 cf       	rjmp	.-242    	; 0x2856 <main+0x16>
			break;

		case RE_ENTER_PASSWORD :
			/* If the re-entered password is wrong, send it for the first time */
			APP1_sendCommand(RECEIVE_RE_ENTERED_PASSWORD);
    2948:	80 e4       	ldi	r24, 0x40	; 64
    294a:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    294e:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    2952:	81 cf       	rjmp	.-254    	; 0x2856 <main+0x16>
			break;

		case ENTER_PASSWORD_AGAIN :
			/* If the re-entered password is wrong, send it for the second time */
			APP1_sendCommand(RECEIVE_PASSWORD_2);
    2954:	85 e2       	ldi	r24, 0x25	; 37
    2956:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    295a:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    295e:	7b cf       	rjmp	.-266    	; 0x2856 <main+0x16>
			break;

		case ENTER_PASSWORD2_AGAIN :
			/* If the re-entered password is wrong again, send it for the third time */
			APP1_sendCommand(RECEIVE_PASSWORD_3);
    2960:	86 e2       	ldi	r24, 0x26	; 38
    2962:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    2966:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    296a:	75 cf       	rjmp	.-278    	; 0x2856 <main+0x16>
			break;

		case OPEN_MAIN_MENU :
			choice = APP1_mainOptionMenu();
    296c:	0e 94 8e 08 	call	0x111c	; 0x111c <APP1_mainOptionMenu>
    2970:	89 83       	std	Y+1, r24	; 0x01
			switch(choice)
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	3c 83       	std	Y+4, r19	; 0x04
    297a:	2b 83       	std	Y+3, r18	; 0x03
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	8b 32       	cpi	r24, 0x2B	; 43
    2982:	91 05       	cpc	r25, r1
    2984:	31 f0       	breq	.+12     	; 0x2992 <main+0x152>
    2986:	2b 81       	ldd	r18, Y+3	; 0x03
    2988:	3c 81       	ldd	r19, Y+4	; 0x04
    298a:	2d 32       	cpi	r18, 0x2D	; 45
    298c:	31 05       	cpc	r19, r1
    298e:	39 f0       	breq	.+14     	; 0x299e <main+0x15e>
    2990:	62 cf       	rjmp	.-316    	; 0x2856 <main+0x16>
			{
			case '+' :
				/* If the user chose '+', start the password enter and check process again */
				APP1_sendCommand(RECEIVE_PASSWORD_IN_MAIN_MENU);
    2992:	8a e2       	ldi	r24, 0x2A	; 42
    2994:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
				APP1_re_enterPassword();
    2998:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    299c:	5c cf       	rjmp	.-328    	; 0x2856 <main+0x16>
				break;
			case '-' :
				/* If the user chose '-', we will repeat the process from the very beginning */
				APP1_sendCommand(RECEIVE_NEWEST_PASSWORD);
    299e:	8e e7       	ldi	r24, 0x7E	; 126
    29a0:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
				APP1_enterNewPassword();
    29a4:	0e 94 04 06 	call	0xc08	; 0xc08 <APP1_enterNewPassword>
    29a8:	56 cf       	rjmp	.-340    	; 0x2856 <main+0x16>
				break;
			}
			break;

		case ENTER_PASSWORD_AGAIN_MAIN_MENU :
			APP1_sendCommand(RECEIVE_PASSWORD_2_MAIN_MENU);
    29aa:	89 e2       	ldi	r24, 0x29	; 41
    29ac:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    29b0:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    29b4:	50 cf       	rjmp	.-352    	; 0x2856 <main+0x16>
			break;

		case ENTER_PASSWORD2_AGAIN_MAIN_MENU :
			APP1_sendCommand(RECEIVE_PASSWORD_3_MAIN_MENU);
    29b6:	8c e7       	ldi	r24, 0x7C	; 124
    29b8:	0e 94 47 07 	call	0xe8e	; 0xe8e <APP1_sendCommand>
			APP1_re_enterPassword();
    29bc:	0e 94 54 07 	call	0xea8	; 0xea8 <APP1_re_enterPassword>
    29c0:	4a cf       	rjmp	.-364    	; 0x2856 <main+0x16>
			break;

		case OPEN_DOOR :
			APP1_openDoor();
    29c2:	0e 94 98 09 	call	0x1330	; 0x1330 <APP1_openDoor>
    29c6:	47 cf       	rjmp	.-370    	; 0x2856 <main+0x16>
			break;

		case DOOR_IS_OPENED :
			APP1_doorIsOpened();
    29c8:	0e 94 a5 09 	call	0x134a	; 0x134a <APP1_doorIsOpened>
    29cc:	44 cf       	rjmp	.-376    	; 0x2856 <main+0x16>
			break;

		case CLOSE_DOOR :
			APP1_closeDoor();
    29ce:	0e 94 b2 09 	call	0x1364	; 0x1364 <APP1_closeDoor>
    29d2:	41 cf       	rjmp	.-382    	; 0x2856 <main+0x16>
			break;

		case ALARM_ON :
			APP1_setAlarmON();
    29d4:	0e 94 bf 09 	call	0x137e	; 0x137e <APP1_setAlarmON>
    29d8:	3e cf       	rjmp	.-388    	; 0x2856 <main+0x16>
			break;

		case SEND_CORRECT :
			APP1_displayCorrect();
    29da:	0e 94 cc 09 	call	0x1398	; 0x1398 <APP1_displayCorrect>
    29de:	3b cf       	rjmp	.-394    	; 0x2856 <main+0x16>
			break;

		case SEND_WRONG :
			APP1_displayWrong();
    29e0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <APP1_displayWrong>
    29e4:	38 cf       	rjmp	.-400    	; 0x2856 <main+0x16>

000029e6 <TIMER_init>:
 * [ARGS]:	const TIMER_ConfigType *a_configPtr : This Argument is a pointer to struct,
 * 			it will indicate the struct input for this function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER_init(const TIMER_ConfigType *a_configPtr)
{
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	28 97       	sbiw	r28, 0x08	; 8
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
	/* Switching for each TIMER exist */
	switch(a_configPtr->timer)
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	80 81       	ld	r24, Z
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	38 87       	std	Y+8, r19	; 0x08
    2a0a:	2f 83       	std	Y+7, r18	; 0x07
    2a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0e:	98 85       	ldd	r25, Y+8	; 0x08
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <TIMER_init+0x32>
    2a16:	76 c0       	rjmp	.+236    	; 0x2b04 <TIMER_init+0x11e>
    2a18:	2f 81       	ldd	r18, Y+7	; 0x07
    2a1a:	38 85       	ldd	r19, Y+8	; 0x08
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 05       	cpc	r19, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <TIMER_init+0x3e>
    2a22:	08 c1       	rjmp	.+528    	; 0x2c34 <TIMER_init+0x24e>
    2a24:	8f 81       	ldd	r24, Y+7	; 0x07
    2a26:	98 85       	ldd	r25, Y+8	; 0x08
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	09 f0       	breq	.+2      	; 0x2a2e <TIMER_init+0x48>
    2a2c:	6c c1       	rjmp	.+728    	; 0x2d06 <TIMER_init+0x320>
	{
	case TIMER0 :
		/* Force Output Compare bit (FOC0) */
		TCCR0 |= (1<<FOC0);
    2a2e:	a3 e5       	ldi	r26, 0x53	; 83
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e3 e5       	ldi	r30, 0x53	; 83
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	80 68       	ori	r24, 0x80	; 128
    2a3a:	8c 93       	st	X, r24

		/* WaveForm Generation Mode (WGM00, WGM01) */
		TCCR0 = (TCCR0 & 0xBF) | (((a_configPtr->mode0) & 0x01) << 6);
    2a3c:	a3 e5       	ldi	r26, 0x53	; 83
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e3 e5       	ldi	r30, 0x53	; 83
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	28 2f       	mov	r18, r24
    2a48:	2f 7b       	andi	r18, 0xBF	; 191
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	81 81       	ldd	r24, Z+1	; 0x01
    2a50:	88 2f       	mov	r24, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	81 70       	andi	r24, 0x01	; 1
    2a56:	90 70       	andi	r25, 0x00	; 0
    2a58:	00 24       	eor	r0, r0
    2a5a:	96 95       	lsr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	07 94       	ror	r0
    2a60:	96 95       	lsr	r25
    2a62:	87 95       	ror	r24
    2a64:	07 94       	ror	r0
    2a66:	98 2f       	mov	r25, r24
    2a68:	80 2d       	mov	r24, r0
    2a6a:	82 2b       	or	r24, r18
    2a6c:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF7) | (((a_configPtr->mode0) & 0x02) << 3);
    2a6e:	a3 e5       	ldi	r26, 0x53	; 83
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e3 e5       	ldi	r30, 0x53	; 83
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	28 2f       	mov	r18, r24
    2a7a:	27 7f       	andi	r18, 0xF7	; 247
    2a7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a80:	81 81       	ldd	r24, Z+1	; 0x01
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	82 70       	andi	r24, 0x02	; 2
    2a88:	90 70       	andi	r25, 0x00	; 0
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	82 2b       	or	r24, r18
    2a98:	8c 93       	st	X, r24

		/* Clock Select bits (CS02,CS01,CS00) */
		TCCR0 = (TCCR0 & 0xF8) | (a_configPtr->prescalar0);
    2a9a:	a3 e5       	ldi	r26, 0x53	; 83
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e3 e5       	ldi	r30, 0x53	; 83
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	98 7f       	andi	r25, 0xF8	; 248
    2aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	89 2b       	or	r24, r25
    2ab0:	8c 93       	st	X, r24

		/* Set the initial value of timer here */
		TCNT0 = (a_configPtr->initial_value);
    2ab2:	a2 e5       	ldi	r26, 0x52	; 82
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	80 85       	ldd	r24, Z+8	; 0x08
    2abc:	91 85       	ldd	r25, Z+9	; 0x09
    2abe:	8c 93       	st	X, r24

		/* Set the compare value of timer here */
		OCR0 = (a_configPtr->compare_value);
    2ac0:	ac e5       	ldi	r26, 0x5C	; 92
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac8:	82 85       	ldd	r24, Z+10	; 0x0a
    2aca:	93 85       	ldd	r25, Z+11	; 0x0b
    2acc:	8c 93       	st	X, r24

		/* Module interrupt enable select (CompareMatch or OverFlow) */
		if((a_configPtr->mode0) == CTC_T0)
    2ace:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad2:	81 81       	ldd	r24, Z+1	; 0x01
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	41 f4       	brne	.+16     	; 0x2ae8 <TIMER_init+0x102>
		{
			TIMSK |= (1<<OCIE0);
    2ad8:	a9 e5       	ldi	r26, 0x59	; 89
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e9 e5       	ldi	r30, 0x59	; 89
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	82 60       	ori	r24, 0x02	; 2
    2ae4:	8c 93       	st	X, r24
    2ae6:	0f c1       	rjmp	.+542    	; 0x2d06 <TIMER_init+0x320>
		}
		else if((a_configPtr->mode0) == NORMAL_T0)
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	81 81       	ldd	r24, Z+1	; 0x01
    2aee:	88 23       	and	r24, r24
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <TIMER_init+0x10e>
    2af2:	09 c1       	rjmp	.+530    	; 0x2d06 <TIMER_init+0x320>
		{
			TIMSK |= (1<<TOIE0);
    2af4:	a9 e5       	ldi	r26, 0x59	; 89
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e9 e5       	ldi	r30, 0x59	; 89
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	81 60       	ori	r24, 0x01	; 1
    2b00:	8c 93       	st	X, r24
    2b02:	01 c1       	rjmp	.+514    	; 0x2d06 <TIMER_init+0x320>
		}
		break;
/*******************************************************************************************/
	case TIMER1 :
		/* Set the initial value of timer in TCNT1 register */
		TCNT1 = (a_configPtr->initial_value);
    2b04:	ac e4       	ldi	r26, 0x4C	; 76
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0c:	80 85       	ldd	r24, Z+8	; 0x08
    2b0e:	91 85       	ldd	r25, Z+9	; 0x09
    2b10:	11 96       	adiw	r26, 0x01	; 1
    2b12:	9c 93       	st	X, r25
    2b14:	8e 93       	st	-X, r24

		/* Force Output Compare bit (FOC1A,FOC1B)
		 * Set the compare value of timer in OCR1A and OCR1B */
		switch(a_configPtr->channel1)
    2b16:	e9 81       	ldd	r30, Y+1	; 0x01
    2b18:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1a:	84 81       	ldd	r24, Z+4	; 0x04
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	3e 83       	std	Y+6, r19	; 0x06
    2b22:	2d 83       	std	Y+5, r18	; 0x05
    2b24:	8d 81       	ldd	r24, Y+5	; 0x05
    2b26:	9e 81       	ldd	r25, Y+6	; 0x06
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	31 f0       	breq	.+12     	; 0x2b38 <TIMER_init+0x152>
    2b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b30:	21 30       	cpi	r18, 0x01	; 1
    2b32:	31 05       	cpc	r19, r1
    2b34:	91 f0       	breq	.+36     	; 0x2b5a <TIMER_init+0x174>
    2b36:	21 c0       	rjmp	.+66     	; 0x2b7a <TIMER_init+0x194>
		{
		case CHANNEL_A :
			TCCR1A |= (1<<FOC1A);
    2b38:	af e4       	ldi	r26, 0x4F	; 79
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	88 60       	ori	r24, 0x08	; 8
    2b44:	8c 93       	st	X, r24
			OCR1A = (a_configPtr->compare_value);
    2b46:	aa e4       	ldi	r26, 0x4A	; 74
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4e:	82 85       	ldd	r24, Z+10	; 0x0a
    2b50:	93 85       	ldd	r25, Z+11	; 0x0b
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	9c 93       	st	X, r25
    2b56:	8e 93       	st	-X, r24
    2b58:	10 c0       	rjmp	.+32     	; 0x2b7a <TIMER_init+0x194>
			break;

		case CHANNEL_B :
			TCCR1A |= (1<<FOC1B);
    2b5a:	af e4       	ldi	r26, 0x4F	; 79
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	ef e4       	ldi	r30, 0x4F	; 79
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	84 60       	ori	r24, 0x04	; 4
    2b66:	8c 93       	st	X, r24
			OCR1B = (a_configPtr->compare_value);
    2b68:	a8 e4       	ldi	r26, 0x48	; 72
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	82 85       	ldd	r24, Z+10	; 0x0a
    2b72:	93 85       	ldd	r25, Z+11	; 0x0b
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	9c 93       	st	X, r25
    2b78:	8e 93       	st	-X, r24
			break;
		}

		/* Set the module interrupt bit according to the mode we are using */
		switch(a_configPtr->mode1)
    2b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7e:	83 81       	ldd	r24, Z+3	; 0x03
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	3c 83       	std	Y+4, r19	; 0x04
    2b86:	2b 83       	std	Y+3, r18	; 0x03
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	f9 f0       	breq	.+62     	; 0x2bce <TIMER_init+0x1e8>
    2b90:	2b 81       	ldd	r18, Y+3	; 0x03
    2b92:	3c 81       	ldd	r19, Y+4	; 0x04
    2b94:	24 30       	cpi	r18, 0x04	; 4
    2b96:	31 05       	cpc	r19, r1
    2b98:	09 f5       	brne	.+66     	; 0x2bdc <TIMER_init+0x1f6>
		{
		case CTC_T1 :
			if((a_configPtr->channel1) == CHANNEL_A)
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ba0:	88 23       	and	r24, r24
    2ba2:	41 f4       	brne	.+16     	; 0x2bb4 <TIMER_init+0x1ce>
			{
				TIMSK |= (1<<OCIE1A);
    2ba4:	a9 e5       	ldi	r26, 0x59	; 89
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e9 e5       	ldi	r30, 0x59	; 89
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 61       	ori	r24, 0x10	; 16
    2bb0:	8c 93       	st	X, r24
    2bb2:	14 c0       	rjmp	.+40     	; 0x2bdc <TIMER_init+0x1f6>
			}
			else if((a_configPtr->channel1) == CHANNEL_B)
    2bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb8:	84 81       	ldd	r24, Z+4	; 0x04
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	79 f4       	brne	.+30     	; 0x2bdc <TIMER_init+0x1f6>
			{
				TIMSK |= (1<<OCIE1B);
    2bbe:	a9 e5       	ldi	r26, 0x59	; 89
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e9 e5       	ldi	r30, 0x59	; 89
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	88 60       	ori	r24, 0x08	; 8
    2bca:	8c 93       	st	X, r24
    2bcc:	07 c0       	rjmp	.+14     	; 0x2bdc <TIMER_init+0x1f6>
			}
			break;

		case NORMAL_T1 :
			TIMSK |= (1<<TOIE1);
    2bce:	a9 e5       	ldi	r26, 0x59	; 89
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e9 e5       	ldi	r30, 0x59	; 89
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	84 60       	ori	r24, 0x04	; 4
    2bda:	8c 93       	st	X, r24
			break;
		}

		/* WaveForm Generation Mode (WGM10, WGM11) in TCCR1A & (WGM12,WGM13) in TCCR1B
		 * as it controls the mode we are using */
		TCCR1A = (TCCR1A & 0xFC) | ((a_configPtr->mode1) & 0x03);
    2bdc:	af e4       	ldi	r26, 0x4F	; 79
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	ef e4       	ldi	r30, 0x4F	; 79
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	98 2f       	mov	r25, r24
    2be8:	9c 7f       	andi	r25, 0xFC	; 252
    2bea:	e9 81       	ldd	r30, Y+1	; 0x01
    2bec:	fa 81       	ldd	r31, Y+2	; 0x02
    2bee:	83 81       	ldd	r24, Z+3	; 0x03
    2bf0:	83 70       	andi	r24, 0x03	; 3
    2bf2:	89 2b       	or	r24, r25
    2bf4:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xE7) | ( ((a_configPtr->mode1) & 0x0C) << 1 );
    2bf6:	ae e4       	ldi	r26, 0x4E	; 78
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	ee e4       	ldi	r30, 0x4E	; 78
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	28 2f       	mov	r18, r24
    2c02:	27 7e       	andi	r18, 0xE7	; 231
    2c04:	e9 81       	ldd	r30, Y+1	; 0x01
    2c06:	fa 81       	ldd	r31, Y+2	; 0x02
    2c08:	83 81       	ldd	r24, Z+3	; 0x03
    2c0a:	88 2f       	mov	r24, r24
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	8c 70       	andi	r24, 0x0C	; 12
    2c10:	90 70       	andi	r25, 0x00	; 0
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	82 2b       	or	r24, r18
    2c18:	8c 93       	st	X, r24

		/* Clock Select bits "Prescalar" (CS02,CS01,CS00) */
		TCCR1B = (TCCR1B & 0xF8) | (a_configPtr->prescalar1);
    2c1a:	ae e4       	ldi	r26, 0x4E	; 78
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	ee e4       	ldi	r30, 0x4E	; 78
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	98 2f       	mov	r25, r24
    2c26:	98 7f       	andi	r25, 0xF8	; 248
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	85 81       	ldd	r24, Z+5	; 0x05
    2c2e:	89 2b       	or	r24, r25
    2c30:	8c 93       	st	X, r24
    2c32:	69 c0       	rjmp	.+210    	; 0x2d06 <TIMER_init+0x320>
		break;
/*******************************************************************************************/
		case TIMER2 :
			/* Force Output Compare bit (FOC0) */
			TCCR2 |= (1<<FOC0);
    2c34:	a5 e4       	ldi	r26, 0x45	; 69
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e5 e4       	ldi	r30, 0x45	; 69
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 68       	ori	r24, 0x80	; 128
    2c40:	8c 93       	st	X, r24

			/* WaveForm Generation Mode (WGM00, WGM01) */
			TCCR2 = (TCCR2 & 0xBF) | (((a_configPtr->mode2) & 0x01) << 6);
    2c42:	a5 e4       	ldi	r26, 0x45	; 69
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e5 e4       	ldi	r30, 0x45	; 69
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	2f 7b       	andi	r18, 0xBF	; 191
    2c50:	e9 81       	ldd	r30, Y+1	; 0x01
    2c52:	fa 81       	ldd	r31, Y+2	; 0x02
    2c54:	86 81       	ldd	r24, Z+6	; 0x06
    2c56:	88 2f       	mov	r24, r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	81 70       	andi	r24, 0x01	; 1
    2c5c:	90 70       	andi	r25, 0x00	; 0
    2c5e:	00 24       	eor	r0, r0
    2c60:	96 95       	lsr	r25
    2c62:	87 95       	ror	r24
    2c64:	07 94       	ror	r0
    2c66:	96 95       	lsr	r25
    2c68:	87 95       	ror	r24
    2c6a:	07 94       	ror	r0
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	80 2d       	mov	r24, r0
    2c70:	82 2b       	or	r24, r18
    2c72:	8c 93       	st	X, r24
			TCCR2 = (TCCR2 & 0xF7) | (((a_configPtr->mode2) & 0x02) << 3);
    2c74:	a5 e4       	ldi	r26, 0x45	; 69
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e5 e4       	ldi	r30, 0x45	; 69
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	28 2f       	mov	r18, r24
    2c80:	27 7f       	andi	r18, 0xF7	; 247
    2c82:	e9 81       	ldd	r30, Y+1	; 0x01
    2c84:	fa 81       	ldd	r31, Y+2	; 0x02
    2c86:	86 81       	ldd	r24, Z+6	; 0x06
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	82 70       	andi	r24, 0x02	; 2
    2c8e:	90 70       	andi	r25, 0x00	; 0
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	82 2b       	or	r24, r18
    2c9e:	8c 93       	st	X, r24

			/* Clock Select bits (CS02,CS01,CS00) */
			TCCR2 = (TCCR0 & 0xF8) | (a_configPtr->prescalar2);
    2ca0:	a5 e4       	ldi	r26, 0x45	; 69
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e3 e5       	ldi	r30, 0x53	; 83
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	98 2f       	mov	r25, r24
    2cac:	98 7f       	andi	r25, 0xF8	; 248
    2cae:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb2:	87 81       	ldd	r24, Z+7	; 0x07
    2cb4:	89 2b       	or	r24, r25
    2cb6:	8c 93       	st	X, r24

			/* Set the initial value of timer here */
			TCNT2 = (a_configPtr->initial_value);
    2cb8:	a4 e4       	ldi	r26, 0x44	; 68
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc0:	80 85       	ldd	r24, Z+8	; 0x08
    2cc2:	91 85       	ldd	r25, Z+9	; 0x09
    2cc4:	8c 93       	st	X, r24

			/* Set the compare value of timer here */
			OCR2 = (a_configPtr->compare_value);
    2cc6:	a3 e4       	ldi	r26, 0x43	; 67
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cce:	82 85       	ldd	r24, Z+10	; 0x0a
    2cd0:	93 85       	ldd	r25, Z+11	; 0x0b
    2cd2:	8c 93       	st	X, r24

			if((a_configPtr->mode2) == CTC_T2)
    2cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd8:	86 81       	ldd	r24, Z+6	; 0x06
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	41 f4       	brne	.+16     	; 0x2cee <TIMER_init+0x308>
			{
				TIMSK |= (1<<OCIE2);
    2cde:	a9 e5       	ldi	r26, 0x59	; 89
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e9 e5       	ldi	r30, 0x59	; 89
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	80 68       	ori	r24, 0x80	; 128
    2cea:	8c 93       	st	X, r24
    2cec:	0c c0       	rjmp	.+24     	; 0x2d06 <TIMER_init+0x320>
			}
			else if(((a_configPtr->mode2) == NORMAL_T2))
    2cee:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cf2:	86 81       	ldd	r24, Z+6	; 0x06
    2cf4:	88 23       	and	r24, r24
    2cf6:	39 f4       	brne	.+14     	; 0x2d06 <TIMER_init+0x320>
			{
				TIMSK |= (1<<TOIE2);
    2cf8:	a9 e5       	ldi	r26, 0x59	; 89
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e9 e5       	ldi	r30, 0x59	; 89
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	80 64       	ori	r24, 0x40	; 64
    2d04:	8c 93       	st	X, r24
			}
			break;
	}
	/* Set the global interrupt bit */
	SREG |= (1<<7);
    2d06:	af e5       	ldi	r26, 0x5F	; 95
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	ef e5       	ldi	r30, 0x5F	; 95
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	80 68       	ori	r24, 0x80	; 128
    2d12:	8c 93       	st	X, r24
}
    2d14:	28 96       	adiw	r28, 0x08	; 8
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <TIMER0_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER0_setCallBack(void(*a_ptr)(uint16))
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <TIMER0_setCallBack+0x6>
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	9a 83       	std	Y+2, r25	; 0x02
    2d32:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER0_callBackPtr = a_ptr;
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	90 93 12 01 	sts	0x0112, r25
    2d3c:	80 93 11 01 	sts	0x0111, r24
}
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <TIMER1_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER1_setCallBack(void(*a_ptr)(uint16))
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <TIMER1_setCallBack+0x6>
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER1_callBackPtr = a_ptr;
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5c:	90 93 14 01 	sts	0x0114, r25
    2d60:	80 93 13 01 	sts	0x0113, r24
}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <TIMER2_setCallBack>:
 * [ARGS]:	void(*a_ptr)(uint16) :	This Argument is a pointer to function, indicating the
 * 								 	function called in the call back function
 *	[RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void TIMER2_setCallBack(void(*a_ptr)(uint16))
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <TIMER2_setCallBack+0x6>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	89 83       	std	Y+1, r24	; 0x01
	g_TIMER2_callBackPtr = a_ptr;
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d80:	90 93 16 01 	sts	0x0116, r25
    2d84:	80 93 15 01 	sts	0x0115, r24
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <TIMER0_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER0_deInit(void)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER0 registers */
	TCCR0 = 0;
    2d9a:	e3 e5       	ldi	r30, 0x53	; 83
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	10 82       	st	Z, r1
	TCNT0 = 0;
    2da0:	e2 e5       	ldi	r30, 0x52	; 82
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	10 82       	st	Z, r1
	OCR0 = 0;
    2da6:	ec e5       	ldi	r30, 0x5C	; 92
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE,TOIE0) */
	TIMSK &= ~(0x03);
    2dac:	a9 e5       	ldi	r26, 0x59	; 89
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e9 e5       	ldi	r30, 0x59	; 89
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	8c 7f       	andi	r24, 0xFC	; 252
    2db8:	8c 93       	st	X, r24
}
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <TIMER1_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER1_deInit(void)
{
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER1 registers */
	TCCR1A = 0;
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	10 82       	st	Z, r1
	TCCR1B = 0;
    2dce:	ee e4       	ldi	r30, 0x4E	; 78
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	10 82       	st	Z, r1
	TCNT1 = 0;
    2dd4:	ec e4       	ldi	r30, 0x4C	; 76
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	11 82       	std	Z+1, r1	; 0x01
    2dda:	10 82       	st	Z, r1
	OCR1A = 0;
    2ddc:	ea e4       	ldi	r30, 0x4A	; 74
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	11 82       	std	Z+1, r1	; 0x01
    2de2:	10 82       	st	Z, r1
	OCR1B = 0;
    2de4:	e8 e4       	ldi	r30, 0x48	; 72
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	11 82       	std	Z+1, r1	; 0x01
    2dea:	10 82       	st	Z, r1
	ICR1 = 0;
    2dec:	e6 e4       	ldi	r30, 0x46	; 70
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	11 82       	std	Z+1, r1	; 0x01
    2df2:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE1A,OCIE1B,TOIE1) */
	TIMSK &= ~(0x3C);
    2df4:	a9 e5       	ldi	r26, 0x59	; 89
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	e9 e5       	ldi	r30, 0x59	; 89
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	80 81       	ld	r24, Z
    2dfe:	83 7c       	andi	r24, 0xC3	; 195
    2e00:	8c 93       	st	X, r24
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <TIMER2_deInit>:
 * 					finishing using the driver in a specific function
 * [ARGS]:	No Argument
 *	[RETURNS]:	No Return
 ----------------------------------------------------------------------------------------*/
void TIMER2_deInit(void)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
	/* Clear all TIMER2 registers */
	TCCR2 = 0;
    2e10:	e5 e4       	ldi	r30, 0x45	; 69
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	10 82       	st	Z, r1
	TCNT2 = 0;
    2e16:	e4 e4       	ldi	r30, 0x44	; 68
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	10 82       	st	Z, r1
	OCR2 = 0;
    2e1c:	e3 e4       	ldi	r30, 0x43	; 67
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	10 82       	st	Z, r1

	/* Disable all interrupt mask registers (OCIE2,TOIE2) */
	TIMSK &= ~(0xC0);
    2e22:	a9 e5       	ldi	r26, 0x59	; 89
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e9 e5       	ldi	r30, 0x59	; 89
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	8f 73       	andi	r24, 0x3F	; 63
    2e2e:	8c 93       	st	X, r24
}
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <__vector_9>:
 * [ISR NAME]:		TIMER0_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER0
 ----------------------------------------------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
    2e36:	1f 92       	push	r1
    2e38:	0f 92       	push	r0
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	0f 92       	push	r0
    2e3e:	11 24       	eor	r1, r1
    2e40:	2f 93       	push	r18
    2e42:	3f 93       	push	r19
    2e44:	4f 93       	push	r20
    2e46:	5f 93       	push	r21
    2e48:	6f 93       	push	r22
    2e4a:	7f 93       	push	r23
    2e4c:	8f 93       	push	r24
    2e4e:	9f 93       	push	r25
    2e50:	af 93       	push	r26
    2e52:	bf 93       	push	r27
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2e60:	80 91 11 01 	lds	r24, 0x0111
    2e64:	90 91 12 01 	lds	r25, 0x0112
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	49 f0       	breq	.+18     	; 0x2e7e <__vector_9+0x48>
	{
		(*g_TIMER0_callBackPtr)(g_msec0);
    2e6c:	e0 91 11 01 	lds	r30, 0x0111
    2e70:	f0 91 12 01 	lds	r31, 0x0112
    2e74:	80 91 1b 01 	lds	r24, 0x011B
    2e78:	90 91 1c 01 	lds	r25, 0x011C
    2e7c:	09 95       	icall
	}
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	ff 91       	pop	r31
    2e84:	ef 91       	pop	r30
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	7f 91       	pop	r23
    2e90:	6f 91       	pop	r22
    2e92:	5f 91       	pop	r21
    2e94:	4f 91       	pop	r20
    2e96:	3f 91       	pop	r19
    2e98:	2f 91       	pop	r18
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <__vector_19>:
 * [ISR NAME]:		TIMER0_COMP_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER0
 ----------------------------------------------------------------------------------------*/
ISR(TIMER0_COMP_vect)
{
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	4f 93       	push	r20
    2eb4:	5f 93       	push	r21
    2eb6:	6f 93       	push	r22
    2eb8:	7f 93       	push	r23
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2ece:	80 91 11 01 	lds	r24, 0x0111
    2ed2:	90 91 12 01 	lds	r25, 0x0112
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	49 f0       	breq	.+18     	; 0x2eec <__vector_19+0x48>
	{
		(*g_TIMER0_callBackPtr)(g_msec0);
    2eda:	e0 91 11 01 	lds	r30, 0x0111
    2ede:	f0 91 12 01 	lds	r31, 0x0112
    2ee2:	80 91 1b 01 	lds	r24, 0x011B
    2ee6:	90 91 1c 01 	lds	r25, 0x011C
    2eea:	09 95       	icall
	}
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	ff 91       	pop	r31
    2ef2:	ef 91       	pop	r30
    2ef4:	bf 91       	pop	r27
    2ef6:	af 91       	pop	r26
    2ef8:	9f 91       	pop	r25
    2efa:	8f 91       	pop	r24
    2efc:	7f 91       	pop	r23
    2efe:	6f 91       	pop	r22
    2f00:	5f 91       	pop	r21
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <__vector_8>:
 * [ISR NAME]:		TIMER1_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER1
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	2f 93       	push	r18
    2f1e:	3f 93       	push	r19
    2f20:	4f 93       	push	r20
    2f22:	5f 93       	push	r21
    2f24:	6f 93       	push	r22
    2f26:	7f 93       	push	r23
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    2f3c:	80 91 13 01 	lds	r24, 0x0113
    2f40:	90 91 14 01 	lds	r25, 0x0114
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	49 f0       	breq	.+18     	; 0x2f5a <__vector_8+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    2f48:	e0 91 13 01 	lds	r30, 0x0113
    2f4c:	f0 91 14 01 	lds	r31, 0x0114
    2f50:	80 91 1d 01 	lds	r24, 0x011D
    2f54:	90 91 1e 01 	lds	r25, 0x011E
    2f58:	09 95       	icall
	}
}
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	ff 91       	pop	r31
    2f60:	ef 91       	pop	r30
    2f62:	bf 91       	pop	r27
    2f64:	af 91       	pop	r26
    2f66:	9f 91       	pop	r25
    2f68:	8f 91       	pop	r24
    2f6a:	7f 91       	pop	r23
    2f6c:	6f 91       	pop	r22
    2f6e:	5f 91       	pop	r21
    2f70:	4f 91       	pop	r20
    2f72:	3f 91       	pop	r19
    2f74:	2f 91       	pop	r18
    2f76:	0f 90       	pop	r0
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	0f 90       	pop	r0
    2f7c:	1f 90       	pop	r1
    2f7e:	18 95       	reti

00002f80 <__vector_6>:
 * [ISR NAME]:		TIMER1_COMPA_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER1 - Channel A
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPA_vect)
{
    2f80:	1f 92       	push	r1
    2f82:	0f 92       	push	r0
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	0f 92       	push	r0
    2f88:	11 24       	eor	r1, r1
    2f8a:	2f 93       	push	r18
    2f8c:	3f 93       	push	r19
    2f8e:	4f 93       	push	r20
    2f90:	5f 93       	push	r21
    2f92:	6f 93       	push	r22
    2f94:	7f 93       	push	r23
    2f96:	8f 93       	push	r24
    2f98:	9f 93       	push	r25
    2f9a:	af 93       	push	r26
    2f9c:	bf 93       	push	r27
    2f9e:	ef 93       	push	r30
    2fa0:	ff 93       	push	r31
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    2faa:	80 91 13 01 	lds	r24, 0x0113
    2fae:	90 91 14 01 	lds	r25, 0x0114
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	49 f0       	breq	.+18     	; 0x2fc8 <__vector_6+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    2fb6:	e0 91 13 01 	lds	r30, 0x0113
    2fba:	f0 91 14 01 	lds	r31, 0x0114
    2fbe:	80 91 1d 01 	lds	r24, 0x011D
    2fc2:	90 91 1e 01 	lds	r25, 0x011E
    2fc6:	09 95       	icall
	}
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	7f 91       	pop	r23
    2fda:	6f 91       	pop	r22
    2fdc:	5f 91       	pop	r21
    2fde:	4f 91       	pop	r20
    2fe0:	3f 91       	pop	r19
    2fe2:	2f 91       	pop	r18
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <__vector_7>:
 * [ISR NAME]:		TIMER1_COMPB_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER1 - Channel B
 ----------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPB_vect)
{
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    3018:	80 91 13 01 	lds	r24, 0x0113
    301c:	90 91 14 01 	lds	r25, 0x0114
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	49 f0       	breq	.+18     	; 0x3036 <__vector_7+0x48>
	{
		(*g_TIMER1_callBackPtr)(g_msec1);
    3024:	e0 91 13 01 	lds	r30, 0x0113
    3028:	f0 91 14 01 	lds	r31, 0x0114
    302c:	80 91 1d 01 	lds	r24, 0x011D
    3030:	90 91 1e 01 	lds	r25, 0x011E
    3034:	09 95       	icall
	}
}
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	ff 91       	pop	r31
    303c:	ef 91       	pop	r30
    303e:	bf 91       	pop	r27
    3040:	af 91       	pop	r26
    3042:	9f 91       	pop	r25
    3044:	8f 91       	pop	r24
    3046:	7f 91       	pop	r23
    3048:	6f 91       	pop	r22
    304a:	5f 91       	pop	r21
    304c:	4f 91       	pop	r20
    304e:	3f 91       	pop	r19
    3050:	2f 91       	pop	r18
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0
    3058:	1f 90       	pop	r1
    305a:	18 95       	reti

0000305c <__vector_4>:
 * [ISR NAME]:		TIMER2_OVF_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using overflow mode
 * 					in TIMER2
 ----------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect)
{
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	2f 93       	push	r18
    3068:	3f 93       	push	r19
    306a:	4f 93       	push	r20
    306c:	5f 93       	push	r21
    306e:	6f 93       	push	r22
    3070:	7f 93       	push	r23
    3072:	8f 93       	push	r24
    3074:	9f 93       	push	r25
    3076:	af 93       	push	r26
    3078:	bf 93       	push	r27
    307a:	ef 93       	push	r30
    307c:	ff 93       	push	r31
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    3086:	80 91 15 01 	lds	r24, 0x0115
    308a:	90 91 16 01 	lds	r25, 0x0116
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	49 f0       	breq	.+18     	; 0x30a4 <__vector_4+0x48>
	{
		(*g_TIMER2_callBackPtr)(g_msec2);
    3092:	e0 91 15 01 	lds	r30, 0x0115
    3096:	f0 91 16 01 	lds	r31, 0x0116
    309a:	80 91 1f 01 	lds	r24, 0x011F
    309e:	90 91 20 01 	lds	r25, 0x0120
    30a2:	09 95       	icall
	}
}
    30a4:	cf 91       	pop	r28
    30a6:	df 91       	pop	r29
    30a8:	ff 91       	pop	r31
    30aa:	ef 91       	pop	r30
    30ac:	bf 91       	pop	r27
    30ae:	af 91       	pop	r26
    30b0:	9f 91       	pop	r25
    30b2:	8f 91       	pop	r24
    30b4:	7f 91       	pop	r23
    30b6:	6f 91       	pop	r22
    30b8:	5f 91       	pop	r21
    30ba:	4f 91       	pop	r20
    30bc:	3f 91       	pop	r19
    30be:	2f 91       	pop	r18
    30c0:	0f 90       	pop	r0
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	0f 90       	pop	r0
    30c6:	1f 90       	pop	r1
    30c8:	18 95       	reti

000030ca <__vector_3>:
 * [ISR NAME]:		TIMER2_COMP_vect
 * [DESCRIPTION]:	This ISR will trigger the call back function when using compare match
 * 					mode in TIMER2
 ----------------------------------------------------------------------------------------*/
ISR(TIMER2_COMP_vect)
{
    30ca:	1f 92       	push	r1
    30cc:	0f 92       	push	r0
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	0f 92       	push	r0
    30d2:	11 24       	eor	r1, r1
    30d4:	2f 93       	push	r18
    30d6:	3f 93       	push	r19
    30d8:	4f 93       	push	r20
    30da:	5f 93       	push	r21
    30dc:	6f 93       	push	r22
    30de:	7f 93       	push	r23
    30e0:	8f 93       	push	r24
    30e2:	9f 93       	push	r25
    30e4:	af 93       	push	r26
    30e6:	bf 93       	push	r27
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    30f4:	80 91 15 01 	lds	r24, 0x0115
    30f8:	90 91 16 01 	lds	r25, 0x0116
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	49 f0       	breq	.+18     	; 0x3112 <__vector_3+0x48>
	{
		(*g_TIMER2_callBackPtr)(g_msec2);
    3100:	e0 91 15 01 	lds	r30, 0x0115
    3104:	f0 91 16 01 	lds	r31, 0x0116
    3108:	80 91 1f 01 	lds	r24, 0x011F
    310c:	90 91 20 01 	lds	r25, 0x0120
    3110:	09 95       	icall
	}
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	0f 90       	pop	r0
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	0f 90       	pop	r0
    3134:	1f 90       	pop	r1
    3136:	18 95       	reti

00003138 <UART_init>:
 * 												variables for UART module.
 * 				uint16 baud_rate: This Argument shall indicate the baud rate of UART module.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_init(UART_configType *configPtr)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <UART_init+0x6>
    313e:	00 d0       	rcall	.+0      	; 0x3140 <UART_init+0x8>
    3140:	00 d0       	rcall	.+0      	; 0x3142 <UART_init+0xa>
    3142:	cd b7       	in	r28, 0x3d	; 61
    3144:	de b7       	in	r29, 0x3e	; 62
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
	uint32 ubrr_value = 0;
    314a:	19 82       	std	Y+1, r1	; 0x01
    314c:	1a 82       	std	Y+2, r1	; 0x02
    314e:	1b 82       	std	Y+3, r1	; 0x03
    3150:	1c 82       	std	Y+4, r1	; 0x04

	/* Set the U2X bit to 1 to double the transmission speed */
	SET_BIT(UCSRA,U2X);
    3152:	ab e2       	ldi	r26, 0x2B	; 43
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	eb e2       	ldi	r30, 0x2B	; 43
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	82 60       	ori	r24, 0x02	; 2
    315e:	8c 93       	st	X, r24

	/* Set the Receive and Transmit Enable bits to 1 */
	SET_BIT(UCSRB,TXEN);
    3160:	aa e2       	ldi	r26, 0x2A	; 42
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	ea e2       	ldi	r30, 0x2A	; 42
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	88 60       	ori	r24, 0x08	; 8
    316c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
    316e:	aa e2       	ldi	r26, 0x2A	; 42
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	ea e2       	ldi	r30, 0x2A	; 42
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	80 61       	ori	r24, 0x10	; 16
    317a:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((configPtr->parityBit)<<4);
    317c:	a0 e4       	ldi	r26, 0x40	; 64
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e0 e4       	ldi	r30, 0x40	; 64
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	28 2f       	mov	r18, r24
    3188:	2f 7c       	andi	r18, 0xCF	; 207
    318a:	ed 81       	ldd	r30, Y+5	; 0x05
    318c:	fe 81       	ldd	r31, Y+6	; 0x06
    318e:	80 81       	ld	r24, Z
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	82 95       	swap	r24
    3196:	92 95       	swap	r25
    3198:	90 7f       	andi	r25, 0xF0	; 240
    319a:	98 27       	eor	r25, r24
    319c:	80 7f       	andi	r24, 0xF0	; 240
    319e:	98 27       	eor	r25, r24
    31a0:	82 2b       	or	r24, r18
    31a2:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((configPtr->stopBit)<<3);
    31a4:	a0 e4       	ldi	r26, 0x40	; 64
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e0 e4       	ldi	r30, 0x40	; 64
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	28 2f       	mov	r18, r24
    31b0:	27 7f       	andi	r18, 0xF7	; 247
    31b2:	ed 81       	ldd	r30, Y+5	; 0x05
    31b4:	fe 81       	ldd	r31, Y+6	; 0x06
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	82 2b       	or	r24, r18
    31ca:	8c 93       	st	X, r24

	/* The bitLength consists of 3 bits, 2 in UCSRC register "UCSZ0,UCSZ1"
	 * and the third bit is in UCSRB register "UCSZ2" */
	UCSRC = (UCSRC & 0xF9) | ((configPtr->bitLength)<<2);
    31cc:	a0 e4       	ldi	r26, 0x40	; 64
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e0 e4       	ldi	r30, 0x40	; 64
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	28 2f       	mov	r18, r24
    31d8:	29 7f       	andi	r18, 0xF9	; 249
    31da:	ed 81       	ldd	r30, Y+5	; 0x05
    31dc:	fe 81       	ldd	r31, Y+6	; 0x06
    31de:	81 81       	ldd	r24, Z+1	; 0x01
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	82 2b       	or	r24, r18
    31ee:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | (((configPtr->bitLength) & 0x04)<<2);
    31f0:	aa e2       	ldi	r26, 0x2A	; 42
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	ea e2       	ldi	r30, 0x2A	; 42
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	80 81       	ld	r24, Z
    31fa:	28 2f       	mov	r18, r24
    31fc:	2b 7f       	andi	r18, 0xFB	; 251
    31fe:	ed 81       	ldd	r30, Y+5	; 0x05
    3200:	fe 81       	ldd	r31, Y+6	; 0x06
    3202:	81 81       	ldd	r24, Z+1	; 0x01
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	84 70       	andi	r24, 0x04	; 4
    320a:	90 70       	andi	r25, 0x00	; 0
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	82 2b       	or	r24, r18
    3216:	8c 93       	st	X, r24

	/* Calculate the baud rate and set it in the UBRR registers */
	ubrr_value =(( (F_CPU / ( 8 * (configPtr->baudRate) )) ) - 1);
    3218:	ed 81       	ldd	r30, Y+5	; 0x05
    321a:	fe 81       	ldd	r31, Y+6	; 0x06
    321c:	83 81       	ldd	r24, Z+3	; 0x03
    321e:	94 81       	ldd	r25, Z+4	; 0x04
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	9c 01       	movw	r18, r24
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	80 e4       	ldi	r24, 0x40	; 64
    3234:	92 e4       	ldi	r25, 0x42	; 66
    3236:	af e0       	ldi	r26, 0x0F	; 15
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__udivmodsi4>
    3242:	da 01       	movw	r26, r20
    3244:	c9 01       	movw	r24, r18
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	a1 09       	sbc	r26, r1
    324a:	b1 09       	sbc	r27, r1
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	9a 83       	std	Y+2, r25	; 0x02
    3250:	ab 83       	std	Y+3, r26	; 0x03
    3252:	bc 83       	std	Y+4, r27	; 0x04
	UBRRH = (uint8) (ubrr_value>>8);
    3254:	e0 e4       	ldi	r30, 0x40	; 64
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	9a 81       	ldd	r25, Y+2	; 0x02
    325c:	ab 81       	ldd	r26, Y+3	; 0x03
    325e:	bc 81       	ldd	r27, Y+4	; 0x04
    3260:	89 2f       	mov	r24, r25
    3262:	9a 2f       	mov	r25, r26
    3264:	ab 2f       	mov	r26, r27
    3266:	bb 27       	eor	r27, r27
    3268:	80 83       	st	Z, r24
	UBRRL = (uint8) (ubrr_value);
    326a:	e9 e2       	ldi	r30, 0x29	; 41
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	80 83       	st	Z, r24
}
    3272:	26 96       	adiw	r28, 0x06	; 6
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	cf 91       	pop	r28
    3280:	df 91       	pop	r29
    3282:	08 95       	ret

00003284 <UART_sendByte>:
 * [DESCRIPTION]:	This Function is used to send data bytes
 * [ARGS]:		uint8 byte:	This Argument shall indicate the data byte to be sent
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendByte(uint8 byte)
{
    3284:	df 93       	push	r29
    3286:	cf 93       	push	r28
    3288:	0f 92       	push	r0
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the UART data register empty flag bit "UDRE" = 0,
	 * this bit is set to one when the transmit buffer is ready to receive
	 * new data  */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3290:	eb e2       	ldi	r30, 0x2B	; 43
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	88 2f       	mov	r24, r24
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	80 72       	andi	r24, 0x20	; 32
    329c:	90 70       	andi	r25, 0x00	; 0
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	b9 f3       	breq	.-18     	; 0x3290 <UART_sendByte+0xc>
	UDR = byte;
    32a2:	ec e2       	ldi	r30, 0x2C	; 44
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	80 83       	st	Z, r24
}
    32aa:	0f 90       	pop	r0
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <UART_receiveByte>:
 * [DESCRIPTION]:	This Function is used to receive data bytes
 * [ARGS]:		No Arguments
 * [RETURNS]:	The return shall indicates the received data byte
 ----------------------------------------------------------------------------------------*/
uint8 UART_receiveByte(void)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the UART receive complete flag bit "RXC" = 1,
	* this bit is set to one when the UART finish receiving data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    32ba:	eb e2       	ldi	r30, 0x2B	; 43
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	88 23       	and	r24, r24
    32c2:	dc f7       	brge	.-10     	; 0x32ba <UART_receiveByte+0x8>
	return UDR;
    32c4:	ec e2       	ldi	r30, 0x2C	; 44
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
}
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	08 95       	ret

000032d0 <UART_sendString>:
 * 									that will pass over each character in the string and
 * 									send it.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendString(const uint8 *str)
{
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <UART_sendString+0x6>
    32d6:	0f 92       	push	r0
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	9b 83       	std	Y+3, r25	; 0x03
    32de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32e0:	19 82       	std	Y+1, r1	; 0x01
    32e2:	0e c0       	rjmp	.+28     	; 0x3300 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	28 2f       	mov	r18, r24
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	9b 81       	ldd	r25, Y+3	; 0x03
    32ee:	fc 01       	movw	r30, r24
    32f0:	e2 0f       	add	r30, r18
    32f2:	f3 1f       	adc	r31, r19
    32f4:	80 81       	ld	r24, Z
    32f6:	0e 94 42 19 	call	0x3284	; 0x3284 <UART_sendByte>
		i++;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	8f 5f       	subi	r24, 0xFF	; 255
    32fe:	89 83       	std	Y+1, r24	; 0x01
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_sendString(const uint8 *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	fc 01       	movw	r30, r24
    330c:	e2 0f       	add	r30, r18
    330e:	f3 1f       	adc	r31, r19
    3310:	80 81       	ld	r24, Z
    3312:	88 23       	and	r24, r24
    3314:	39 f7       	brne	.-50     	; 0x32e4 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	08 95       	ret

00003322 <UART_receiveString>:
 * 									that will pass over each character in the string and
 * 									receive it until it reaches the # character.
 * [RETURNS]:	No Returns
 ----------------------------------------------------------------------------------------*/
void UART_receiveString(uint8 *str)
{
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	00 d0       	rcall	.+0      	; 0x332c <UART_receiveString+0xa>
    332c:	0f 92       	push	r0
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	9b 83       	std	Y+3, r25	; 0x03
    3334:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3336:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_receiveByte();
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	28 2f       	mov	r18, r24
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	9b 81       	ldd	r25, Y+3	; 0x03
    3342:	8c 01       	movw	r16, r24
    3344:	02 0f       	add	r16, r18
    3346:	13 1f       	adc	r17, r19
    3348:	0e 94 59 19 	call	0x32b2	; 0x32b2 <UART_receiveByte>
    334c:	f8 01       	movw	r30, r16
    334e:	80 83       	st	Z, r24
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <UART_receiveString+0x4e>

	while(str[i] != '#')
	{
		i++;
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	28 2f       	mov	r18, r24
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	9b 81       	ldd	r25, Y+3	; 0x03
    3362:	8c 01       	movw	r16, r24
    3364:	02 0f       	add	r16, r18
    3366:	13 1f       	adc	r17, r19
    3368:	0e 94 59 19 	call	0x32b2	; 0x32b2 <UART_receiveByte>
    336c:	f8 01       	movw	r30, r16
    336e:	80 83       	st	Z, r24
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
	str[i] = UART_receiveByte();

	while(str[i] != '#')
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	9b 81       	ldd	r25, Y+3	; 0x03
    337a:	fc 01       	movw	r30, r24
    337c:	e2 0f       	add	r30, r18
    337e:	f3 1f       	adc	r31, r19
    3380:	80 81       	ld	r24, Z
    3382:	83 32       	cpi	r24, 0x23	; 35
    3384:	31 f7       	brne	.-52     	; 0x3352 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0';
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	10 82       	st	Z, r1
}
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <__udivmodsi4>:
    33a8:	a1 e2       	ldi	r26, 0x21	; 33
    33aa:	1a 2e       	mov	r1, r26
    33ac:	aa 1b       	sub	r26, r26
    33ae:	bb 1b       	sub	r27, r27
    33b0:	fd 01       	movw	r30, r26
    33b2:	0d c0       	rjmp	.+26     	; 0x33ce <__udivmodsi4_ep>

000033b4 <__udivmodsi4_loop>:
    33b4:	aa 1f       	adc	r26, r26
    33b6:	bb 1f       	adc	r27, r27
    33b8:	ee 1f       	adc	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	a2 17       	cp	r26, r18
    33be:	b3 07       	cpc	r27, r19
    33c0:	e4 07       	cpc	r30, r20
    33c2:	f5 07       	cpc	r31, r21
    33c4:	20 f0       	brcs	.+8      	; 0x33ce <__udivmodsi4_ep>
    33c6:	a2 1b       	sub	r26, r18
    33c8:	b3 0b       	sbc	r27, r19
    33ca:	e4 0b       	sbc	r30, r20
    33cc:	f5 0b       	sbc	r31, r21

000033ce <__udivmodsi4_ep>:
    33ce:	66 1f       	adc	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	1a 94       	dec	r1
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <__udivmodsi4_loop>
    33da:	60 95       	com	r22
    33dc:	70 95       	com	r23
    33de:	80 95       	com	r24
    33e0:	90 95       	com	r25
    33e2:	9b 01       	movw	r18, r22
    33e4:	ac 01       	movw	r20, r24
    33e6:	bd 01       	movw	r22, r26
    33e8:	cf 01       	movw	r24, r30
    33ea:	08 95       	ret

000033ec <__prologue_saves__>:
    33ec:	2f 92       	push	r2
    33ee:	3f 92       	push	r3
    33f0:	4f 92       	push	r4
    33f2:	5f 92       	push	r5
    33f4:	6f 92       	push	r6
    33f6:	7f 92       	push	r7
    33f8:	8f 92       	push	r8
    33fa:	9f 92       	push	r9
    33fc:	af 92       	push	r10
    33fe:	bf 92       	push	r11
    3400:	cf 92       	push	r12
    3402:	df 92       	push	r13
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	cd b7       	in	r28, 0x3d	; 61
    3412:	de b7       	in	r29, 0x3e	; 62
    3414:	ca 1b       	sub	r28, r26
    3416:	db 0b       	sbc	r29, r27
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	f8 94       	cli
    341c:	de bf       	out	0x3e, r29	; 62
    341e:	0f be       	out	0x3f, r0	; 63
    3420:	cd bf       	out	0x3d, r28	; 61
    3422:	09 94       	ijmp

00003424 <__epilogue_restores__>:
    3424:	2a 88       	ldd	r2, Y+18	; 0x12
    3426:	39 88       	ldd	r3, Y+17	; 0x11
    3428:	48 88       	ldd	r4, Y+16	; 0x10
    342a:	5f 84       	ldd	r5, Y+15	; 0x0f
    342c:	6e 84       	ldd	r6, Y+14	; 0x0e
    342e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3430:	8c 84       	ldd	r8, Y+12	; 0x0c
    3432:	9b 84       	ldd	r9, Y+11	; 0x0b
    3434:	aa 84       	ldd	r10, Y+10	; 0x0a
    3436:	b9 84       	ldd	r11, Y+9	; 0x09
    3438:	c8 84       	ldd	r12, Y+8	; 0x08
    343a:	df 80       	ldd	r13, Y+7	; 0x07
    343c:	ee 80       	ldd	r14, Y+6	; 0x06
    343e:	fd 80       	ldd	r15, Y+5	; 0x05
    3440:	0c 81       	ldd	r16, Y+4	; 0x04
    3442:	1b 81       	ldd	r17, Y+3	; 0x03
    3444:	aa 81       	ldd	r26, Y+2	; 0x02
    3446:	b9 81       	ldd	r27, Y+1	; 0x01
    3448:	ce 0f       	add	r28, r30
    344a:	d1 1d       	adc	r29, r1
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	ed 01       	movw	r28, r26
    3458:	08 95       	ret

0000345a <itoa>:
    345a:	fb 01       	movw	r30, r22
    345c:	9f 01       	movw	r18, r30
    345e:	e8 94       	clt
    3460:	42 30       	cpi	r20, 0x02	; 2
    3462:	c4 f0       	brlt	.+48     	; 0x3494 <itoa+0x3a>
    3464:	45 32       	cpi	r20, 0x25	; 37
    3466:	b4 f4       	brge	.+44     	; 0x3494 <itoa+0x3a>
    3468:	4a 30       	cpi	r20, 0x0A	; 10
    346a:	29 f4       	brne	.+10     	; 0x3476 <itoa+0x1c>
    346c:	97 fb       	bst	r25, 7
    346e:	1e f4       	brtc	.+6      	; 0x3476 <itoa+0x1c>
    3470:	90 95       	com	r25
    3472:	81 95       	neg	r24
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	64 2f       	mov	r22, r20
    3478:	77 27       	eor	r23, r23
    347a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__udivmodhi4>
    347e:	80 5d       	subi	r24, 0xD0	; 208
    3480:	8a 33       	cpi	r24, 0x3A	; 58
    3482:	0c f0       	brlt	.+2      	; 0x3486 <itoa+0x2c>
    3484:	89 5d       	subi	r24, 0xD9	; 217
    3486:	81 93       	st	Z+, r24
    3488:	cb 01       	movw	r24, r22
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	a1 f7       	brne	.-24     	; 0x3476 <itoa+0x1c>
    348e:	16 f4       	brtc	.+4      	; 0x3494 <itoa+0x3a>
    3490:	5d e2       	ldi	r21, 0x2D	; 45
    3492:	51 93       	st	Z+, r21
    3494:	10 82       	st	Z, r1
    3496:	c9 01       	movw	r24, r18
    3498:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <strrev>

0000349c <strrev>:
    349c:	dc 01       	movw	r26, r24
    349e:	fc 01       	movw	r30, r24
    34a0:	67 2f       	mov	r22, r23
    34a2:	71 91       	ld	r23, Z+
    34a4:	77 23       	and	r23, r23
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <strrev+0x4>
    34a8:	32 97       	sbiw	r30, 0x02	; 2
    34aa:	04 c0       	rjmp	.+8      	; 0x34b4 <strrev+0x18>
    34ac:	7c 91       	ld	r23, X
    34ae:	6d 93       	st	X+, r22
    34b0:	70 83       	st	Z, r23
    34b2:	62 91       	ld	r22, -Z
    34b4:	ae 17       	cp	r26, r30
    34b6:	bf 07       	cpc	r27, r31
    34b8:	c8 f3       	brcs	.-14     	; 0x34ac <strrev+0x10>
    34ba:	08 95       	ret

000034bc <__udivmodhi4>:
    34bc:	aa 1b       	sub	r26, r26
    34be:	bb 1b       	sub	r27, r27
    34c0:	51 e1       	ldi	r21, 0x11	; 17
    34c2:	07 c0       	rjmp	.+14     	; 0x34d2 <__udivmodhi4_ep>

000034c4 <__udivmodhi4_loop>:
    34c4:	aa 1f       	adc	r26, r26
    34c6:	bb 1f       	adc	r27, r27
    34c8:	a6 17       	cp	r26, r22
    34ca:	b7 07       	cpc	r27, r23
    34cc:	10 f0       	brcs	.+4      	; 0x34d2 <__udivmodhi4_ep>
    34ce:	a6 1b       	sub	r26, r22
    34d0:	b7 0b       	sbc	r27, r23

000034d2 <__udivmodhi4_ep>:
    34d2:	88 1f       	adc	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	5a 95       	dec	r21
    34d8:	a9 f7       	brne	.-22     	; 0x34c4 <__udivmodhi4_loop>
    34da:	80 95       	com	r24
    34dc:	90 95       	com	r25
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	08 95       	ret

000034e4 <_exit>:
    34e4:	f8 94       	cli

000034e6 <__stop_program>:
    34e6:	ff cf       	rjmp	.-2      	; 0x34e6 <__stop_program>
